var nv=Object.defineProperty;var ad=Object.getOwnPropertySymbols;var iv=Object.prototype.hasOwnProperty,rv=Object.prototype.propertyIsEnumerable;var ld=(n,t,e)=>t in n?nv(n,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):n[t]=e,cd=(n,t)=>{for(var e in t||(t={}))iv.call(t,e)&&ld(n,e,t[e]);if(ad)for(var e of ad(t))rv.call(t,e)&&ld(n,e,t[e]);return n};/**
 * @license
 * Copyright 2010-2021 Three.js Authors
 * SPDX-License-Identifier: MIT
 */const hd="134",Rr={LEFT:0,MIDDLE:1,RIGHT:2,ROTATE:0,DOLLY:1,PAN:2},Pr={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3},sv=0,ud=1,ov=2,dd=1,av=2,so=3,oo=0,Ee=1,Ir=2,fd=1,wi=0,ao=1,pd=2,md=3,gd=4,lv=5,Dr=100,cv=101,hv=102,vd=103,xd=104,uv=200,dv=201,fv=202,pv=203,yd=204,_d=205,mv=206,gv=207,vv=208,xv=209,yv=210,_v=0,bv=1,Mv=2,xc=3,wv=4,Sv=5,Ev=6,Tv=7,ya=0,Av=1,Lv=2,ar=0,Cv=1,Rv=2,Pv=3,Iv=4,Dv=5,bd=300,lo=301,co=302,yc=303,_c=304,_a=306,bc=307,Mc=1e3,on=1001,wc=1002,Ae=1003,Md=1004,wd=1005,gn=1006,Nv=1007,ba=1008,Si=1009,Fv=1010,Bv=1011,Ma=1012,Ov=1013,wa=1014,Ei=1015,Nr=1016,zv=1017,Uv=1018,Hv=1019,ho=1020,Gv=1021,Fr=1022,Ye=1023,kv=1024,Vv=1025,Wv=Ye,Br=1026,uo=1027,$v=1028,qv=1029,jv=1030,Xv=1031,Yv=1032,Zv=1033,Sd=33776,Ed=33777,Td=33778,Ad=33779,Ld=35840,Cd=35841,Rd=35842,Pd=35843,Jv=36196,Id=37492,Dd=37496,Qv=37808,Kv=37809,tx=37810,ex=37811,nx=37812,ix=37813,rx=37814,sx=37815,ox=37816,ax=37817,lx=37818,cx=37819,hx=37820,ux=37821,dx=36492,fx=37840,px=37841,mx=37842,gx=37843,vx=37844,xx=37845,yx=37846,_x=37847,bx=37848,Mx=37849,wx=37850,Sx=37851,Ex=37852,Tx=37853,Ax=2200,Lx=2201,Cx=2202,Sa=2300,Ea=2301,Sc=2302,Or=2400,zr=2401,Ta=2402,Ec=2500,Nd=2501,Rx=0,ze=3e3,lr=3001,Tc=3007,Ac=3002,Px=3003,Fd=3004,Bd=3005,Od=3006,Ix=3200,Dx=3201,Ur=0,Nx=1,Lc=7680,Fx=519,fo=35044,Aa=35048,zd="300 es";class Ti{addEventListener(t,e){this._listeners===void 0&&(this._listeners={});const i=this._listeners;i[t]===void 0&&(i[t]=[]),i[t].indexOf(e)===-1&&i[t].push(e)}hasEventListener(t,e){if(this._listeners===void 0)return!1;const i=this._listeners;return i[t]!==void 0&&i[t].indexOf(e)!==-1}removeEventListener(t,e){if(this._listeners===void 0)return;const r=this._listeners[t];if(r!==void 0){const s=r.indexOf(e);s!==-1&&r.splice(s,1)}}dispatchEvent(t){if(this._listeners===void 0)return;const i=this._listeners[t.type];if(i!==void 0){t.target=this;const r=i.slice(0);for(let s=0,o=r.length;s<o;s++)r[s].call(this,t);t.target=null}}}const Cc=Math.PI/180,Rc=180/Math.PI,Pe=[];for(let n=0;n<256;n++)Pe[n]=(n<16?"0":"")+n.toString(16);const Bx=typeof crypto!="undefined"&&"randomUUID"in crypto;function Un(){if(Bx)return crypto.randomUUID().toUpperCase();const n=Math.random()*4294967295|0,t=Math.random()*4294967295|0,e=Math.random()*4294967295|0,i=Math.random()*4294967295|0;return(Pe[n&255]+Pe[n>>8&255]+Pe[n>>16&255]+Pe[n>>24&255]+"-"+Pe[t&255]+Pe[t>>8&255]+"-"+Pe[t>>16&15|64]+Pe[t>>24&255]+"-"+Pe[e&63|128]+Pe[e>>8&255]+"-"+Pe[e>>16&255]+Pe[e>>24&255]+Pe[i&255]+Pe[i>>8&255]+Pe[i>>16&255]+Pe[i>>24&255]).toUpperCase()}function Ke(n,t,e){return Math.max(t,Math.min(e,n))}function Ox(n,t){return(n%t+t)%t}function Pc(n,t,e){return(1-e)*n+e*t}function Ud(n){return(n&n-1)==0&&n!==0}function zx(n){return Math.pow(2,Math.floor(Math.log(n)/Math.LN2))}class bt{constructor(t=0,e=0){this.x=t,this.y=e}get width(){return this.x}set width(t){this.x=t}get height(){return this.y}set height(t){this.y=t}set(t,e){return this.x=t,this.y=e,this}setScalar(t){return this.x=t,this.y=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y)}copy(t){return this.x=t.x,this.y=t.y,this}add(t,e){return e!==void 0?(console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this)}addScalar(t){return this.x+=t,this.y+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this}sub(t,e){return e!==void 0?(console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this)}subScalar(t){return this.x-=t,this.y-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this}multiply(t){return this.x*=t.x,this.y*=t.y,this}multiplyScalar(t){return this.x*=t,this.y*=t,this}divide(t){return this.x/=t.x,this.y/=t.y,this}divideScalar(t){return this.multiplyScalar(1/t)}applyMatrix3(t){const e=this.x,i=this.y,r=t.elements;return this.x=r[0]*e+r[3]*i+r[6],this.y=r[1]*e+r[4]*i+r[7],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this}clampLength(t,e){const i=this.length();return this.divideScalar(i||1).multiplyScalar(Math.max(t,Math.min(e,i)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,i=this.y-t.y;return e*e+i*i}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this}lerpVectors(t,e,i){return this.x=t.x+(e.x-t.x)*i,this.y=t.y+(e.y-t.y)*i,this}equals(t){return t.x===this.x&&t.y===this.y}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t}fromBufferAttribute(t,e,i){return i!==void 0&&console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute()."),this.x=t.getX(e),this.y=t.getY(e),this}rotateAround(t,e){const i=Math.cos(e),r=Math.sin(e),s=this.x-t.x,o=this.y-t.y;return this.x=s*i-o*r+t.x,this.y=s*r+o*i+t.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}bt.prototype.isVector2=!0;class Ie{constructor(){this.elements=[1,0,0,0,1,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")}set(t,e,i,r,s,o,a,l,c){const h=this.elements;return h[0]=t,h[1]=r,h[2]=a,h[3]=e,h[4]=s,h[5]=l,h[6]=i,h[7]=o,h[8]=c,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(t){const e=this.elements,i=t.elements;return e[0]=i[0],e[1]=i[1],e[2]=i[2],e[3]=i[3],e[4]=i[4],e[5]=i[5],e[6]=i[6],e[7]=i[7],e[8]=i[8],this}extractBasis(t,e,i){return t.setFromMatrix3Column(this,0),e.setFromMatrix3Column(this,1),i.setFromMatrix3Column(this,2),this}setFromMatrix4(t){const e=t.elements;return this.set(e[0],e[4],e[8],e[1],e[5],e[9],e[2],e[6],e[10]),this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const i=t.elements,r=e.elements,s=this.elements,o=i[0],a=i[3],l=i[6],c=i[1],h=i[4],u=i[7],d=i[2],f=i[5],g=i[8],v=r[0],x=r[3],m=r[6],p=r[1],b=r[4],_=r[7],w=r[2],E=r[5],S=r[8];return s[0]=o*v+a*p+l*w,s[3]=o*x+a*b+l*E,s[6]=o*m+a*_+l*S,s[1]=c*v+h*p+u*w,s[4]=c*x+h*b+u*E,s[7]=c*m+h*_+u*S,s[2]=d*v+f*p+g*w,s[5]=d*x+f*b+g*E,s[8]=d*m+f*_+g*S,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[3]*=t,e[6]*=t,e[1]*=t,e[4]*=t,e[7]*=t,e[2]*=t,e[5]*=t,e[8]*=t,this}determinant(){const t=this.elements,e=t[0],i=t[1],r=t[2],s=t[3],o=t[4],a=t[5],l=t[6],c=t[7],h=t[8];return e*o*h-e*a*c-i*s*h+i*a*l+r*s*c-r*o*l}invert(){const t=this.elements,e=t[0],i=t[1],r=t[2],s=t[3],o=t[4],a=t[5],l=t[6],c=t[7],h=t[8],u=h*o-a*c,d=a*l-h*s,f=c*s-o*l,g=e*u+i*d+r*f;if(g===0)return this.set(0,0,0,0,0,0,0,0,0);const v=1/g;return t[0]=u*v,t[1]=(r*c-h*i)*v,t[2]=(a*i-r*o)*v,t[3]=d*v,t[4]=(h*e-r*l)*v,t[5]=(r*s-a*e)*v,t[6]=f*v,t[7]=(i*l-c*e)*v,t[8]=(o*e-i*s)*v,this}transpose(){let t;const e=this.elements;return t=e[1],e[1]=e[3],e[3]=t,t=e[2],e[2]=e[6],e[6]=t,t=e[5],e[5]=e[7],e[7]=t,this}getNormalMatrix(t){return this.setFromMatrix4(t).invert().transpose()}transposeIntoArray(t){const e=this.elements;return t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8],this}setUvTransform(t,e,i,r,s,o,a){const l=Math.cos(s),c=Math.sin(s);return this.set(i*l,i*c,-i*(l*o+c*a)+o+t,-r*c,r*l,-r*(-c*o+l*a)+a+e,0,0,1),this}scale(t,e){const i=this.elements;return i[0]*=t,i[3]*=t,i[6]*=t,i[1]*=e,i[4]*=e,i[7]*=e,this}rotate(t){const e=Math.cos(t),i=Math.sin(t),r=this.elements,s=r[0],o=r[3],a=r[6],l=r[1],c=r[4],h=r[7];return r[0]=e*s+i*l,r[3]=e*o+i*c,r[6]=e*a+i*h,r[1]=-i*s+e*l,r[4]=-i*o+e*c,r[7]=-i*a+e*h,this}translate(t,e){const i=this.elements;return i[0]+=t*i[2],i[3]+=t*i[5],i[6]+=t*i[8],i[1]+=e*i[2],i[4]+=e*i[5],i[7]+=e*i[8],this}equals(t){const e=this.elements,i=t.elements;for(let r=0;r<9;r++)if(e[r]!==i[r])return!1;return!0}fromArray(t,e=0){for(let i=0;i<9;i++)this.elements[i]=t[i+e];return this}toArray(t=[],e=0){const i=this.elements;return t[e]=i[0],t[e+1]=i[1],t[e+2]=i[2],t[e+3]=i[3],t[e+4]=i[4],t[e+5]=i[5],t[e+6]=i[6],t[e+7]=i[7],t[e+8]=i[8],t}clone(){return new this.constructor().fromArray(this.elements)}}Ie.prototype.isMatrix3=!0;function Hd(n){if(n.length===0)return-1/0;let t=n[0];for(let e=1,i=n.length;e<i;++e)n[e]>t&&(t=n[e]);return t}function La(n){return document.createElementNS("http://www.w3.org/1999/xhtml",n)}function Gd(n,t=0){let e=3735928559^t,i=1103547991^t;for(let r=0,s;r<n.length;r++)s=n.charCodeAt(r),e=Math.imul(e^s,2654435761),i=Math.imul(i^s,1597334677);return e=Math.imul(e^e>>>16,2246822507)^Math.imul(i^i>>>13,3266489909),i=Math.imul(i^i>>>16,2246822507)^Math.imul(e^e>>>13,3266489909),4294967296*(2097151&i)+(e>>>0)}let Hr;class Gr{static getDataURL(t){if(/^data:/i.test(t.src)||typeof HTMLCanvasElement=="undefined")return t.src;let e;if(t instanceof HTMLCanvasElement)e=t;else{Hr===void 0&&(Hr=La("canvas")),Hr.width=t.width,Hr.height=t.height;const i=Hr.getContext("2d");t instanceof ImageData?i.putImageData(t,0,0):i.drawImage(t,0,0,t.width,t.height),e=Hr}return e.width>2048||e.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",t),e.toDataURL("image/jpeg",.6)):e.toDataURL("image/png")}}let Ux=0;class De extends Ti{constructor(t=De.DEFAULT_IMAGE,e=De.DEFAULT_MAPPING,i=on,r=on,s=gn,o=ba,a=Ye,l=Si,c=1,h=ze){super();Object.defineProperty(this,"id",{value:Ux++}),this.uuid=Un(),this.name="",this.image=t,this.mipmaps=[],this.mapping=e,this.wrapS=i,this.wrapT=r,this.magFilter=s,this.minFilter=o,this.anisotropy=c,this.format=a,this.internalFormat=null,this.type=l,this.offset=new bt(0,0),this.repeat=new bt(1,1),this.center=new bt(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new Ie,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=h,this.userData={},this.version=0,this.onUpdate=null,this.isRenderTargetTexture=!1}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return new this.constructor().copy(this)}copy(t){return this.name=t.name,this.image=t.image,this.mipmaps=t.mipmaps.slice(0),this.mapping=t.mapping,this.wrapS=t.wrapS,this.wrapT=t.wrapT,this.magFilter=t.magFilter,this.minFilter=t.minFilter,this.anisotropy=t.anisotropy,this.format=t.format,this.internalFormat=t.internalFormat,this.type=t.type,this.offset.copy(t.offset),this.repeat.copy(t.repeat),this.center.copy(t.center),this.rotation=t.rotation,this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrix.copy(t.matrix),this.generateMipmaps=t.generateMipmaps,this.premultiplyAlpha=t.premultiplyAlpha,this.flipY=t.flipY,this.unpackAlignment=t.unpackAlignment,this.encoding=t.encoding,this.userData=JSON.parse(JSON.stringify(t.userData)),this}toJSON(t){const e=t===void 0||typeof t=="string";if(!e&&t.textures[this.uuid]!==void 0)return t.textures[this.uuid];const i={metadata:{version:4.5,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,type:this.type,encoding:this.encoding,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};if(this.image!==void 0){const r=this.image;if(r.uuid===void 0&&(r.uuid=Un()),!e&&t.images[r.uuid]===void 0){let s;if(Array.isArray(r)){s=[];for(let o=0,a=r.length;o<a;o++)r[o].isDataTexture?s.push(Ic(r[o].image)):s.push(Ic(r[o]))}else s=Ic(r);t.images[r.uuid]={uuid:r.uuid,url:s}}i.image=r.uuid}return JSON.stringify(this.userData)!=="{}"&&(i.userData=this.userData),e||(t.textures[this.uuid]=i),i}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(t){if(this.mapping!==bd)return t;if(t.applyMatrix3(this.matrix),t.x<0||t.x>1)switch(this.wrapS){case Mc:t.x=t.x-Math.floor(t.x);break;case on:t.x=t.x<0?0:1;break;case wc:Math.abs(Math.floor(t.x)%2)===1?t.x=Math.ceil(t.x)-t.x:t.x=t.x-Math.floor(t.x);break}if(t.y<0||t.y>1)switch(this.wrapT){case Mc:t.y=t.y-Math.floor(t.y);break;case on:t.y=t.y<0?0:1;break;case wc:Math.abs(Math.floor(t.y)%2)===1?t.y=Math.ceil(t.y)-t.y:t.y=t.y-Math.floor(t.y);break}return this.flipY&&(t.y=1-t.y),t}set needsUpdate(t){t===!0&&this.version++}}De.DEFAULT_IMAGE=void 0;De.DEFAULT_MAPPING=bd;De.prototype.isTexture=!0;function Ic(n){return typeof HTMLImageElement!="undefined"&&n instanceof HTMLImageElement||typeof HTMLCanvasElement!="undefined"&&n instanceof HTMLCanvasElement||typeof ImageBitmap!="undefined"&&n instanceof ImageBitmap?Gr.getDataURL(n):n.data?{data:Array.prototype.slice.call(n.data),width:n.width,height:n.height,type:n.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}class oe{constructor(t=0,e=0,i=0,r=1){this.x=t,this.y=e,this.z=i,this.w=r}get width(){return this.z}set width(t){this.z=t}get height(){return this.w}set height(t){this.w=t}set(t,e,i,r){return this.x=t,this.y=e,this.z=i,this.w=r,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this.w=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setW(t){return this.w=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;case 3:this.w=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w!==void 0?t.w:1,this}add(t,e){return e!==void 0?(console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this.z+=t.z,this.w+=t.w,this)}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this.w+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this.w=t.w+e.w,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this.w+=t.w*e,this}sub(t,e){return e!==void 0?(console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this.z-=t.z,this.w-=t.w,this)}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this.w-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this.w=t.w-e.w,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this.w*=t.w,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this.w*=t,this}applyMatrix4(t){const e=this.x,i=this.y,r=this.z,s=this.w,o=t.elements;return this.x=o[0]*e+o[4]*i+o[8]*r+o[12]*s,this.y=o[1]*e+o[5]*i+o[9]*r+o[13]*s,this.z=o[2]*e+o[6]*i+o[10]*r+o[14]*s,this.w=o[3]*e+o[7]*i+o[11]*r+o[15]*s,this}divideScalar(t){return this.multiplyScalar(1/t)}setAxisAngleFromQuaternion(t){this.w=2*Math.acos(t.w);const e=Math.sqrt(1-t.w*t.w);return e<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=t.x/e,this.y=t.y/e,this.z=t.z/e),this}setAxisAngleFromRotationMatrix(t){let e,i,r,s;const o=.01,a=.1,l=t.elements,c=l[0],h=l[4],u=l[8],d=l[1],f=l[5],g=l[9],v=l[2],x=l[6],m=l[10];if(Math.abs(h-d)<o&&Math.abs(u-v)<o&&Math.abs(g-x)<o){if(Math.abs(h+d)<a&&Math.abs(u+v)<a&&Math.abs(g+x)<a&&Math.abs(c+f+m-3)<a)return this.set(1,0,0,0),this;e=Math.PI;const b=(c+1)/2,_=(f+1)/2,w=(m+1)/2,E=(h+d)/4,S=(u+v)/4,R=(g+x)/4;return b>_&&b>w?b<o?(i=0,r=.707106781,s=.707106781):(i=Math.sqrt(b),r=E/i,s=S/i):_>w?_<o?(i=.707106781,r=0,s=.707106781):(r=Math.sqrt(_),i=E/r,s=R/r):w<o?(i=.707106781,r=.707106781,s=0):(s=Math.sqrt(w),i=S/s,r=R/s),this.set(i,r,s,e),this}let p=Math.sqrt((x-g)*(x-g)+(u-v)*(u-v)+(d-h)*(d-h));return Math.abs(p)<.001&&(p=1),this.x=(x-g)/p,this.y=(u-v)/p,this.z=(d-h)/p,this.w=Math.acos((c+f+m-1)/2),this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this.w=Math.min(this.w,t.w),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this.w=Math.max(this.w,t.w),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this.w=Math.max(t.w,Math.min(e.w,this.w)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this.w=Math.max(t,Math.min(e,this.w)),this}clampLength(t,e){const i=this.length();return this.divideScalar(i||1).multiplyScalar(Math.max(t,Math.min(e,i)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this.w+=(t.w-this.w)*e,this}lerpVectors(t,e,i){return this.x=t.x+(e.x-t.x)*i,this.y=t.y+(e.y-t.y)*i,this.z=t.z+(e.z-t.z)*i,this.w=t.w+(e.w-t.w)*i,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z&&t.w===this.w}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this.w=t[e+3],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t[e+3]=this.w,t}fromBufferAttribute(t,e,i){return i!==void 0&&console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute()."),this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this.w=t.getW(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}oe.prototype.isVector4=!0;class Hn extends Ti{constructor(t,e,i={}){super();this.width=t,this.height=e,this.depth=1,this.scissor=new oe(0,0,t,e),this.scissorTest=!1,this.viewport=new oe(0,0,t,e),this.texture=new De(void 0,i.mapping,i.wrapS,i.wrapT,i.magFilter,i.minFilter,i.format,i.type,i.anisotropy,i.encoding),this.texture.isRenderTargetTexture=!0,this.texture.image={width:t,height:e,depth:1},this.texture.generateMipmaps=i.generateMipmaps!==void 0?i.generateMipmaps:!1,this.texture.internalFormat=i.internalFormat!==void 0?i.internalFormat:null,this.texture.minFilter=i.minFilter!==void 0?i.minFilter:gn,this.depthBuffer=i.depthBuffer!==void 0?i.depthBuffer:!0,this.stencilBuffer=i.stencilBuffer!==void 0?i.stencilBuffer:!1,this.depthTexture=i.depthTexture!==void 0?i.depthTexture:null}setTexture(t){t.image={width:this.width,height:this.height,depth:this.depth},this.texture=t}setSize(t,e,i=1){(this.width!==t||this.height!==e||this.depth!==i)&&(this.width=t,this.height=e,this.depth=i,this.texture.image.width=t,this.texture.image.height=e,this.texture.image.depth=i,this.dispose()),this.viewport.set(0,0,t,e),this.scissor.set(0,0,t,e)}clone(){return new this.constructor().copy(this)}copy(t){return this.width=t.width,this.height=t.height,this.depth=t.depth,this.viewport.copy(t.viewport),this.texture=t.texture.clone(),this.texture.image=cd({},this.texture.image),this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,this.depthTexture=t.depthTexture,this}dispose(){this.dispatchEvent({type:"dispose"})}}Hn.prototype.isWebGLRenderTarget=!0;class Hx extends Hn{constructor(t,e,i){super(t,e);const r=this.texture;this.texture=[];for(let s=0;s<i;s++)this.texture[s]=r.clone()}setSize(t,e,i=1){if(this.width!==t||this.height!==e||this.depth!==i){this.width=t,this.height=e,this.depth=i;for(let r=0,s=this.texture.length;r<s;r++)this.texture[r].image.width=t,this.texture[r].image.height=e,this.texture[r].image.depth=i;this.dispose()}return this.viewport.set(0,0,t,e),this.scissor.set(0,0,t,e),this}copy(t){this.dispose(),this.width=t.width,this.height=t.height,this.depth=t.depth,this.viewport.set(0,0,this.width,this.height),this.scissor.set(0,0,this.width,this.height),this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,this.depthTexture=t.depthTexture,this.texture.length=0;for(let e=0,i=t.texture.length;e<i;e++)this.texture[e]=t.texture[e].clone();return this}}Hx.prototype.isWebGLMultipleRenderTargets=!0;class kd extends Hn{constructor(t,e,i){super(t,e,i);this.samples=4}copy(t){return super.copy.call(this,t),this.samples=t.samples,this}}kd.prototype.isWebGLMultisampleRenderTarget=!0;class Ue{constructor(t=0,e=0,i=0,r=1){this._x=t,this._y=e,this._z=i,this._w=r}static slerp(t,e,i,r){return console.warn("THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead."),i.slerpQuaternions(t,e,r)}static slerpFlat(t,e,i,r,s,o,a){let l=i[r+0],c=i[r+1],h=i[r+2],u=i[r+3];const d=s[o+0],f=s[o+1],g=s[o+2],v=s[o+3];if(a===0){t[e+0]=l,t[e+1]=c,t[e+2]=h,t[e+3]=u;return}if(a===1){t[e+0]=d,t[e+1]=f,t[e+2]=g,t[e+3]=v;return}if(u!==v||l!==d||c!==f||h!==g){let x=1-a;const m=l*d+c*f+h*g+u*v,p=m>=0?1:-1,b=1-m*m;if(b>Number.EPSILON){const w=Math.sqrt(b),E=Math.atan2(w,m*p);x=Math.sin(x*E)/w,a=Math.sin(a*E)/w}const _=a*p;if(l=l*x+d*_,c=c*x+f*_,h=h*x+g*_,u=u*x+v*_,x===1-a){const w=1/Math.sqrt(l*l+c*c+h*h+u*u);l*=w,c*=w,h*=w,u*=w}}t[e]=l,t[e+1]=c,t[e+2]=h,t[e+3]=u}static multiplyQuaternionsFlat(t,e,i,r,s,o){const a=i[r],l=i[r+1],c=i[r+2],h=i[r+3],u=s[o],d=s[o+1],f=s[o+2],g=s[o+3];return t[e]=a*g+h*u+l*f-c*d,t[e+1]=l*g+h*d+c*u-a*f,t[e+2]=c*g+h*f+a*d-l*u,t[e+3]=h*g-a*u-l*d-c*f,t}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get w(){return this._w}set w(t){this._w=t,this._onChangeCallback()}set(t,e,i,r){return this._x=t,this._y=e,this._z=i,this._w=r,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(t){return this._x=t.x,this._y=t.y,this._z=t.z,this._w=t.w,this._onChangeCallback(),this}setFromEuler(t,e){if(!(t&&t.isEuler))throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");const i=t._x,r=t._y,s=t._z,o=t._order,a=Math.cos,l=Math.sin,c=a(i/2),h=a(r/2),u=a(s/2),d=l(i/2),f=l(r/2),g=l(s/2);switch(o){case"XYZ":this._x=d*h*u+c*f*g,this._y=c*f*u-d*h*g,this._z=c*h*g+d*f*u,this._w=c*h*u-d*f*g;break;case"YXZ":this._x=d*h*u+c*f*g,this._y=c*f*u-d*h*g,this._z=c*h*g-d*f*u,this._w=c*h*u+d*f*g;break;case"ZXY":this._x=d*h*u-c*f*g,this._y=c*f*u+d*h*g,this._z=c*h*g+d*f*u,this._w=c*h*u-d*f*g;break;case"ZYX":this._x=d*h*u-c*f*g,this._y=c*f*u+d*h*g,this._z=c*h*g-d*f*u,this._w=c*h*u+d*f*g;break;case"YZX":this._x=d*h*u+c*f*g,this._y=c*f*u+d*h*g,this._z=c*h*g-d*f*u,this._w=c*h*u-d*f*g;break;case"XZY":this._x=d*h*u-c*f*g,this._y=c*f*u-d*h*g,this._z=c*h*g+d*f*u,this._w=c*h*u+d*f*g;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+o)}return e!==!1&&this._onChangeCallback(),this}setFromAxisAngle(t,e){const i=e/2,r=Math.sin(i);return this._x=t.x*r,this._y=t.y*r,this._z=t.z*r,this._w=Math.cos(i),this._onChangeCallback(),this}setFromRotationMatrix(t){const e=t.elements,i=e[0],r=e[4],s=e[8],o=e[1],a=e[5],l=e[9],c=e[2],h=e[6],u=e[10],d=i+a+u;if(d>0){const f=.5/Math.sqrt(d+1);this._w=.25/f,this._x=(h-l)*f,this._y=(s-c)*f,this._z=(o-r)*f}else if(i>a&&i>u){const f=2*Math.sqrt(1+i-a-u);this._w=(h-l)/f,this._x=.25*f,this._y=(r+o)/f,this._z=(s+c)/f}else if(a>u){const f=2*Math.sqrt(1+a-i-u);this._w=(s-c)/f,this._x=(r+o)/f,this._y=.25*f,this._z=(l+h)/f}else{const f=2*Math.sqrt(1+u-i-a);this._w=(o-r)/f,this._x=(s+c)/f,this._y=(l+h)/f,this._z=.25*f}return this._onChangeCallback(),this}setFromUnitVectors(t,e){let i=t.dot(e)+1;return i<Number.EPSILON?(i=0,Math.abs(t.x)>Math.abs(t.z)?(this._x=-t.y,this._y=t.x,this._z=0,this._w=i):(this._x=0,this._y=-t.z,this._z=t.y,this._w=i)):(this._x=t.y*e.z-t.z*e.y,this._y=t.z*e.x-t.x*e.z,this._z=t.x*e.y-t.y*e.x,this._w=i),this.normalize()}angleTo(t){return 2*Math.acos(Math.abs(Ke(this.dot(t),-1,1)))}rotateTowards(t,e){const i=this.angleTo(t);if(i===0)return this;const r=Math.min(1,e/i);return this.slerp(t,r),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(t){return this._x*t._x+this._y*t._y+this._z*t._z+this._w*t._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let t=this.length();return t===0?(this._x=0,this._y=0,this._z=0,this._w=1):(t=1/t,this._x=this._x*t,this._y=this._y*t,this._z=this._z*t,this._w=this._w*t),this._onChangeCallback(),this}multiply(t,e){return e!==void 0?(console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),this.multiplyQuaternions(t,e)):this.multiplyQuaternions(this,t)}premultiply(t){return this.multiplyQuaternions(t,this)}multiplyQuaternions(t,e){const i=t._x,r=t._y,s=t._z,o=t._w,a=e._x,l=e._y,c=e._z,h=e._w;return this._x=i*h+o*a+r*c-s*l,this._y=r*h+o*l+s*a-i*c,this._z=s*h+o*c+i*l-r*a,this._w=o*h-i*a-r*l-s*c,this._onChangeCallback(),this}slerp(t,e){if(e===0)return this;if(e===1)return this.copy(t);const i=this._x,r=this._y,s=this._z,o=this._w;let a=o*t._w+i*t._x+r*t._y+s*t._z;if(a<0?(this._w=-t._w,this._x=-t._x,this._y=-t._y,this._z=-t._z,a=-a):this.copy(t),a>=1)return this._w=o,this._x=i,this._y=r,this._z=s,this;const l=1-a*a;if(l<=Number.EPSILON){const f=1-e;return this._w=f*o+e*this._w,this._x=f*i+e*this._x,this._y=f*r+e*this._y,this._z=f*s+e*this._z,this.normalize(),this._onChangeCallback(),this}const c=Math.sqrt(l),h=Math.atan2(c,a),u=Math.sin((1-e)*h)/c,d=Math.sin(e*h)/c;return this._w=o*u+this._w*d,this._x=i*u+this._x*d,this._y=r*u+this._y*d,this._z=s*u+this._z*d,this._onChangeCallback(),this}slerpQuaternions(t,e,i){this.copy(t).slerp(e,i)}random(){const t=Math.random(),e=Math.sqrt(1-t),i=Math.sqrt(t),r=2*Math.PI*Math.random(),s=2*Math.PI*Math.random();return this.set(e*Math.cos(r),i*Math.sin(s),i*Math.cos(s),e*Math.sin(r))}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._w===this._w}fromArray(t,e=0){return this._x=t[e],this._y=t[e+1],this._z=t[e+2],this._w=t[e+3],this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._w,t}fromBufferAttribute(t,e){return this._x=t.getX(e),this._y=t.getY(e),this._z=t.getZ(e),this._w=t.getW(e),this}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}}Ue.prototype.isQuaternion=!0;class O{constructor(t=0,e=0,i=0){this.x=t,this.y=e,this.z=i}set(t,e,i){return i===void 0&&(i=this.z),this.x=t,this.y=e,this.z=i,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}add(t,e){return e!==void 0?(console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this.z+=t.z,this)}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this}sub(t,e){return e!==void 0?(console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this.z-=t.z,this)}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this}multiply(t,e){return e!==void 0?(console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),this.multiplyVectors(t,e)):(this.x*=t.x,this.y*=t.y,this.z*=t.z,this)}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this}multiplyVectors(t,e){return this.x=t.x*e.x,this.y=t.y*e.y,this.z=t.z*e.z,this}applyEuler(t){return t&&t.isEuler||console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."),this.applyQuaternion(Vd.setFromEuler(t))}applyAxisAngle(t,e){return this.applyQuaternion(Vd.setFromAxisAngle(t,e))}applyMatrix3(t){const e=this.x,i=this.y,r=this.z,s=t.elements;return this.x=s[0]*e+s[3]*i+s[6]*r,this.y=s[1]*e+s[4]*i+s[7]*r,this.z=s[2]*e+s[5]*i+s[8]*r,this}applyNormalMatrix(t){return this.applyMatrix3(t).normalize()}applyMatrix4(t){const e=this.x,i=this.y,r=this.z,s=t.elements,o=1/(s[3]*e+s[7]*i+s[11]*r+s[15]);return this.x=(s[0]*e+s[4]*i+s[8]*r+s[12])*o,this.y=(s[1]*e+s[5]*i+s[9]*r+s[13])*o,this.z=(s[2]*e+s[6]*i+s[10]*r+s[14])*o,this}applyQuaternion(t){const e=this.x,i=this.y,r=this.z,s=t.x,o=t.y,a=t.z,l=t.w,c=l*e+o*r-a*i,h=l*i+a*e-s*r,u=l*r+s*i-o*e,d=-s*e-o*i-a*r;return this.x=c*l+d*-s+h*-a-u*-o,this.y=h*l+d*-o+u*-s-c*-a,this.z=u*l+d*-a+c*-o-h*-s,this}project(t){return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix)}unproject(t){return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld)}transformDirection(t){const e=this.x,i=this.y,r=this.z,s=t.elements;return this.x=s[0]*e+s[4]*i+s[8]*r,this.y=s[1]*e+s[5]*i+s[9]*r,this.z=s[2]*e+s[6]*i+s[10]*r,this.normalize()}divide(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this}divideScalar(t){return this.multiplyScalar(1/t)}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this}clampLength(t,e){const i=this.length();return this.divideScalar(i||1).multiplyScalar(Math.max(t,Math.min(e,i)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this}lerpVectors(t,e,i){return this.x=t.x+(e.x-t.x)*i,this.y=t.y+(e.y-t.y)*i,this.z=t.z+(e.z-t.z)*i,this}cross(t,e){return e!==void 0?(console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),this.crossVectors(t,e)):this.crossVectors(this,t)}crossVectors(t,e){const i=t.x,r=t.y,s=t.z,o=e.x,a=e.y,l=e.z;return this.x=r*l-s*a,this.y=s*o-i*l,this.z=i*a-r*o,this}projectOnVector(t){const e=t.lengthSq();if(e===0)return this.set(0,0,0);const i=t.dot(this)/e;return this.copy(t).multiplyScalar(i)}projectOnPlane(t){return Dc.copy(this).projectOnVector(t),this.sub(Dc)}reflect(t){return this.sub(Dc.copy(t).multiplyScalar(2*this.dot(t)))}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(e===0)return Math.PI/2;const i=this.dot(t)/e;return Math.acos(Ke(i,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,i=this.y-t.y,r=this.z-t.z;return e*e+i*i+r*r}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)+Math.abs(this.z-t.z)}setFromSpherical(t){return this.setFromSphericalCoords(t.radius,t.phi,t.theta)}setFromSphericalCoords(t,e,i){const r=Math.sin(e)*t;return this.x=r*Math.sin(i),this.y=Math.cos(e)*t,this.z=r*Math.cos(i),this}setFromCylindrical(t){return this.setFromCylindricalCoords(t.radius,t.theta,t.y)}setFromCylindricalCoords(t,e,i){return this.x=t*Math.sin(e),this.y=i,this.z=t*Math.cos(e),this}setFromMatrixPosition(t){const e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this}setFromMatrixScale(t){const e=this.setFromMatrixColumn(t,0).length(),i=this.setFromMatrixColumn(t,1).length(),r=this.setFromMatrixColumn(t,2).length();return this.x=e,this.y=i,this.z=r,this}setFromMatrixColumn(t,e){return this.fromArray(t.elements,e*4)}setFromMatrix3Column(t,e){return this.fromArray(t.elements,e*3)}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t}fromBufferAttribute(t,e,i){return i!==void 0&&console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute()."),this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const t=(Math.random()-.5)*2,e=Math.random()*Math.PI*2,i=Math.sqrt(1-t**2);return this.x=i*Math.cos(e),this.y=i*Math.sin(e),this.z=t,this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}O.prototype.isVector3=!0;const Dc=new O,Vd=new Ue;class Tn{constructor(t=new O(1/0,1/0,1/0),e=new O(-1/0,-1/0,-1/0)){this.min=t,this.max=e}set(t,e){return this.min.copy(t),this.max.copy(e),this}setFromArray(t){let e=1/0,i=1/0,r=1/0,s=-1/0,o=-1/0,a=-1/0;for(let l=0,c=t.length;l<c;l+=3){const h=t[l],u=t[l+1],d=t[l+2];h<e&&(e=h),u<i&&(i=u),d<r&&(r=d),h>s&&(s=h),u>o&&(o=u),d>a&&(a=d)}return this.min.set(e,i,r),this.max.set(s,o,a),this}setFromBufferAttribute(t){let e=1/0,i=1/0,r=1/0,s=-1/0,o=-1/0,a=-1/0;for(let l=0,c=t.count;l<c;l++){const h=t.getX(l),u=t.getY(l),d=t.getZ(l);h<e&&(e=h),u<i&&(i=u),d<r&&(r=d),h>s&&(s=h),u>o&&(o=u),d>a&&(a=d)}return this.min.set(e,i,r),this.max.set(s,o,a),this}setFromPoints(t){this.makeEmpty();for(let e=0,i=t.length;e<i;e++)this.expandByPoint(t[e]);return this}setFromCenterAndSize(t,e){const i=po.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(i),this.max.copy(t).add(i),this}setFromObject(t){return this.makeEmpty(),this.expandByObject(t)}clone(){return new this.constructor().copy(this)}copy(t){return this.min.copy(t.min),this.max.copy(t.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(t){return this.isEmpty()?t.set(0,0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(t){return this.isEmpty()?t.set(0,0,0):t.subVectors(this.max,this.min)}expandByPoint(t){return this.min.min(t),this.max.max(t),this}expandByVector(t){return this.min.sub(t),this.max.add(t),this}expandByScalar(t){return this.min.addScalar(-t),this.max.addScalar(t),this}expandByObject(t){t.updateWorldMatrix(!1,!1);const e=t.geometry;e!==void 0&&(e.boundingBox===null&&e.computeBoundingBox(),Nc.copy(e.boundingBox),Nc.applyMatrix4(t.matrixWorld),this.union(Nc));const i=t.children;for(let r=0,s=i.length;r<s;r++)this.expandByObject(i[r]);return this}containsPoint(t){return!(t.x<this.min.x||t.x>this.max.x||t.y<this.min.y||t.y>this.max.y||t.z<this.min.z||t.z>this.max.z)}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y&&this.min.z<=t.min.z&&t.max.z<=this.max.z}getParameter(t,e){return e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y),(t.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(t){return!(t.max.x<this.min.x||t.min.x>this.max.x||t.max.y<this.min.y||t.min.y>this.max.y||t.max.z<this.min.z||t.min.z>this.max.z)}intersectsSphere(t){return this.clampPoint(t.center,po),po.distanceToSquared(t.center)<=t.radius*t.radius}intersectsPlane(t){let e,i;return t.normal.x>0?(e=t.normal.x*this.min.x,i=t.normal.x*this.max.x):(e=t.normal.x*this.max.x,i=t.normal.x*this.min.x),t.normal.y>0?(e+=t.normal.y*this.min.y,i+=t.normal.y*this.max.y):(e+=t.normal.y*this.max.y,i+=t.normal.y*this.min.y),t.normal.z>0?(e+=t.normal.z*this.min.z,i+=t.normal.z*this.max.z):(e+=t.normal.z*this.max.z,i+=t.normal.z*this.min.z),e<=-t.constant&&i>=-t.constant}intersectsTriangle(t){if(this.isEmpty())return!1;this.getCenter(mo),Ca.subVectors(this.max,mo),kr.subVectors(t.a,mo),Vr.subVectors(t.b,mo),Wr.subVectors(t.c,mo),Ai.subVectors(Vr,kr),Li.subVectors(Wr,Vr),cr.subVectors(kr,Wr);let e=[0,-Ai.z,Ai.y,0,-Li.z,Li.y,0,-cr.z,cr.y,Ai.z,0,-Ai.x,Li.z,0,-Li.x,cr.z,0,-cr.x,-Ai.y,Ai.x,0,-Li.y,Li.x,0,-cr.y,cr.x,0];return!Fc(e,kr,Vr,Wr,Ca)||(e=[1,0,0,0,1,0,0,0,1],!Fc(e,kr,Vr,Wr,Ca))?!1:(Ra.crossVectors(Ai,Li),e=[Ra.x,Ra.y,Ra.z],Fc(e,kr,Vr,Wr,Ca))}clampPoint(t,e){return e.copy(t).clamp(this.min,this.max)}distanceToPoint(t){return po.copy(t).clamp(this.min,this.max).sub(t).length()}getBoundingSphere(t){return this.getCenter(t.center),t.radius=this.getSize(po).length()*.5,t}intersect(t){return this.min.max(t.min),this.max.min(t.max),this.isEmpty()&&this.makeEmpty(),this}union(t){return this.min.min(t.min),this.max.max(t.max),this}applyMatrix4(t){return this.isEmpty()?this:(ei[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t),ei[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t),ei[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t),ei[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t),ei[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(t),ei[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t),ei[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t),ei[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t),this.setFromPoints(ei),this)}translate(t){return this.min.add(t),this.max.add(t),this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}Tn.prototype.isBox3=!0;const ei=[new O,new O,new O,new O,new O,new O,new O,new O],po=new O,Nc=new Tn,kr=new O,Vr=new O,Wr=new O,Ai=new O,Li=new O,cr=new O,mo=new O,Ca=new O,Ra=new O,hr=new O;function Fc(n,t,e,i,r){for(let s=0,o=n.length-3;s<=o;s+=3){hr.fromArray(n,s);const a=r.x*Math.abs(hr.x)+r.y*Math.abs(hr.y)+r.z*Math.abs(hr.z),l=t.dot(hr),c=e.dot(hr),h=i.dot(hr);if(Math.max(-Math.max(l,c,h),Math.min(l,c,h))>a)return!1}return!0}const Gx=new Tn,Wd=new O,Bc=new O,Oc=new O;class $r{constructor(t=new O,e=-1){this.center=t,this.radius=e}set(t,e){return this.center.copy(t),this.radius=e,this}setFromPoints(t,e){const i=this.center;e!==void 0?i.copy(e):Gx.setFromPoints(t).getCenter(i);let r=0;for(let s=0,o=t.length;s<o;s++)r=Math.max(r,i.distanceToSquared(t[s]));return this.radius=Math.sqrt(r),this}copy(t){return this.center.copy(t.center),this.radius=t.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(t){return t.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(t){return t.distanceTo(this.center)-this.radius}intersectsSphere(t){const e=this.radius+t.radius;return t.center.distanceToSquared(this.center)<=e*e}intersectsBox(t){return t.intersectsSphere(this)}intersectsPlane(t){return Math.abs(t.distanceToPoint(this.center))<=this.radius}clampPoint(t,e){const i=this.center.distanceToSquared(t);return e.copy(t),i>this.radius*this.radius&&(e.sub(this.center).normalize(),e.multiplyScalar(this.radius).add(this.center)),e}getBoundingBox(t){return this.isEmpty()?(t.makeEmpty(),t):(t.set(this.center,this.center),t.expandByScalar(this.radius),t)}applyMatrix4(t){return this.center.applyMatrix4(t),this.radius=this.radius*t.getMaxScaleOnAxis(),this}translate(t){return this.center.add(t),this}expandByPoint(t){Oc.subVectors(t,this.center);const e=Oc.lengthSq();if(e>this.radius*this.radius){const i=Math.sqrt(e),r=(i-this.radius)*.5;this.center.add(Oc.multiplyScalar(r/i)),this.radius+=r}return this}union(t){return Bc.subVectors(t.center,this.center).normalize().multiplyScalar(t.radius),this.expandByPoint(Wd.copy(t.center).add(Bc)),this.expandByPoint(Wd.copy(t.center).sub(Bc)),this}equals(t){return t.center.equals(this.center)&&t.radius===this.radius}clone(){return new this.constructor().copy(this)}}const ni=new O,zc=new O,Pa=new O,Ci=new O,Uc=new O,Ia=new O,Hc=new O;class qr{constructor(t=new O,e=new O(0,0,-1)){this.origin=t,this.direction=e}set(t,e){return this.origin.copy(t),this.direction.copy(e),this}copy(t){return this.origin.copy(t.origin),this.direction.copy(t.direction),this}at(t,e){return e.copy(this.direction).multiplyScalar(t).add(this.origin)}lookAt(t){return this.direction.copy(t).sub(this.origin).normalize(),this}recast(t){return this.origin.copy(this.at(t,ni)),this}closestPointToPoint(t,e){e.subVectors(t,this.origin);const i=e.dot(this.direction);return i<0?e.copy(this.origin):e.copy(this.direction).multiplyScalar(i).add(this.origin)}distanceToPoint(t){return Math.sqrt(this.distanceSqToPoint(t))}distanceSqToPoint(t){const e=ni.subVectors(t,this.origin).dot(this.direction);return e<0?this.origin.distanceToSquared(t):(ni.copy(this.direction).multiplyScalar(e).add(this.origin),ni.distanceToSquared(t))}distanceSqToSegment(t,e,i,r){zc.copy(t).add(e).multiplyScalar(.5),Pa.copy(e).sub(t).normalize(),Ci.copy(this.origin).sub(zc);const s=t.distanceTo(e)*.5,o=-this.direction.dot(Pa),a=Ci.dot(this.direction),l=-Ci.dot(Pa),c=Ci.lengthSq(),h=Math.abs(1-o*o);let u,d,f,g;if(h>0)if(u=o*l-a,d=o*a-l,g=s*h,u>=0)if(d>=-g)if(d<=g){const v=1/h;u*=v,d*=v,f=u*(u+o*d+2*a)+d*(o*u+d+2*l)+c}else d=s,u=Math.max(0,-(o*d+a)),f=-u*u+d*(d+2*l)+c;else d=-s,u=Math.max(0,-(o*d+a)),f=-u*u+d*(d+2*l)+c;else d<=-g?(u=Math.max(0,-(-o*s+a)),d=u>0?-s:Math.min(Math.max(-s,-l),s),f=-u*u+d*(d+2*l)+c):d<=g?(u=0,d=Math.min(Math.max(-s,-l),s),f=d*(d+2*l)+c):(u=Math.max(0,-(o*s+a)),d=u>0?s:Math.min(Math.max(-s,-l),s),f=-u*u+d*(d+2*l)+c);else d=o>0?-s:s,u=Math.max(0,-(o*d+a)),f=-u*u+d*(d+2*l)+c;return i&&i.copy(this.direction).multiplyScalar(u).add(this.origin),r&&r.copy(Pa).multiplyScalar(d).add(zc),f}intersectSphere(t,e){ni.subVectors(t.center,this.origin);const i=ni.dot(this.direction),r=ni.dot(ni)-i*i,s=t.radius*t.radius;if(r>s)return null;const o=Math.sqrt(s-r),a=i-o,l=i+o;return a<0&&l<0?null:a<0?this.at(l,e):this.at(a,e)}intersectsSphere(t){return this.distanceSqToPoint(t.center)<=t.radius*t.radius}distanceToPlane(t){const e=t.normal.dot(this.direction);if(e===0)return t.distanceToPoint(this.origin)===0?0:null;const i=-(this.origin.dot(t.normal)+t.constant)/e;return i>=0?i:null}intersectPlane(t,e){const i=this.distanceToPlane(t);return i===null?null:this.at(i,e)}intersectsPlane(t){const e=t.distanceToPoint(this.origin);return e===0||t.normal.dot(this.direction)*e<0}intersectBox(t,e){let i,r,s,o,a,l;const c=1/this.direction.x,h=1/this.direction.y,u=1/this.direction.z,d=this.origin;return c>=0?(i=(t.min.x-d.x)*c,r=(t.max.x-d.x)*c):(i=(t.max.x-d.x)*c,r=(t.min.x-d.x)*c),h>=0?(s=(t.min.y-d.y)*h,o=(t.max.y-d.y)*h):(s=(t.max.y-d.y)*h,o=(t.min.y-d.y)*h),i>o||s>r||((s>i||i!==i)&&(i=s),(o<r||r!==r)&&(r=o),u>=0?(a=(t.min.z-d.z)*u,l=(t.max.z-d.z)*u):(a=(t.max.z-d.z)*u,l=(t.min.z-d.z)*u),i>l||a>r)||((a>i||i!==i)&&(i=a),(l<r||r!==r)&&(r=l),r<0)?null:this.at(i>=0?i:r,e)}intersectsBox(t){return this.intersectBox(t,ni)!==null}intersectTriangle(t,e,i,r,s){Uc.subVectors(e,t),Ia.subVectors(i,t),Hc.crossVectors(Uc,Ia);let o=this.direction.dot(Hc),a;if(o>0){if(r)return null;a=1}else if(o<0)a=-1,o=-o;else return null;Ci.subVectors(this.origin,t);const l=a*this.direction.dot(Ia.crossVectors(Ci,Ia));if(l<0)return null;const c=a*this.direction.dot(Uc.cross(Ci));if(c<0||l+c>o)return null;const h=-a*Ci.dot(Hc);return h<0?null:this.at(h/o,s)}applyMatrix4(t){return this.origin.applyMatrix4(t),this.direction.transformDirection(t),this}equals(t){return t.origin.equals(this.origin)&&t.direction.equals(this.direction)}clone(){return new this.constructor().copy(this)}}class Ht{constructor(){this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")}set(t,e,i,r,s,o,a,l,c,h,u,d,f,g,v,x){const m=this.elements;return m[0]=t,m[4]=e,m[8]=i,m[12]=r,m[1]=s,m[5]=o,m[9]=a,m[13]=l,m[2]=c,m[6]=h,m[10]=u,m[14]=d,m[3]=f,m[7]=g,m[11]=v,m[15]=x,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return new Ht().fromArray(this.elements)}copy(t){const e=this.elements,i=t.elements;return e[0]=i[0],e[1]=i[1],e[2]=i[2],e[3]=i[3],e[4]=i[4],e[5]=i[5],e[6]=i[6],e[7]=i[7],e[8]=i[8],e[9]=i[9],e[10]=i[10],e[11]=i[11],e[12]=i[12],e[13]=i[13],e[14]=i[14],e[15]=i[15],this}copyPosition(t){const e=this.elements,i=t.elements;return e[12]=i[12],e[13]=i[13],e[14]=i[14],this}setFromMatrix3(t){const e=t.elements;return this.set(e[0],e[3],e[6],0,e[1],e[4],e[7],0,e[2],e[5],e[8],0,0,0,0,1),this}extractBasis(t,e,i){return t.setFromMatrixColumn(this,0),e.setFromMatrixColumn(this,1),i.setFromMatrixColumn(this,2),this}makeBasis(t,e,i){return this.set(t.x,e.x,i.x,0,t.y,e.y,i.y,0,t.z,e.z,i.z,0,0,0,0,1),this}extractRotation(t){const e=this.elements,i=t.elements,r=1/jr.setFromMatrixColumn(t,0).length(),s=1/jr.setFromMatrixColumn(t,1).length(),o=1/jr.setFromMatrixColumn(t,2).length();return e[0]=i[0]*r,e[1]=i[1]*r,e[2]=i[2]*r,e[3]=0,e[4]=i[4]*s,e[5]=i[5]*s,e[6]=i[6]*s,e[7]=0,e[8]=i[8]*o,e[9]=i[9]*o,e[10]=i[10]*o,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromEuler(t){t&&t.isEuler||console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");const e=this.elements,i=t.x,r=t.y,s=t.z,o=Math.cos(i),a=Math.sin(i),l=Math.cos(r),c=Math.sin(r),h=Math.cos(s),u=Math.sin(s);if(t.order==="XYZ"){const d=o*h,f=o*u,g=a*h,v=a*u;e[0]=l*h,e[4]=-l*u,e[8]=c,e[1]=f+g*c,e[5]=d-v*c,e[9]=-a*l,e[2]=v-d*c,e[6]=g+f*c,e[10]=o*l}else if(t.order==="YXZ"){const d=l*h,f=l*u,g=c*h,v=c*u;e[0]=d+v*a,e[4]=g*a-f,e[8]=o*c,e[1]=o*u,e[5]=o*h,e[9]=-a,e[2]=f*a-g,e[6]=v+d*a,e[10]=o*l}else if(t.order==="ZXY"){const d=l*h,f=l*u,g=c*h,v=c*u;e[0]=d-v*a,e[4]=-o*u,e[8]=g+f*a,e[1]=f+g*a,e[5]=o*h,e[9]=v-d*a,e[2]=-o*c,e[6]=a,e[10]=o*l}else if(t.order==="ZYX"){const d=o*h,f=o*u,g=a*h,v=a*u;e[0]=l*h,e[4]=g*c-f,e[8]=d*c+v,e[1]=l*u,e[5]=v*c+d,e[9]=f*c-g,e[2]=-c,e[6]=a*l,e[10]=o*l}else if(t.order==="YZX"){const d=o*l,f=o*c,g=a*l,v=a*c;e[0]=l*h,e[4]=v-d*u,e[8]=g*u+f,e[1]=u,e[5]=o*h,e[9]=-a*h,e[2]=-c*h,e[6]=f*u+g,e[10]=d-v*u}else if(t.order==="XZY"){const d=o*l,f=o*c,g=a*l,v=a*c;e[0]=l*h,e[4]=-u,e[8]=c*h,e[1]=d*u+v,e[5]=o*h,e[9]=f*u-g,e[2]=g*u-f,e[6]=a*h,e[10]=v*u+d}return e[3]=0,e[7]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromQuaternion(t){return this.compose(kx,t,Vx)}lookAt(t,e,i){const r=this.elements;return an.subVectors(t,e),an.lengthSq()===0&&(an.z=1),an.normalize(),Ri.crossVectors(i,an),Ri.lengthSq()===0&&(Math.abs(i.z)===1?an.x+=1e-4:an.z+=1e-4,an.normalize(),Ri.crossVectors(i,an)),Ri.normalize(),Da.crossVectors(an,Ri),r[0]=Ri.x,r[4]=Da.x,r[8]=an.x,r[1]=Ri.y,r[5]=Da.y,r[9]=an.y,r[2]=Ri.z,r[6]=Da.z,r[10]=an.z,this}multiply(t,e){return e!==void 0?(console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),this.multiplyMatrices(t,e)):this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const i=t.elements,r=e.elements,s=this.elements,o=i[0],a=i[4],l=i[8],c=i[12],h=i[1],u=i[5],d=i[9],f=i[13],g=i[2],v=i[6],x=i[10],m=i[14],p=i[3],b=i[7],_=i[11],w=i[15],E=r[0],S=r[4],R=r[8],W=r[12],B=r[1],T=r[5],k=r[9],I=r[13],N=r[2],C=r[6],L=r[10],F=r[14],q=r[3],ot=r[7],pt=r[11],rt=r[15];return s[0]=o*E+a*B+l*N+c*q,s[4]=o*S+a*T+l*C+c*ot,s[8]=o*R+a*k+l*L+c*pt,s[12]=o*W+a*I+l*F+c*rt,s[1]=h*E+u*B+d*N+f*q,s[5]=h*S+u*T+d*C+f*ot,s[9]=h*R+u*k+d*L+f*pt,s[13]=h*W+u*I+d*F+f*rt,s[2]=g*E+v*B+x*N+m*q,s[6]=g*S+v*T+x*C+m*ot,s[10]=g*R+v*k+x*L+m*pt,s[14]=g*W+v*I+x*F+m*rt,s[3]=p*E+b*B+_*N+w*q,s[7]=p*S+b*T+_*C+w*ot,s[11]=p*R+b*k+_*L+w*pt,s[15]=p*W+b*I+_*F+w*rt,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[4]*=t,e[8]*=t,e[12]*=t,e[1]*=t,e[5]*=t,e[9]*=t,e[13]*=t,e[2]*=t,e[6]*=t,e[10]*=t,e[14]*=t,e[3]*=t,e[7]*=t,e[11]*=t,e[15]*=t,this}determinant(){const t=this.elements,e=t[0],i=t[4],r=t[8],s=t[12],o=t[1],a=t[5],l=t[9],c=t[13],h=t[2],u=t[6],d=t[10],f=t[14],g=t[3],v=t[7],x=t[11],m=t[15];return g*(+s*l*u-r*c*u-s*a*d+i*c*d+r*a*f-i*l*f)+v*(+e*l*f-e*c*d+s*o*d-r*o*f+r*c*h-s*l*h)+x*(+e*c*u-e*a*f-s*o*u+i*o*f+s*a*h-i*c*h)+m*(-r*a*h-e*l*u+e*a*d+r*o*u-i*o*d+i*l*h)}transpose(){const t=this.elements;let e;return e=t[1],t[1]=t[4],t[4]=e,e=t[2],t[2]=t[8],t[8]=e,e=t[6],t[6]=t[9],t[9]=e,e=t[3],t[3]=t[12],t[12]=e,e=t[7],t[7]=t[13],t[13]=e,e=t[11],t[11]=t[14],t[14]=e,this}setPosition(t,e,i){const r=this.elements;return t.isVector3?(r[12]=t.x,r[13]=t.y,r[14]=t.z):(r[12]=t,r[13]=e,r[14]=i),this}invert(){const t=this.elements,e=t[0],i=t[1],r=t[2],s=t[3],o=t[4],a=t[5],l=t[6],c=t[7],h=t[8],u=t[9],d=t[10],f=t[11],g=t[12],v=t[13],x=t[14],m=t[15],p=u*x*c-v*d*c+v*l*f-a*x*f-u*l*m+a*d*m,b=g*d*c-h*x*c-g*l*f+o*x*f+h*l*m-o*d*m,_=h*v*c-g*u*c+g*a*f-o*v*f-h*a*m+o*u*m,w=g*u*l-h*v*l-g*a*d+o*v*d+h*a*x-o*u*x,E=e*p+i*b+r*_+s*w;if(E===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const S=1/E;return t[0]=p*S,t[1]=(v*d*s-u*x*s-v*r*f+i*x*f+u*r*m-i*d*m)*S,t[2]=(a*x*s-v*l*s+v*r*c-i*x*c-a*r*m+i*l*m)*S,t[3]=(u*l*s-a*d*s-u*r*c+i*d*c+a*r*f-i*l*f)*S,t[4]=b*S,t[5]=(h*x*s-g*d*s+g*r*f-e*x*f-h*r*m+e*d*m)*S,t[6]=(g*l*s-o*x*s-g*r*c+e*x*c+o*r*m-e*l*m)*S,t[7]=(o*d*s-h*l*s+h*r*c-e*d*c-o*r*f+e*l*f)*S,t[8]=_*S,t[9]=(g*u*s-h*v*s-g*i*f+e*v*f+h*i*m-e*u*m)*S,t[10]=(o*v*s-g*a*s+g*i*c-e*v*c-o*i*m+e*a*m)*S,t[11]=(h*a*s-o*u*s-h*i*c+e*u*c+o*i*f-e*a*f)*S,t[12]=w*S,t[13]=(h*v*r-g*u*r+g*i*d-e*v*d-h*i*x+e*u*x)*S,t[14]=(g*a*r-o*v*r-g*i*l+e*v*l+o*i*x-e*a*x)*S,t[15]=(o*u*r-h*a*r+h*i*l-e*u*l-o*i*d+e*a*d)*S,this}scale(t){const e=this.elements,i=t.x,r=t.y,s=t.z;return e[0]*=i,e[4]*=r,e[8]*=s,e[1]*=i,e[5]*=r,e[9]*=s,e[2]*=i,e[6]*=r,e[10]*=s,e[3]*=i,e[7]*=r,e[11]*=s,this}getMaxScaleOnAxis(){const t=this.elements,e=t[0]*t[0]+t[1]*t[1]+t[2]*t[2],i=t[4]*t[4]+t[5]*t[5]+t[6]*t[6],r=t[8]*t[8]+t[9]*t[9]+t[10]*t[10];return Math.sqrt(Math.max(e,i,r))}makeTranslation(t,e,i){return this.set(1,0,0,t,0,1,0,e,0,0,1,i,0,0,0,1),this}makeRotationX(t){const e=Math.cos(t),i=Math.sin(t);return this.set(1,0,0,0,0,e,-i,0,0,i,e,0,0,0,0,1),this}makeRotationY(t){const e=Math.cos(t),i=Math.sin(t);return this.set(e,0,i,0,0,1,0,0,-i,0,e,0,0,0,0,1),this}makeRotationZ(t){const e=Math.cos(t),i=Math.sin(t);return this.set(e,-i,0,0,i,e,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(t,e){const i=Math.cos(e),r=Math.sin(e),s=1-i,o=t.x,a=t.y,l=t.z,c=s*o,h=s*a;return this.set(c*o+i,c*a-r*l,c*l+r*a,0,c*a+r*l,h*a+i,h*l-r*o,0,c*l-r*a,h*l+r*o,s*l*l+i,0,0,0,0,1),this}makeScale(t,e,i){return this.set(t,0,0,0,0,e,0,0,0,0,i,0,0,0,0,1),this}makeShear(t,e,i,r,s,o){return this.set(1,i,s,0,t,1,o,0,e,r,1,0,0,0,0,1),this}compose(t,e,i){const r=this.elements,s=e._x,o=e._y,a=e._z,l=e._w,c=s+s,h=o+o,u=a+a,d=s*c,f=s*h,g=s*u,v=o*h,x=o*u,m=a*u,p=l*c,b=l*h,_=l*u,w=i.x,E=i.y,S=i.z;return r[0]=(1-(v+m))*w,r[1]=(f+_)*w,r[2]=(g-b)*w,r[3]=0,r[4]=(f-_)*E,r[5]=(1-(d+m))*E,r[6]=(x+p)*E,r[7]=0,r[8]=(g+b)*S,r[9]=(x-p)*S,r[10]=(1-(d+v))*S,r[11]=0,r[12]=t.x,r[13]=t.y,r[14]=t.z,r[15]=1,this}decompose(t,e,i){const r=this.elements;let s=jr.set(r[0],r[1],r[2]).length();const o=jr.set(r[4],r[5],r[6]).length(),a=jr.set(r[8],r[9],r[10]).length();this.determinant()<0&&(s=-s),t.x=r[12],t.y=r[13],t.z=r[14],An.copy(this);const c=1/s,h=1/o,u=1/a;return An.elements[0]*=c,An.elements[1]*=c,An.elements[2]*=c,An.elements[4]*=h,An.elements[5]*=h,An.elements[6]*=h,An.elements[8]*=u,An.elements[9]*=u,An.elements[10]*=u,e.setFromRotationMatrix(An),i.x=s,i.y=o,i.z=a,this}makePerspective(t,e,i,r,s,o){o===void 0&&console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");const a=this.elements,l=2*s/(e-t),c=2*s/(i-r),h=(e+t)/(e-t),u=(i+r)/(i-r),d=-(o+s)/(o-s),f=-2*o*s/(o-s);return a[0]=l,a[4]=0,a[8]=h,a[12]=0,a[1]=0,a[5]=c,a[9]=u,a[13]=0,a[2]=0,a[6]=0,a[10]=d,a[14]=f,a[3]=0,a[7]=0,a[11]=-1,a[15]=0,this}makeOrthographic(t,e,i,r,s,o){const a=this.elements,l=1/(e-t),c=1/(i-r),h=1/(o-s),u=(e+t)*l,d=(i+r)*c,f=(o+s)*h;return a[0]=2*l,a[4]=0,a[8]=0,a[12]=-u,a[1]=0,a[5]=2*c,a[9]=0,a[13]=-d,a[2]=0,a[6]=0,a[10]=-2*h,a[14]=-f,a[3]=0,a[7]=0,a[11]=0,a[15]=1,this}equals(t){const e=this.elements,i=t.elements;for(let r=0;r<16;r++)if(e[r]!==i[r])return!1;return!0}fromArray(t,e=0){for(let i=0;i<16;i++)this.elements[i]=t[i+e];return this}toArray(t=[],e=0){const i=this.elements;return t[e]=i[0],t[e+1]=i[1],t[e+2]=i[2],t[e+3]=i[3],t[e+4]=i[4],t[e+5]=i[5],t[e+6]=i[6],t[e+7]=i[7],t[e+8]=i[8],t[e+9]=i[9],t[e+10]=i[10],t[e+11]=i[11],t[e+12]=i[12],t[e+13]=i[13],t[e+14]=i[14],t[e+15]=i[15],t}}Ht.prototype.isMatrix4=!0;const jr=new O,An=new Ht,kx=new O(0,0,0),Vx=new O(1,1,1),Ri=new O,Da=new O,an=new O,$d=new Ht,qd=new Ue;class Xr{constructor(t=0,e=0,i=0,r=Xr.DefaultOrder){this._x=t,this._y=e,this._z=i,this._order=r}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get order(){return this._order}set order(t){this._order=t,this._onChangeCallback()}set(t,e,i,r=this._order){return this._x=t,this._y=e,this._z=i,this._order=r,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(t){return this._x=t._x,this._y=t._y,this._z=t._z,this._order=t._order,this._onChangeCallback(),this}setFromRotationMatrix(t,e=this._order,i=!0){const r=t.elements,s=r[0],o=r[4],a=r[8],l=r[1],c=r[5],h=r[9],u=r[2],d=r[6],f=r[10];switch(e){case"XYZ":this._y=Math.asin(Ke(a,-1,1)),Math.abs(a)<.9999999?(this._x=Math.atan2(-h,f),this._z=Math.atan2(-o,s)):(this._x=Math.atan2(d,c),this._z=0);break;case"YXZ":this._x=Math.asin(-Ke(h,-1,1)),Math.abs(h)<.9999999?(this._y=Math.atan2(a,f),this._z=Math.atan2(l,c)):(this._y=Math.atan2(-u,s),this._z=0);break;case"ZXY":this._x=Math.asin(Ke(d,-1,1)),Math.abs(d)<.9999999?(this._y=Math.atan2(-u,f),this._z=Math.atan2(-o,c)):(this._y=0,this._z=Math.atan2(l,s));break;case"ZYX":this._y=Math.asin(-Ke(u,-1,1)),Math.abs(u)<.9999999?(this._x=Math.atan2(d,f),this._z=Math.atan2(l,s)):(this._x=0,this._z=Math.atan2(-o,c));break;case"YZX":this._z=Math.asin(Ke(l,-1,1)),Math.abs(l)<.9999999?(this._x=Math.atan2(-h,c),this._y=Math.atan2(-u,s)):(this._x=0,this._y=Math.atan2(a,f));break;case"XZY":this._z=Math.asin(-Ke(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(d,c),this._y=Math.atan2(a,s)):(this._x=Math.atan2(-h,f),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+e)}return this._order=e,i===!0&&this._onChangeCallback(),this}setFromQuaternion(t,e,i){return $d.makeRotationFromQuaternion(t),this.setFromRotationMatrix($d,e,i)}setFromVector3(t,e=this._order){return this.set(t.x,t.y,t.z,e)}reorder(t){return qd.setFromEuler(this),this.setFromQuaternion(qd,t)}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._order===this._order}fromArray(t){return this._x=t[0],this._y=t[1],this._z=t[2],t[3]!==void 0&&(this._order=t[3]),this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._order,t}toVector3(t){return t?t.set(this._x,this._y,this._z):new O(this._x,this._y,this._z)}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}}Xr.prototype.isEuler=!0;Xr.DefaultOrder="XYZ";Xr.RotationOrders=["XYZ","YZX","ZXY","XZY","YXZ","ZYX"];class Wx{constructor(){this.mask=1|0}set(t){this.mask=1<<t|0}enable(t){this.mask|=1<<t|0}enableAll(){this.mask=4294967295|0}toggle(t){this.mask^=1<<t|0}disable(t){this.mask&=~(1<<t|0)}disableAll(){this.mask=0}test(t){return(this.mask&t.mask)!=0}}let $x=0;const jd=new O,Yr=new Ue,ii=new Ht,Na=new O,go=new O,qx=new O,jx=new Ue,Xd=new O(1,0,0),Yd=new O(0,1,0),Zd=new O(0,0,1),Xx={type:"added"},Jd={type:"removed"};class ne extends Ti{constructor(){super();Object.defineProperty(this,"id",{value:$x++}),this.uuid=Un(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=ne.DefaultUp.clone();const t=new O,e=new Xr,i=new Ue,r=new O(1,1,1);function s(){i.setFromEuler(e,!1)}function o(){e.setFromQuaternion(i,void 0,!1)}e._onChange(s),i._onChange(o),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:t},rotation:{configurable:!0,enumerable:!0,value:e},quaternion:{configurable:!0,enumerable:!0,value:i},scale:{configurable:!0,enumerable:!0,value:r},modelViewMatrix:{value:new Ht},normalMatrix:{value:new Ie}}),this.matrix=new Ht,this.matrixWorld=new Ht,this.matrixAutoUpdate=ne.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.layers=new Wx,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeRender(){}onAfterRender(){}applyMatrix4(t){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(t),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(t){return this.quaternion.premultiply(t),this}setRotationFromAxisAngle(t,e){this.quaternion.setFromAxisAngle(t,e)}setRotationFromEuler(t){this.quaternion.setFromEuler(t,!0)}setRotationFromMatrix(t){this.quaternion.setFromRotationMatrix(t)}setRotationFromQuaternion(t){this.quaternion.copy(t)}rotateOnAxis(t,e){return Yr.setFromAxisAngle(t,e),this.quaternion.multiply(Yr),this}rotateOnWorldAxis(t,e){return Yr.setFromAxisAngle(t,e),this.quaternion.premultiply(Yr),this}rotateX(t){return this.rotateOnAxis(Xd,t)}rotateY(t){return this.rotateOnAxis(Yd,t)}rotateZ(t){return this.rotateOnAxis(Zd,t)}translateOnAxis(t,e){return jd.copy(t).applyQuaternion(this.quaternion),this.position.add(jd.multiplyScalar(e)),this}translateX(t){return this.translateOnAxis(Xd,t)}translateY(t){return this.translateOnAxis(Yd,t)}translateZ(t){return this.translateOnAxis(Zd,t)}localToWorld(t){return t.applyMatrix4(this.matrixWorld)}worldToLocal(t){return t.applyMatrix4(ii.copy(this.matrixWorld).invert())}lookAt(t,e,i){t.isVector3?Na.copy(t):Na.set(t,e,i);const r=this.parent;this.updateWorldMatrix(!0,!1),go.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?ii.lookAt(go,Na,this.up):ii.lookAt(Na,go,this.up),this.quaternion.setFromRotationMatrix(ii),r&&(ii.extractRotation(r.matrixWorld),Yr.setFromRotationMatrix(ii),this.quaternion.premultiply(Yr.invert()))}add(t){if(arguments.length>1){for(let e=0;e<arguments.length;e++)this.add(arguments[e]);return this}return t===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",t),this):(t&&t.isObject3D?(t.parent!==null&&t.parent.remove(t),t.parent=this,this.children.push(t),t.dispatchEvent(Xx)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",t),this)}remove(t){if(arguments.length>1){for(let i=0;i<arguments.length;i++)this.remove(arguments[i]);return this}const e=this.children.indexOf(t);return e!==-1&&(t.parent=null,this.children.splice(e,1),t.dispatchEvent(Jd)),this}removeFromParent(){const t=this.parent;return t!==null&&t.remove(this),this}clear(){for(let t=0;t<this.children.length;t++){const e=this.children[t];e.parent=null,e.dispatchEvent(Jd)}return this.children.length=0,this}attach(t){return this.updateWorldMatrix(!0,!1),ii.copy(this.matrixWorld).invert(),t.parent!==null&&(t.parent.updateWorldMatrix(!0,!1),ii.multiply(t.parent.matrixWorld)),t.applyMatrix4(ii),this.add(t),t.updateWorldMatrix(!1,!0),this}getObjectById(t){return this.getObjectByProperty("id",t)}getObjectByName(t){return this.getObjectByProperty("name",t)}getObjectByProperty(t,e){if(this[t]===e)return this;for(let i=0,r=this.children.length;i<r;i++){const o=this.children[i].getObjectByProperty(t,e);if(o!==void 0)return o}}getWorldPosition(t){return this.updateWorldMatrix(!0,!1),t.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(go,t,qx),t}getWorldScale(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(go,jx,t),t}getWorldDirection(t){this.updateWorldMatrix(!0,!1);const e=this.matrixWorld.elements;return t.set(e[8],e[9],e[10]).normalize()}raycast(){}traverse(t){t(this);const e=this.children;for(let i=0,r=e.length;i<r;i++)e[i].traverse(t)}traverseVisible(t){if(this.visible===!1)return;t(this);const e=this.children;for(let i=0,r=e.length;i<r;i++)e[i].traverseVisible(t)}traverseAncestors(t){const e=this.parent;e!==null&&(t(e),e.traverseAncestors(t))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||t)&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,t=!0);const e=this.children;for(let i=0,r=e.length;i<r;i++)e[i].updateMatrixWorld(t)}updateWorldMatrix(t,e){const i=this.parent;if(t===!0&&i!==null&&i.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),e===!0){const r=this.children;for(let s=0,o=r.length;s<o;s++)r[s].updateWorldMatrix(!1,!0)}}toJSON(t){const e=t===void 0||typeof t=="string",i={};e&&(t={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{}},i.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"});const r={};r.uuid=this.uuid,r.type=this.type,this.name!==""&&(r.name=this.name),this.castShadow===!0&&(r.castShadow=!0),this.receiveShadow===!0&&(r.receiveShadow=!0),this.visible===!1&&(r.visible=!1),this.frustumCulled===!1&&(r.frustumCulled=!1),this.renderOrder!==0&&(r.renderOrder=this.renderOrder),JSON.stringify(this.userData)!=="{}"&&(r.userData=this.userData),r.layers=this.layers.mask,r.matrix=this.matrix.toArray(),this.matrixAutoUpdate===!1&&(r.matrixAutoUpdate=!1),this.isInstancedMesh&&(r.type="InstancedMesh",r.count=this.count,r.instanceMatrix=this.instanceMatrix.toJSON(),this.instanceColor!==null&&(r.instanceColor=this.instanceColor.toJSON()));function s(a,l){return a[l.uuid]===void 0&&(a[l.uuid]=l.toJSON(t)),l.uuid}if(this.isScene)this.background&&(this.background.isColor?r.background=this.background.toJSON():this.background.isTexture&&(r.background=this.background.toJSON(t).uuid)),this.environment&&this.environment.isTexture&&(r.environment=this.environment.toJSON(t).uuid);else if(this.isMesh||this.isLine||this.isPoints){r.geometry=s(t.geometries,this.geometry);const a=this.geometry.parameters;if(a!==void 0&&a.shapes!==void 0){const l=a.shapes;if(Array.isArray(l))for(let c=0,h=l.length;c<h;c++){const u=l[c];s(t.shapes,u)}else s(t.shapes,l)}}if(this.isSkinnedMesh&&(r.bindMode=this.bindMode,r.bindMatrix=this.bindMatrix.toArray(),this.skeleton!==void 0&&(s(t.skeletons,this.skeleton),r.skeleton=this.skeleton.uuid)),this.material!==void 0)if(Array.isArray(this.material)){const a=[];for(let l=0,c=this.material.length;l<c;l++)a.push(s(t.materials,this.material[l]));r.material=a}else r.material=s(t.materials,this.material);if(this.children.length>0){r.children=[];for(let a=0;a<this.children.length;a++)r.children.push(this.children[a].toJSON(t).object)}if(this.animations.length>0){r.animations=[];for(let a=0;a<this.animations.length;a++){const l=this.animations[a];r.animations.push(s(t.animations,l))}}if(e){const a=o(t.geometries),l=o(t.materials),c=o(t.textures),h=o(t.images),u=o(t.shapes),d=o(t.skeletons),f=o(t.animations);a.length>0&&(i.geometries=a),l.length>0&&(i.materials=l),c.length>0&&(i.textures=c),h.length>0&&(i.images=h),u.length>0&&(i.shapes=u),d.length>0&&(i.skeletons=d),f.length>0&&(i.animations=f)}return i.object=r,i;function o(a){const l=[];for(const c in a){const h=a[c];delete h.metadata,l.push(h)}return l}}clone(t){return new this.constructor().copy(this,t)}copy(t,e=!0){if(this.name=t.name,this.up.copy(t.up),this.position.copy(t.position),this.rotation.order=t.rotation.order,this.quaternion.copy(t.quaternion),this.scale.copy(t.scale),this.matrix.copy(t.matrix),this.matrixWorld.copy(t.matrixWorld),this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrixWorldNeedsUpdate=t.matrixWorldNeedsUpdate,this.layers.mask=t.layers.mask,this.visible=t.visible,this.castShadow=t.castShadow,this.receiveShadow=t.receiveShadow,this.frustumCulled=t.frustumCulled,this.renderOrder=t.renderOrder,this.userData=JSON.parse(JSON.stringify(t.userData)),e===!0)for(let i=0;i<t.children.length;i++){const r=t.children[i];this.add(r.clone())}return this}}ne.DefaultUp=new O(0,1,0);ne.DefaultMatrixAutoUpdate=!0;ne.prototype.isObject3D=!0;const Ln=new O,ri=new O,Gc=new O,si=new O,Zr=new O,Jr=new O,Qd=new O,kc=new O,Vc=new O,Wc=new O;class Se{constructor(t=new O,e=new O,i=new O){this.a=t,this.b=e,this.c=i}static getNormal(t,e,i,r){r.subVectors(i,e),Ln.subVectors(t,e),r.cross(Ln);const s=r.lengthSq();return s>0?r.multiplyScalar(1/Math.sqrt(s)):r.set(0,0,0)}static getBarycoord(t,e,i,r,s){Ln.subVectors(r,e),ri.subVectors(i,e),Gc.subVectors(t,e);const o=Ln.dot(Ln),a=Ln.dot(ri),l=Ln.dot(Gc),c=ri.dot(ri),h=ri.dot(Gc),u=o*c-a*a;if(u===0)return s.set(-2,-1,-1);const d=1/u,f=(c*l-a*h)*d,g=(o*h-a*l)*d;return s.set(1-f-g,g,f)}static containsPoint(t,e,i,r){return this.getBarycoord(t,e,i,r,si),si.x>=0&&si.y>=0&&si.x+si.y<=1}static getUV(t,e,i,r,s,o,a,l){return this.getBarycoord(t,e,i,r,si),l.set(0,0),l.addScaledVector(s,si.x),l.addScaledVector(o,si.y),l.addScaledVector(a,si.z),l}static isFrontFacing(t,e,i,r){return Ln.subVectors(i,e),ri.subVectors(t,e),Ln.cross(ri).dot(r)<0}set(t,e,i){return this.a.copy(t),this.b.copy(e),this.c.copy(i),this}setFromPointsAndIndices(t,e,i,r){return this.a.copy(t[e]),this.b.copy(t[i]),this.c.copy(t[r]),this}setFromAttributeAndIndices(t,e,i,r){return this.a.fromBufferAttribute(t,e),this.b.fromBufferAttribute(t,i),this.c.fromBufferAttribute(t,r),this}clone(){return new this.constructor().copy(this)}copy(t){return this.a.copy(t.a),this.b.copy(t.b),this.c.copy(t.c),this}getArea(){return Ln.subVectors(this.c,this.b),ri.subVectors(this.a,this.b),Ln.cross(ri).length()*.5}getMidpoint(t){return t.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(t){return Se.getNormal(this.a,this.b,this.c,t)}getPlane(t){return t.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(t,e){return Se.getBarycoord(t,this.a,this.b,this.c,e)}getUV(t,e,i,r,s){return Se.getUV(t,this.a,this.b,this.c,e,i,r,s)}containsPoint(t){return Se.containsPoint(t,this.a,this.b,this.c)}isFrontFacing(t){return Se.isFrontFacing(this.a,this.b,this.c,t)}intersectsBox(t){return t.intersectsTriangle(this)}closestPointToPoint(t,e){const i=this.a,r=this.b,s=this.c;let o,a;Zr.subVectors(r,i),Jr.subVectors(s,i),kc.subVectors(t,i);const l=Zr.dot(kc),c=Jr.dot(kc);if(l<=0&&c<=0)return e.copy(i);Vc.subVectors(t,r);const h=Zr.dot(Vc),u=Jr.dot(Vc);if(h>=0&&u<=h)return e.copy(r);const d=l*u-h*c;if(d<=0&&l>=0&&h<=0)return o=l/(l-h),e.copy(i).addScaledVector(Zr,o);Wc.subVectors(t,s);const f=Zr.dot(Wc),g=Jr.dot(Wc);if(g>=0&&f<=g)return e.copy(s);const v=f*c-l*g;if(v<=0&&c>=0&&g<=0)return a=c/(c-g),e.copy(i).addScaledVector(Jr,a);const x=h*g-f*u;if(x<=0&&u-h>=0&&f-g>=0)return Qd.subVectors(s,r),a=(u-h)/(u-h+(f-g)),e.copy(r).addScaledVector(Qd,a);const m=1/(x+v+d);return o=v*m,a=d*m,e.copy(i).addScaledVector(Zr,o).addScaledVector(Jr,a)}equals(t){return t.a.equals(this.a)&&t.b.equals(this.b)&&t.c.equals(this.c)}}let Yx=0;class He extends Ti{constructor(){super();Object.defineProperty(this,"id",{value:Yx++}),this.uuid=Un(),this.name="",this.type="Material",this.fog=!0,this.blending=ao,this.side=oo,this.vertexColors=!1,this.opacity=1,this.format=Ye,this.transparent=!1,this.blendSrc=yd,this.blendDst=_d,this.blendEquation=Dr,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=xc,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=Fx,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=Lc,this.stencilZFail=Lc,this.stencilZPass=Lc,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(t){this._alphaTest>0!=t>0&&this.version++,this._alphaTest=t}onBuild(){}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(t){if(t!==void 0)for(const e in t){const i=t[e];if(i===void 0){console.warn("THREE.Material: '"+e+"' parameter is undefined.");continue}if(e==="shading"){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=i===fd;continue}const r=this[e];if(r===void 0){console.warn("THREE."+this.type+": '"+e+"' is not a property of this material.");continue}r&&r.isColor?r.set(i):r&&r.isVector3&&i&&i.isVector3?r.copy(i):this[e]=i}}toJSON(t){const e=t===void 0||typeof t=="string";e&&(t={textures:{},images:{}});const i={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};i.uuid=this.uuid,i.type=this.type,this.name!==""&&(i.name=this.name),this.color&&this.color.isColor&&(i.color=this.color.getHex()),this.roughness!==void 0&&(i.roughness=this.roughness),this.metalness!==void 0&&(i.metalness=this.metalness),this.sheen!==void 0&&(i.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(i.sheenColor=this.sheenColor.getHex()),this.sheenRoughness!==void 0&&(i.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(i.emissive=this.emissive.getHex()),this.emissiveIntensity&&this.emissiveIntensity!==1&&(i.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(i.specular=this.specular.getHex()),this.specularIntensity!==void 0&&(i.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(i.specularColor=this.specularColor.getHex()),this.shininess!==void 0&&(i.shininess=this.shininess),this.clearcoat!==void 0&&(i.clearcoat=this.clearcoat),this.clearcoatRoughness!==void 0&&(i.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(i.clearcoatMap=this.clearcoatMap.toJSON(t).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(i.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(t).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(i.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(t).uuid,i.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.map&&this.map.isTexture&&(i.map=this.map.toJSON(t).uuid),this.matcap&&this.matcap.isTexture&&(i.matcap=this.matcap.toJSON(t).uuid),this.alphaMap&&this.alphaMap.isTexture&&(i.alphaMap=this.alphaMap.toJSON(t).uuid),this.lightMap&&this.lightMap.isTexture&&(i.lightMap=this.lightMap.toJSON(t).uuid,i.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(i.aoMap=this.aoMap.toJSON(t).uuid,i.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(i.bumpMap=this.bumpMap.toJSON(t).uuid,i.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(i.normalMap=this.normalMap.toJSON(t).uuid,i.normalMapType=this.normalMapType,i.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(i.displacementMap=this.displacementMap.toJSON(t).uuid,i.displacementScale=this.displacementScale,i.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(i.roughnessMap=this.roughnessMap.toJSON(t).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(i.metalnessMap=this.metalnessMap.toJSON(t).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(i.emissiveMap=this.emissiveMap.toJSON(t).uuid),this.specularMap&&this.specularMap.isTexture&&(i.specularMap=this.specularMap.toJSON(t).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(i.specularIntensityMap=this.specularIntensityMap.toJSON(t).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(i.specularColorMap=this.specularColorMap.toJSON(t).uuid),this.envMap&&this.envMap.isTexture&&(i.envMap=this.envMap.toJSON(t).uuid,this.combine!==void 0&&(i.combine=this.combine)),this.envMapIntensity!==void 0&&(i.envMapIntensity=this.envMapIntensity),this.reflectivity!==void 0&&(i.reflectivity=this.reflectivity),this.refractionRatio!==void 0&&(i.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(i.gradientMap=this.gradientMap.toJSON(t).uuid),this.transmission!==void 0&&(i.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(i.transmissionMap=this.transmissionMap.toJSON(t).uuid),this.thickness!==void 0&&(i.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(i.thicknessMap=this.thicknessMap.toJSON(t).uuid),this.attenuationDistance!==void 0&&(i.attenuationDistance=this.attenuationDistance),this.attenuationColor!==void 0&&(i.attenuationColor=this.attenuationColor.getHex()),this.size!==void 0&&(i.size=this.size),this.shadowSide!==null&&(i.shadowSide=this.shadowSide),this.sizeAttenuation!==void 0&&(i.sizeAttenuation=this.sizeAttenuation),this.blending!==ao&&(i.blending=this.blending),this.side!==oo&&(i.side=this.side),this.vertexColors&&(i.vertexColors=!0),this.opacity<1&&(i.opacity=this.opacity),this.format!==Ye&&(i.format=this.format),this.transparent===!0&&(i.transparent=this.transparent),i.depthFunc=this.depthFunc,i.depthTest=this.depthTest,i.depthWrite=this.depthWrite,i.colorWrite=this.colorWrite,i.stencilWrite=this.stencilWrite,i.stencilWriteMask=this.stencilWriteMask,i.stencilFunc=this.stencilFunc,i.stencilRef=this.stencilRef,i.stencilFuncMask=this.stencilFuncMask,i.stencilFail=this.stencilFail,i.stencilZFail=this.stencilZFail,i.stencilZPass=this.stencilZPass,this.rotation&&this.rotation!==0&&(i.rotation=this.rotation),this.polygonOffset===!0&&(i.polygonOffset=!0),this.polygonOffsetFactor!==0&&(i.polygonOffsetFactor=this.polygonOffsetFactor),this.polygonOffsetUnits!==0&&(i.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth&&this.linewidth!==1&&(i.linewidth=this.linewidth),this.dashSize!==void 0&&(i.dashSize=this.dashSize),this.gapSize!==void 0&&(i.gapSize=this.gapSize),this.scale!==void 0&&(i.scale=this.scale),this.dithering===!0&&(i.dithering=!0),this.alphaTest>0&&(i.alphaTest=this.alphaTest),this.alphaToCoverage===!0&&(i.alphaToCoverage=this.alphaToCoverage),this.premultipliedAlpha===!0&&(i.premultipliedAlpha=this.premultipliedAlpha),this.wireframe===!0&&(i.wireframe=this.wireframe),this.wireframeLinewidth>1&&(i.wireframeLinewidth=this.wireframeLinewidth),this.wireframeLinecap!=="round"&&(i.wireframeLinecap=this.wireframeLinecap),this.wireframeLinejoin!=="round"&&(i.wireframeLinejoin=this.wireframeLinejoin),this.flatShading===!0&&(i.flatShading=this.flatShading),this.visible===!1&&(i.visible=!1),this.toneMapped===!1&&(i.toneMapped=!1),JSON.stringify(this.userData)!=="{}"&&(i.userData=this.userData);function r(s){const o=[];for(const a in s){const l=s[a];delete l.metadata,o.push(l)}return o}if(e){const s=r(t.textures),o=r(t.images);s.length>0&&(i.textures=s),o.length>0&&(i.images=o)}return i}clone(){return new this.constructor().copy(this)}copy(t){this.name=t.name,this.fog=t.fog,this.blending=t.blending,this.side=t.side,this.vertexColors=t.vertexColors,this.opacity=t.opacity,this.format=t.format,this.transparent=t.transparent,this.blendSrc=t.blendSrc,this.blendDst=t.blendDst,this.blendEquation=t.blendEquation,this.blendSrcAlpha=t.blendSrcAlpha,this.blendDstAlpha=t.blendDstAlpha,this.blendEquationAlpha=t.blendEquationAlpha,this.depthFunc=t.depthFunc,this.depthTest=t.depthTest,this.depthWrite=t.depthWrite,this.stencilWriteMask=t.stencilWriteMask,this.stencilFunc=t.stencilFunc,this.stencilRef=t.stencilRef,this.stencilFuncMask=t.stencilFuncMask,this.stencilFail=t.stencilFail,this.stencilZFail=t.stencilZFail,this.stencilZPass=t.stencilZPass,this.stencilWrite=t.stencilWrite;const e=t.clippingPlanes;let i=null;if(e!==null){const r=e.length;i=new Array(r);for(let s=0;s!==r;++s)i[s]=e[s].clone()}return this.clippingPlanes=i,this.clipIntersection=t.clipIntersection,this.clipShadows=t.clipShadows,this.shadowSide=t.shadowSide,this.colorWrite=t.colorWrite,this.precision=t.precision,this.polygonOffset=t.polygonOffset,this.polygonOffsetFactor=t.polygonOffsetFactor,this.polygonOffsetUnits=t.polygonOffsetUnits,this.dithering=t.dithering,this.alphaTest=t.alphaTest,this.alphaToCoverage=t.alphaToCoverage,this.premultipliedAlpha=t.premultipliedAlpha,this.visible=t.visible,this.toneMapped=t.toneMapped,this.userData=JSON.parse(JSON.stringify(t.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(t){t===!0&&this.version++}}He.prototype.isMaterial=!0;const Kd={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},Cn={h:0,s:0,l:0},Fa={h:0,s:0,l:0};function $c(n,t,e){return e<0&&(e+=1),e>1&&(e-=1),e<1/6?n+(t-n)*6*e:e<1/2?t:e<2/3?n+(t-n)*6*(2/3-e):n}function qc(n){return n<.04045?n*.0773993808:Math.pow(n*.9478672986+.0521327014,2.4)}function jc(n){return n<.0031308?n*12.92:1.055*Math.pow(n,.41666)-.055}class Ft{constructor(t,e,i){return e===void 0&&i===void 0?this.set(t):this.setRGB(t,e,i)}set(t){return t&&t.isColor?this.copy(t):typeof t=="number"?this.setHex(t):typeof t=="string"&&this.setStyle(t),this}setScalar(t){return this.r=t,this.g=t,this.b=t,this}setHex(t){return t=Math.floor(t),this.r=(t>>16&255)/255,this.g=(t>>8&255)/255,this.b=(t&255)/255,this}setRGB(t,e,i){return this.r=t,this.g=e,this.b=i,this}setHSL(t,e,i){if(t=Ox(t,1),e=Ke(e,0,1),i=Ke(i,0,1),e===0)this.r=this.g=this.b=i;else{const r=i<=.5?i*(1+e):i+e-i*e,s=2*i-r;this.r=$c(s,r,t+1/3),this.g=$c(s,r,t),this.b=$c(s,r,t-1/3)}return this}setStyle(t){function e(r){r!==void 0&&parseFloat(r)<1&&console.warn("THREE.Color: Alpha component of "+t+" will be ignored.")}let i;if(i=/^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec(t)){let r;const s=i[1],o=i[2];switch(s){case"rgb":case"rgba":if(r=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o))return this.r=Math.min(255,parseInt(r[1],10))/255,this.g=Math.min(255,parseInt(r[2],10))/255,this.b=Math.min(255,parseInt(r[3],10))/255,e(r[4]),this;if(r=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o))return this.r=Math.min(100,parseInt(r[1],10))/100,this.g=Math.min(100,parseInt(r[2],10))/100,this.b=Math.min(100,parseInt(r[3],10))/100,e(r[4]),this;break;case"hsl":case"hsla":if(r=/^\s*(\d*\.?\d+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o)){const a=parseFloat(r[1])/360,l=parseInt(r[2],10)/100,c=parseInt(r[3],10)/100;return e(r[4]),this.setHSL(a,l,c)}break}}else if(i=/^\#([A-Fa-f\d]+)$/.exec(t)){const r=i[1],s=r.length;if(s===3)return this.r=parseInt(r.charAt(0)+r.charAt(0),16)/255,this.g=parseInt(r.charAt(1)+r.charAt(1),16)/255,this.b=parseInt(r.charAt(2)+r.charAt(2),16)/255,this;if(s===6)return this.r=parseInt(r.charAt(0)+r.charAt(1),16)/255,this.g=parseInt(r.charAt(2)+r.charAt(3),16)/255,this.b=parseInt(r.charAt(4)+r.charAt(5),16)/255,this}return t&&t.length>0?this.setColorName(t):this}setColorName(t){const e=Kd[t.toLowerCase()];return e!==void 0?this.setHex(e):console.warn("THREE.Color: Unknown color "+t),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(t){return this.r=t.r,this.g=t.g,this.b=t.b,this}copyGammaToLinear(t,e=2){return this.r=Math.pow(t.r,e),this.g=Math.pow(t.g,e),this.b=Math.pow(t.b,e),this}copyLinearToGamma(t,e=2){const i=e>0?1/e:1;return this.r=Math.pow(t.r,i),this.g=Math.pow(t.g,i),this.b=Math.pow(t.b,i),this}convertGammaToLinear(t){return this.copyGammaToLinear(this,t),this}convertLinearToGamma(t){return this.copyLinearToGamma(this,t),this}copySRGBToLinear(t){return this.r=qc(t.r),this.g=qc(t.g),this.b=qc(t.b),this}copyLinearToSRGB(t){return this.r=jc(t.r),this.g=jc(t.g),this.b=jc(t.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(){return this.r*255<<16^this.g*255<<8^this.b*255<<0}getHexString(){return("000000"+this.getHex().toString(16)).slice(-6)}getHSL(t){const e=this.r,i=this.g,r=this.b,s=Math.max(e,i,r),o=Math.min(e,i,r);let a,l;const c=(o+s)/2;if(o===s)a=0,l=0;else{const h=s-o;switch(l=c<=.5?h/(s+o):h/(2-s-o),s){case e:a=(i-r)/h+(i<r?6:0);break;case i:a=(r-e)/h+2;break;case r:a=(e-i)/h+4;break}a/=6}return t.h=a,t.s=l,t.l=c,t}getStyle(){return"rgb("+(this.r*255|0)+","+(this.g*255|0)+","+(this.b*255|0)+")"}offsetHSL(t,e,i){return this.getHSL(Cn),Cn.h+=t,Cn.s+=e,Cn.l+=i,this.setHSL(Cn.h,Cn.s,Cn.l),this}add(t){return this.r+=t.r,this.g+=t.g,this.b+=t.b,this}addColors(t,e){return this.r=t.r+e.r,this.g=t.g+e.g,this.b=t.b+e.b,this}addScalar(t){return this.r+=t,this.g+=t,this.b+=t,this}sub(t){return this.r=Math.max(0,this.r-t.r),this.g=Math.max(0,this.g-t.g),this.b=Math.max(0,this.b-t.b),this}multiply(t){return this.r*=t.r,this.g*=t.g,this.b*=t.b,this}multiplyScalar(t){return this.r*=t,this.g*=t,this.b*=t,this}lerp(t,e){return this.r+=(t.r-this.r)*e,this.g+=(t.g-this.g)*e,this.b+=(t.b-this.b)*e,this}lerpColors(t,e,i){return this.r=t.r+(e.r-t.r)*i,this.g=t.g+(e.g-t.g)*i,this.b=t.b+(e.b-t.b)*i,this}lerpHSL(t,e){this.getHSL(Cn),t.getHSL(Fa);const i=Pc(Cn.h,Fa.h,e),r=Pc(Cn.s,Fa.s,e),s=Pc(Cn.l,Fa.l,e);return this.setHSL(i,r,s),this}equals(t){return t.r===this.r&&t.g===this.g&&t.b===this.b}fromArray(t,e=0){return this.r=t[e],this.g=t[e+1],this.b=t[e+2],this}toArray(t=[],e=0){return t[e]=this.r,t[e+1]=this.g,t[e+2]=this.b,t}fromBufferAttribute(t,e){return this.r=t.getX(e),this.g=t.getY(e),this.b=t.getZ(e),t.normalized===!0&&(this.r/=255,this.g/=255,this.b/=255),this}toJSON(){return this.getHex()}}Ft.NAMES=Kd;Ft.prototype.isColor=!0;Ft.prototype.r=1;Ft.prototype.g=1;Ft.prototype.b=1;class Xc extends He{constructor(t){super();this.type="MeshBasicMaterial",this.color=new Ft(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=ya,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this}}Xc.prototype.isMeshBasicMaterial=!0;const he=new O,Ba=new bt;class Me{constructor(t,e,i){if(Array.isArray(t))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.name="",this.array=t,this.itemSize=e,this.count=t!==void 0?t.length/e:0,this.normalized=i===!0,this.usage=fo,this.updateRange={offset:0,count:-1},this.version=0}onUploadCallback(){}set needsUpdate(t){t===!0&&this.version++}setUsage(t){return this.usage=t,this}copy(t){return this.name=t.name,this.array=new t.array.constructor(t.array),this.itemSize=t.itemSize,this.count=t.count,this.normalized=t.normalized,this.usage=t.usage,this}copyAt(t,e,i){t*=this.itemSize,i*=e.itemSize;for(let r=0,s=this.itemSize;r<s;r++)this.array[t+r]=e.array[i+r];return this}copyArray(t){return this.array.set(t),this}copyColorsArray(t){const e=this.array;let i=0;for(let r=0,s=t.length;r<s;r++){let o=t[r];o===void 0&&(console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined",r),o=new Ft),e[i++]=o.r,e[i++]=o.g,e[i++]=o.b}return this}copyVector2sArray(t){const e=this.array;let i=0;for(let r=0,s=t.length;r<s;r++){let o=t[r];o===void 0&&(console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined",r),o=new bt),e[i++]=o.x,e[i++]=o.y}return this}copyVector3sArray(t){const e=this.array;let i=0;for(let r=0,s=t.length;r<s;r++){let o=t[r];o===void 0&&(console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined",r),o=new O),e[i++]=o.x,e[i++]=o.y,e[i++]=o.z}return this}copyVector4sArray(t){const e=this.array;let i=0;for(let r=0,s=t.length;r<s;r++){let o=t[r];o===void 0&&(console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined",r),o=new oe),e[i++]=o.x,e[i++]=o.y,e[i++]=o.z,e[i++]=o.w}return this}applyMatrix3(t){if(this.itemSize===2)for(let e=0,i=this.count;e<i;e++)Ba.fromBufferAttribute(this,e),Ba.applyMatrix3(t),this.setXY(e,Ba.x,Ba.y);else if(this.itemSize===3)for(let e=0,i=this.count;e<i;e++)he.fromBufferAttribute(this,e),he.applyMatrix3(t),this.setXYZ(e,he.x,he.y,he.z);return this}applyMatrix4(t){for(let e=0,i=this.count;e<i;e++)he.x=this.getX(e),he.y=this.getY(e),he.z=this.getZ(e),he.applyMatrix4(t),this.setXYZ(e,he.x,he.y,he.z);return this}applyNormalMatrix(t){for(let e=0,i=this.count;e<i;e++)he.x=this.getX(e),he.y=this.getY(e),he.z=this.getZ(e),he.applyNormalMatrix(t),this.setXYZ(e,he.x,he.y,he.z);return this}transformDirection(t){for(let e=0,i=this.count;e<i;e++)he.x=this.getX(e),he.y=this.getY(e),he.z=this.getZ(e),he.transformDirection(t),this.setXYZ(e,he.x,he.y,he.z);return this}set(t,e=0){return this.array.set(t,e),this}getX(t){return this.array[t*this.itemSize]}setX(t,e){return this.array[t*this.itemSize]=e,this}getY(t){return this.array[t*this.itemSize+1]}setY(t,e){return this.array[t*this.itemSize+1]=e,this}getZ(t){return this.array[t*this.itemSize+2]}setZ(t,e){return this.array[t*this.itemSize+2]=e,this}getW(t){return this.array[t*this.itemSize+3]}setW(t,e){return this.array[t*this.itemSize+3]=e,this}setXY(t,e,i){return t*=this.itemSize,this.array[t+0]=e,this.array[t+1]=i,this}setXYZ(t,e,i,r){return t*=this.itemSize,this.array[t+0]=e,this.array[t+1]=i,this.array[t+2]=r,this}setXYZW(t,e,i,r,s){return t*=this.itemSize,this.array[t+0]=e,this.array[t+1]=i,this.array[t+2]=r,this.array[t+3]=s,this}onUpload(t){return this.onUploadCallback=t,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const t={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.prototype.slice.call(this.array),normalized:this.normalized};return this.name!==""&&(t.name=this.name),this.usage!==fo&&(t.usage=this.usage),(this.updateRange.offset!==0||this.updateRange.count!==-1)&&(t.updateRange=this.updateRange),t}}Me.prototype.isBufferAttribute=!0;class tf extends Me{constructor(t,e,i){super(new Uint16Array(t),e,i)}}class ef extends Me{constructor(t,e,i){super(new Uint32Array(t),e,i)}}class Zx extends Me{constructor(t,e,i){super(new Uint16Array(t),e,i)}}Zx.prototype.isFloat16BufferAttribute=!0;class ue extends Me{constructor(t,e,i){super(new Float32Array(t),e,i)}}let Jx=0;const vn=new Ht,Yc=new ne,Qr=new O,ln=new Tn,vo=new Tn,Le=new O;class re extends Ti{constructor(){super();Object.defineProperty(this,"id",{value:Jx++}),this.uuid=Un(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(t){return Array.isArray(t)?this.index=new(Hd(t)>65535?ef:tf)(t,1):this.index=t,this}getAttribute(t){return this.attributes[t]}setAttribute(t,e){return this.attributes[t]=e,this}deleteAttribute(t){return delete this.attributes[t],this}hasAttribute(t){return this.attributes[t]!==void 0}addGroup(t,e,i=0){this.groups.push({start:t,count:e,materialIndex:i})}clearGroups(){this.groups=[]}setDrawRange(t,e){this.drawRange.start=t,this.drawRange.count=e}applyMatrix4(t){const e=this.attributes.position;e!==void 0&&(e.applyMatrix4(t),e.needsUpdate=!0);const i=this.attributes.normal;if(i!==void 0){const s=new Ie().getNormalMatrix(t);i.applyNormalMatrix(s),i.needsUpdate=!0}const r=this.attributes.tangent;return r!==void 0&&(r.transformDirection(t),r.needsUpdate=!0),this.boundingBox!==null&&this.computeBoundingBox(),this.boundingSphere!==null&&this.computeBoundingSphere(),this}applyQuaternion(t){return vn.makeRotationFromQuaternion(t),this.applyMatrix4(vn),this}rotateX(t){return vn.makeRotationX(t),this.applyMatrix4(vn),this}rotateY(t){return vn.makeRotationY(t),this.applyMatrix4(vn),this}rotateZ(t){return vn.makeRotationZ(t),this.applyMatrix4(vn),this}translate(t,e,i){return vn.makeTranslation(t,e,i),this.applyMatrix4(vn),this}scale(t,e,i){return vn.makeScale(t,e,i),this.applyMatrix4(vn),this}lookAt(t){return Yc.lookAt(t),Yc.updateMatrix(),this.applyMatrix4(Yc.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(Qr).negate(),this.translate(Qr.x,Qr.y,Qr.z),this}setFromPoints(t){const e=[];for(let i=0,r=t.length;i<r;i++){const s=t[i];e.push(s.x,s.y,s.z||0)}return this.setAttribute("position",new ue(e,3)),this}computeBoundingBox(){this.boundingBox===null&&(this.boundingBox=new Tn);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".',this),this.boundingBox.set(new O(-1/0,-1/0,-1/0),new O(1/0,1/0,1/0));return}if(t!==void 0){if(this.boundingBox.setFromBufferAttribute(t),e)for(let i=0,r=e.length;i<r;i++){const s=e[i];ln.setFromBufferAttribute(s),this.morphTargetsRelative?(Le.addVectors(this.boundingBox.min,ln.min),this.boundingBox.expandByPoint(Le),Le.addVectors(this.boundingBox.max,ln.max),this.boundingBox.expandByPoint(Le)):(this.boundingBox.expandByPoint(ln.min),this.boundingBox.expandByPoint(ln.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){this.boundingSphere===null&&(this.boundingSphere=new $r);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".',this),this.boundingSphere.set(new O,1/0);return}if(t){const i=this.boundingSphere.center;if(ln.setFromBufferAttribute(t),e)for(let s=0,o=e.length;s<o;s++){const a=e[s];vo.setFromBufferAttribute(a),this.morphTargetsRelative?(Le.addVectors(ln.min,vo.min),ln.expandByPoint(Le),Le.addVectors(ln.max,vo.max),ln.expandByPoint(Le)):(ln.expandByPoint(vo.min),ln.expandByPoint(vo.max))}ln.getCenter(i);let r=0;for(let s=0,o=t.count;s<o;s++)Le.fromBufferAttribute(t,s),r=Math.max(r,i.distanceToSquared(Le));if(e)for(let s=0,o=e.length;s<o;s++){const a=e[s],l=this.morphTargetsRelative;for(let c=0,h=a.count;c<h;c++)Le.fromBufferAttribute(a,c),l&&(Qr.fromBufferAttribute(t,c),Le.add(Qr)),r=Math.max(r,i.distanceToSquared(Le))}this.boundingSphere.radius=Math.sqrt(r),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const t=this.index,e=this.attributes;if(t===null||e.position===void 0||e.normal===void 0||e.uv===void 0){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}const i=t.array,r=e.position.array,s=e.normal.array,o=e.uv.array,a=r.length/3;e.tangent===void 0&&this.setAttribute("tangent",new Me(new Float32Array(4*a),4));const l=e.tangent.array,c=[],h=[];for(let B=0;B<a;B++)c[B]=new O,h[B]=new O;const u=new O,d=new O,f=new O,g=new bt,v=new bt,x=new bt,m=new O,p=new O;function b(B,T,k){u.fromArray(r,B*3),d.fromArray(r,T*3),f.fromArray(r,k*3),g.fromArray(o,B*2),v.fromArray(o,T*2),x.fromArray(o,k*2),d.sub(u),f.sub(u),v.sub(g),x.sub(g);const I=1/(v.x*x.y-x.x*v.y);!isFinite(I)||(m.copy(d).multiplyScalar(x.y).addScaledVector(f,-v.y).multiplyScalar(I),p.copy(f).multiplyScalar(v.x).addScaledVector(d,-x.x).multiplyScalar(I),c[B].add(m),c[T].add(m),c[k].add(m),h[B].add(p),h[T].add(p),h[k].add(p))}let _=this.groups;_.length===0&&(_=[{start:0,count:i.length}]);for(let B=0,T=_.length;B<T;++B){const k=_[B],I=k.start,N=k.count;for(let C=I,L=I+N;C<L;C+=3)b(i[C+0],i[C+1],i[C+2])}const w=new O,E=new O,S=new O,R=new O;function W(B){S.fromArray(s,B*3),R.copy(S);const T=c[B];w.copy(T),w.sub(S.multiplyScalar(S.dot(T))).normalize(),E.crossVectors(R,T);const I=E.dot(h[B])<0?-1:1;l[B*4]=w.x,l[B*4+1]=w.y,l[B*4+2]=w.z,l[B*4+3]=I}for(let B=0,T=_.length;B<T;++B){const k=_[B],I=k.start,N=k.count;for(let C=I,L=I+N;C<L;C+=3)W(i[C+0]),W(i[C+1]),W(i[C+2])}}computeVertexNormals(){const t=this.index,e=this.getAttribute("position");if(e!==void 0){let i=this.getAttribute("normal");if(i===void 0)i=new Me(new Float32Array(e.count*3),3),this.setAttribute("normal",i);else for(let d=0,f=i.count;d<f;d++)i.setXYZ(d,0,0,0);const r=new O,s=new O,o=new O,a=new O,l=new O,c=new O,h=new O,u=new O;if(t)for(let d=0,f=t.count;d<f;d+=3){const g=t.getX(d+0),v=t.getX(d+1),x=t.getX(d+2);r.fromBufferAttribute(e,g),s.fromBufferAttribute(e,v),o.fromBufferAttribute(e,x),h.subVectors(o,s),u.subVectors(r,s),h.cross(u),a.fromBufferAttribute(i,g),l.fromBufferAttribute(i,v),c.fromBufferAttribute(i,x),a.add(h),l.add(h),c.add(h),i.setXYZ(g,a.x,a.y,a.z),i.setXYZ(v,l.x,l.y,l.z),i.setXYZ(x,c.x,c.y,c.z)}else for(let d=0,f=e.count;d<f;d+=3)r.fromBufferAttribute(e,d+0),s.fromBufferAttribute(e,d+1),o.fromBufferAttribute(e,d+2),h.subVectors(o,s),u.subVectors(r,s),h.cross(u),i.setXYZ(d+0,h.x,h.y,h.z),i.setXYZ(d+1,h.x,h.y,h.z),i.setXYZ(d+2,h.x,h.y,h.z);this.normalizeNormals(),i.needsUpdate=!0}}merge(t,e){if(!(t&&t.isBufferGeometry)){console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.",t);return}e===void 0&&(e=0,console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));const i=this.attributes;for(const r in i){if(t.attributes[r]===void 0)continue;const o=i[r].array,a=t.attributes[r],l=a.array,c=a.itemSize*e,h=Math.min(l.length,o.length-c);for(let u=0,d=c;u<h;u++,d++)o[d]=l[u]}return this}normalizeNormals(){const t=this.attributes.normal;for(let e=0,i=t.count;e<i;e++)Le.fromBufferAttribute(t,e),Le.normalize(),t.setXYZ(e,Le.x,Le.y,Le.z)}toNonIndexed(){function t(a,l){const c=a.array,h=a.itemSize,u=a.normalized,d=new c.constructor(l.length*h);let f=0,g=0;for(let v=0,x=l.length;v<x;v++){a.isInterleavedBufferAttribute?f=l[v]*a.data.stride+a.offset:f=l[v]*h;for(let m=0;m<h;m++)d[g++]=c[f++]}return new Me(d,h,u)}if(this.index===null)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const e=new re,i=this.index.array,r=this.attributes;for(const a in r){const l=r[a],c=t(l,i);e.setAttribute(a,c)}const s=this.morphAttributes;for(const a in s){const l=[],c=s[a];for(let h=0,u=c.length;h<u;h++){const d=c[h],f=t(d,i);l.push(f)}e.morphAttributes[a]=l}e.morphTargetsRelative=this.morphTargetsRelative;const o=this.groups;for(let a=0,l=o.length;a<l;a++){const c=o[a];e.addGroup(c.start,c.count,c.materialIndex)}return e}toJSON(){const t={metadata:{version:4.5,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(t.uuid=this.uuid,t.type=this.type,this.name!==""&&(t.name=this.name),Object.keys(this.userData).length>0&&(t.userData=this.userData),this.parameters!==void 0){const l=this.parameters;for(const c in l)l[c]!==void 0&&(t[c]=l[c]);return t}t.data={attributes:{}};const e=this.index;e!==null&&(t.data.index={type:e.array.constructor.name,array:Array.prototype.slice.call(e.array)});const i=this.attributes;for(const l in i){const c=i[l];t.data.attributes[l]=c.toJSON(t.data)}const r={};let s=!1;for(const l in this.morphAttributes){const c=this.morphAttributes[l],h=[];for(let u=0,d=c.length;u<d;u++){const f=c[u];h.push(f.toJSON(t.data))}h.length>0&&(r[l]=h,s=!0)}s&&(t.data.morphAttributes=r,t.data.morphTargetsRelative=this.morphTargetsRelative);const o=this.groups;o.length>0&&(t.data.groups=JSON.parse(JSON.stringify(o)));const a=this.boundingSphere;return a!==null&&(t.data.boundingSphere={center:a.center.toArray(),radius:a.radius}),t}clone(){return new this.constructor().copy(this)}copy(t){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const e={};this.name=t.name;const i=t.index;i!==null&&this.setIndex(i.clone(e));const r=t.attributes;for(const c in r){const h=r[c];this.setAttribute(c,h.clone(e))}const s=t.morphAttributes;for(const c in s){const h=[],u=s[c];for(let d=0,f=u.length;d<f;d++)h.push(u[d].clone(e));this.morphAttributes[c]=h}this.morphTargetsRelative=t.morphTargetsRelative;const o=t.groups;for(let c=0,h=o.length;c<h;c++){const u=o[c];this.addGroup(u.start,u.count,u.materialIndex)}const a=t.boundingBox;a!==null&&(this.boundingBox=a.clone());const l=t.boundingSphere;return l!==null&&(this.boundingSphere=l.clone()),this.drawRange.start=t.drawRange.start,this.drawRange.count=t.drawRange.count,this.userData=t.userData,t.parameters!==void 0&&(this.parameters=Object.assign({},t.parameters)),this}dispose(){this.dispatchEvent({type:"dispose"})}}re.prototype.isBufferGeometry=!0;const nf=new Ht,Kr=new qr,Zc=new $r,Pi=new O,Ii=new O,Di=new O,Jc=new O,Qc=new O,Kc=new O,Oa=new O,za=new O,Ua=new O,Ha=new bt,Ga=new bt,ka=new bt,th=new O,Va=new O;class tn extends ne{constructor(t=new re,e=new Xc){super();this.type="Mesh",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t){return super.copy(t),t.morphTargetInfluences!==void 0&&(this.morphTargetInfluences=t.morphTargetInfluences.slice()),t.morphTargetDictionary!==void 0&&(this.morphTargetDictionary=Object.assign({},t.morphTargetDictionary)),this.material=t.material,this.geometry=t.geometry,this}updateMorphTargets(){const t=this.geometry;if(t.isBufferGeometry){const e=t.morphAttributes,i=Object.keys(e);if(i.length>0){const r=e[i[0]];if(r!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let s=0,o=r.length;s<o;s++){const a=r[s].name||String(s);this.morphTargetInfluences.push(0),this.morphTargetDictionary[a]=s}}}}else{const e=t.morphTargets;e!==void 0&&e.length>0&&console.error("THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}}raycast(t,e){const i=this.geometry,r=this.material,s=this.matrixWorld;if(r===void 0||(i.boundingSphere===null&&i.computeBoundingSphere(),Zc.copy(i.boundingSphere),Zc.applyMatrix4(s),t.ray.intersectsSphere(Zc)===!1)||(nf.copy(s).invert(),Kr.copy(t.ray).applyMatrix4(nf),i.boundingBox!==null&&Kr.intersectsBox(i.boundingBox)===!1))return;let o;if(i.isBufferGeometry){const a=i.index,l=i.attributes.position,c=i.morphAttributes.position,h=i.morphTargetsRelative,u=i.attributes.uv,d=i.attributes.uv2,f=i.groups,g=i.drawRange;if(a!==null)if(Array.isArray(r))for(let v=0,x=f.length;v<x;v++){const m=f[v],p=r[m.materialIndex],b=Math.max(m.start,g.start),_=Math.min(a.count,Math.min(m.start+m.count,g.start+g.count));for(let w=b,E=_;w<E;w+=3){const S=a.getX(w),R=a.getX(w+1),W=a.getX(w+2);o=Wa(this,p,t,Kr,l,c,h,u,d,S,R,W),o&&(o.faceIndex=Math.floor(w/3),o.face.materialIndex=m.materialIndex,e.push(o))}}else{const v=Math.max(0,g.start),x=Math.min(a.count,g.start+g.count);for(let m=v,p=x;m<p;m+=3){const b=a.getX(m),_=a.getX(m+1),w=a.getX(m+2);o=Wa(this,r,t,Kr,l,c,h,u,d,b,_,w),o&&(o.faceIndex=Math.floor(m/3),e.push(o))}}else if(l!==void 0)if(Array.isArray(r))for(let v=0,x=f.length;v<x;v++){const m=f[v],p=r[m.materialIndex],b=Math.max(m.start,g.start),_=Math.min(l.count,Math.min(m.start+m.count,g.start+g.count));for(let w=b,E=_;w<E;w+=3){const S=w,R=w+1,W=w+2;o=Wa(this,p,t,Kr,l,c,h,u,d,S,R,W),o&&(o.faceIndex=Math.floor(w/3),o.face.materialIndex=m.materialIndex,e.push(o))}}else{const v=Math.max(0,g.start),x=Math.min(l.count,g.start+g.count);for(let m=v,p=x;m<p;m+=3){const b=m,_=m+1,w=m+2;o=Wa(this,r,t,Kr,l,c,h,u,d,b,_,w),o&&(o.faceIndex=Math.floor(m/3),e.push(o))}}}else i.isGeometry&&console.error("THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}}tn.prototype.isMesh=!0;function Qx(n,t,e,i,r,s,o,a){let l;if(t.side===Ee?l=i.intersectTriangle(o,s,r,!0,a):l=i.intersectTriangle(r,s,o,t.side!==Ir,a),l===null)return null;Va.copy(a),Va.applyMatrix4(n.matrixWorld);const c=e.ray.origin.distanceTo(Va);return c<e.near||c>e.far?null:{distance:c,point:Va.clone(),object:n}}function Wa(n,t,e,i,r,s,o,a,l,c,h,u){Pi.fromBufferAttribute(r,c),Ii.fromBufferAttribute(r,h),Di.fromBufferAttribute(r,u);const d=n.morphTargetInfluences;if(s&&d){Oa.set(0,0,0),za.set(0,0,0),Ua.set(0,0,0);for(let g=0,v=s.length;g<v;g++){const x=d[g],m=s[g];x!==0&&(Jc.fromBufferAttribute(m,c),Qc.fromBufferAttribute(m,h),Kc.fromBufferAttribute(m,u),o?(Oa.addScaledVector(Jc,x),za.addScaledVector(Qc,x),Ua.addScaledVector(Kc,x)):(Oa.addScaledVector(Jc.sub(Pi),x),za.addScaledVector(Qc.sub(Ii),x),Ua.addScaledVector(Kc.sub(Di),x)))}Pi.add(Oa),Ii.add(za),Di.add(Ua)}n.isSkinnedMesh&&(n.boneTransform(c,Pi),n.boneTransform(h,Ii),n.boneTransform(u,Di));const f=Qx(n,t,e,i,Pi,Ii,Di,th);if(f){a&&(Ha.fromBufferAttribute(a,c),Ga.fromBufferAttribute(a,h),ka.fromBufferAttribute(a,u),f.uv=Se.getUV(th,Pi,Ii,Di,Ha,Ga,ka,new bt)),l&&(Ha.fromBufferAttribute(l,c),Ga.fromBufferAttribute(l,h),ka.fromBufferAttribute(l,u),f.uv2=Se.getUV(th,Pi,Ii,Di,Ha,Ga,ka,new bt));const g={a:c,b:h,c:u,normal:new O,materialIndex:0};Se.getNormal(Pi,Ii,Di,g.normal),f.face=g}return f}class xo extends re{constructor(t=1,e=1,i=1,r=1,s=1,o=1){super();this.type="BoxGeometry",this.parameters={width:t,height:e,depth:i,widthSegments:r,heightSegments:s,depthSegments:o};const a=this;r=Math.floor(r),s=Math.floor(s),o=Math.floor(o);const l=[],c=[],h=[],u=[];let d=0,f=0;g("z","y","x",-1,-1,i,e,t,o,s,0),g("z","y","x",1,-1,i,e,-t,o,s,1),g("x","z","y",1,1,t,i,e,r,o,2),g("x","z","y",1,-1,t,i,-e,r,o,3),g("x","y","z",1,-1,t,e,i,r,s,4),g("x","y","z",-1,-1,t,e,-i,r,s,5),this.setIndex(l),this.setAttribute("position",new ue(c,3)),this.setAttribute("normal",new ue(h,3)),this.setAttribute("uv",new ue(u,2));function g(v,x,m,p,b,_,w,E,S,R,W){const B=_/S,T=w/R,k=_/2,I=w/2,N=E/2,C=S+1,L=R+1;let F=0,q=0;const ot=new O;for(let pt=0;pt<L;pt++){const rt=pt*T-I;for(let Et=0;Et<C;Et++){const it=Et*B-k;ot[v]=it*p,ot[x]=rt*b,ot[m]=N,c.push(ot.x,ot.y,ot.z),ot[v]=0,ot[x]=0,ot[m]=E>0?1:-1,h.push(ot.x,ot.y,ot.z),u.push(Et/S),u.push(1-pt/R),F+=1}}for(let pt=0;pt<R;pt++)for(let rt=0;rt<S;rt++){const Et=d+rt+C*pt,it=d+rt+C*(pt+1),vt=d+(rt+1)+C*(pt+1),Y=d+(rt+1)+C*pt;l.push(Et,it,Y),l.push(it,vt,Y),q+=6}a.addGroup(f,q,W),f+=q,d+=F}}static fromJSON(t){return new xo(t.width,t.height,t.depth,t.widthSegments,t.heightSegments,t.depthSegments)}}function ts(n){const t={};for(const e in n){t[e]={};for(const i in n[e]){const r=n[e][i];r&&(r.isColor||r.isMatrix3||r.isMatrix4||r.isVector2||r.isVector3||r.isVector4||r.isTexture||r.isQuaternion)?t[e][i]=r.clone():Array.isArray(r)?t[e][i]=r.slice():t[e][i]=r}}return t}function Ge(n){const t={};for(let e=0;e<n.length;e++){const i=ts(n[e]);for(const r in i)t[r]=i[r]}return t}const Kx={clone:ts,merge:Ge};var ty=`void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`,ey=`void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`;class ur extends He{constructor(t){super();this.type="ShaderMaterial",this.defines={},this.uniforms={},this.vertexShader=ty,this.fragmentShader=ey,this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,t!==void 0&&(t.attributes!==void 0&&console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."),this.setValues(t))}copy(t){return super.copy(t),this.fragmentShader=t.fragmentShader,this.vertexShader=t.vertexShader,this.uniforms=ts(t.uniforms),this.defines=Object.assign({},t.defines),this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.lights=t.lights,this.clipping=t.clipping,this.extensions=Object.assign({},t.extensions),this.glslVersion=t.glslVersion,this}toJSON(t){const e=super.toJSON(t);e.glslVersion=this.glslVersion,e.uniforms={};for(const r in this.uniforms){const o=this.uniforms[r].value;o&&o.isTexture?e.uniforms[r]={type:"t",value:o.toJSON(t).uuid}:o&&o.isColor?e.uniforms[r]={type:"c",value:o.getHex()}:o&&o.isVector2?e.uniforms[r]={type:"v2",value:o.toArray()}:o&&o.isVector3?e.uniforms[r]={type:"v3",value:o.toArray()}:o&&o.isVector4?e.uniforms[r]={type:"v4",value:o.toArray()}:o&&o.isMatrix3?e.uniforms[r]={type:"m3",value:o.toArray()}:o&&o.isMatrix4?e.uniforms[r]={type:"m4",value:o.toArray()}:e.uniforms[r]={value:o}}Object.keys(this.defines).length>0&&(e.defines=this.defines),e.vertexShader=this.vertexShader,e.fragmentShader=this.fragmentShader;const i={};for(const r in this.extensions)this.extensions[r]===!0&&(i[r]=!0);return Object.keys(i).length>0&&(e.extensions=i),e}}ur.prototype.isShaderMaterial=!0;class eh extends ne{constructor(){super();this.type="Camera",this.matrixWorldInverse=new Ht,this.projectionMatrix=new Ht,this.projectionMatrixInverse=new Ht}copy(t,e){return super.copy(t,e),this.matrixWorldInverse.copy(t.matrixWorldInverse),this.projectionMatrix.copy(t.projectionMatrix),this.projectionMatrixInverse.copy(t.projectionMatrixInverse),this}getWorldDirection(t){this.updateWorldMatrix(!0,!1);const e=this.matrixWorld.elements;return t.set(-e[8],-e[9],-e[10]).normalize()}updateMatrixWorld(t){super.updateMatrixWorld(t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(t,e){super.updateWorldMatrix(t,e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return new this.constructor().copy(this)}}eh.prototype.isCamera=!0;class en extends eh{constructor(t=50,e=1,i=.1,r=2e3){super();this.type="PerspectiveCamera",this.fov=t,this.zoom=1,this.near=i,this.far=r,this.focus=10,this.aspect=e,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.fov=t.fov,this.zoom=t.zoom,this.near=t.near,this.far=t.far,this.focus=t.focus,this.aspect=t.aspect,this.view=t.view===null?null:Object.assign({},t.view),this.filmGauge=t.filmGauge,this.filmOffset=t.filmOffset,this}setFocalLength(t){const e=.5*this.getFilmHeight()/t;this.fov=Rc*2*Math.atan(e),this.updateProjectionMatrix()}getFocalLength(){const t=Math.tan(Cc*.5*this.fov);return .5*this.getFilmHeight()/t}getEffectiveFOV(){return Rc*2*Math.atan(Math.tan(Cc*.5*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}setViewOffset(t,e,i,r,s,o){this.aspect=t/e,this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=i,this.view.offsetY=r,this.view.width=s,this.view.height=o,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=this.near;let e=t*Math.tan(Cc*.5*this.fov)/this.zoom,i=2*e,r=this.aspect*i,s=-.5*r;const o=this.view;if(this.view!==null&&this.view.enabled){const l=o.fullWidth,c=o.fullHeight;s+=o.offsetX*r/l,e-=o.offsetY*i/c,r*=o.width/l,i*=o.height/c}const a=this.filmOffset;a!==0&&(s+=t*a/this.getFilmWidth()),this.projectionMatrix.makePerspective(s,s+r,e,e-i,t,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.fov=this.fov,e.object.zoom=this.zoom,e.object.near=this.near,e.object.far=this.far,e.object.focus=this.focus,e.object.aspect=this.aspect,this.view!==null&&(e.object.view=Object.assign({},this.view)),e.object.filmGauge=this.filmGauge,e.object.filmOffset=this.filmOffset,e}}en.prototype.isPerspectiveCamera=!0;const es=90,ns=1;class nh extends ne{constructor(t,e,i){super();if(this.type="CubeCamera",i.isWebGLCubeRenderTarget!==!0){console.error("THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.");return}this.renderTarget=i;const r=new en(es,ns,t,e);r.layers=this.layers,r.up.set(0,-1,0),r.lookAt(new O(1,0,0)),this.add(r);const s=new en(es,ns,t,e);s.layers=this.layers,s.up.set(0,-1,0),s.lookAt(new O(-1,0,0)),this.add(s);const o=new en(es,ns,t,e);o.layers=this.layers,o.up.set(0,0,1),o.lookAt(new O(0,1,0)),this.add(o);const a=new en(es,ns,t,e);a.layers=this.layers,a.up.set(0,0,-1),a.lookAt(new O(0,-1,0)),this.add(a);const l=new en(es,ns,t,e);l.layers=this.layers,l.up.set(0,-1,0),l.lookAt(new O(0,0,1)),this.add(l);const c=new en(es,ns,t,e);c.layers=this.layers,c.up.set(0,-1,0),c.lookAt(new O(0,0,-1)),this.add(c)}update(t,e){this.parent===null&&this.updateMatrixWorld();const i=this.renderTarget,[r,s,o,a,l,c]=this.children,h=t.xr.enabled,u=t.getRenderTarget();t.xr.enabled=!1;const d=i.texture.generateMipmaps;i.texture.generateMipmaps=!1,t.setRenderTarget(i,0),t.render(e,r),t.setRenderTarget(i,1),t.render(e,s),t.setRenderTarget(i,2),t.render(e,o),t.setRenderTarget(i,3),t.render(e,a),t.setRenderTarget(i,4),t.render(e,l),i.texture.generateMipmaps=d,t.setRenderTarget(i,5),t.render(e,c),t.setRenderTarget(u),t.xr.enabled=h}}class $a extends De{constructor(t,e,i,r,s,o,a,l,c,h){t=t!==void 0?t:[],e=e!==void 0?e:lo;super(t,e,i,r,s,o,a,l,c,h);this.flipY=!1}get images(){return this.image}set images(t){this.image=t}}$a.prototype.isCubeTexture=!0;class rf extends Hn{constructor(t,e,i){Number.isInteger(e)&&(console.warn("THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )"),e=i);super(t,t,e);e=e||{},this.texture=new $a(void 0,e.mapping,e.wrapS,e.wrapT,e.magFilter,e.minFilter,e.format,e.type,e.anisotropy,e.encoding),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=e.generateMipmaps!==void 0?e.generateMipmaps:!1,this.texture.minFilter=e.minFilter!==void 0?e.minFilter:gn,this.texture._needsFlipEnvMap=!1}fromEquirectangularTexture(t,e){this.texture.type=e.type,this.texture.format=Ye,this.texture.encoding=e.encoding,this.texture.generateMipmaps=e.generateMipmaps,this.texture.minFilter=e.minFilter,this.texture.magFilter=e.magFilter;const i={uniforms:{tEquirect:{value:null}},vertexShader:`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,fragmentShader:`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`},r=new xo(5,5,5),s=new ur({name:"CubemapFromEquirect",uniforms:ts(i.uniforms),vertexShader:i.vertexShader,fragmentShader:i.fragmentShader,side:Ee,blending:wi});s.uniforms.tEquirect.value=e;const o=new tn(r,s),a=e.minFilter;return e.minFilter===ba&&(e.minFilter=gn),new nh(1,10,this).update(t,o),e.minFilter=a,o.geometry.dispose(),o.material.dispose(),this}clear(t,e,i,r){const s=t.getRenderTarget();for(let o=0;o<6;o++)t.setRenderTarget(this,o),t.clear(e,i,r);t.setRenderTarget(s)}}rf.prototype.isWebGLCubeRenderTarget=!0;const ih=new O,ny=new O,iy=new Ie;class oi{constructor(t=new O(1,0,0),e=0){this.normal=t,this.constant=e}set(t,e){return this.normal.copy(t),this.constant=e,this}setComponents(t,e,i,r){return this.normal.set(t,e,i),this.constant=r,this}setFromNormalAndCoplanarPoint(t,e){return this.normal.copy(t),this.constant=-e.dot(this.normal),this}setFromCoplanarPoints(t,e,i){const r=ih.subVectors(i,e).cross(ny.subVectors(t,e)).normalize();return this.setFromNormalAndCoplanarPoint(r,t),this}copy(t){return this.normal.copy(t.normal),this.constant=t.constant,this}normalize(){const t=1/this.normal.length();return this.normal.multiplyScalar(t),this.constant*=t,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(t){return this.normal.dot(t)+this.constant}distanceToSphere(t){return this.distanceToPoint(t.center)-t.radius}projectPoint(t,e){return e.copy(this.normal).multiplyScalar(-this.distanceToPoint(t)).add(t)}intersectLine(t,e){const i=t.delta(ih),r=this.normal.dot(i);if(r===0)return this.distanceToPoint(t.start)===0?e.copy(t.start):null;const s=-(t.start.dot(this.normal)+this.constant)/r;return s<0||s>1?null:e.copy(i).multiplyScalar(s).add(t.start)}intersectsLine(t){const e=this.distanceToPoint(t.start),i=this.distanceToPoint(t.end);return e<0&&i>0||i<0&&e>0}intersectsBox(t){return t.intersectsPlane(this)}intersectsSphere(t){return t.intersectsPlane(this)}coplanarPoint(t){return t.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(t,e){const i=e||iy.getNormalMatrix(t),r=this.coplanarPoint(ih).applyMatrix4(t),s=this.normal.applyMatrix3(i).normalize();return this.constant=-r.dot(s),this}translate(t){return this.constant-=t.dot(this.normal),this}equals(t){return t.normal.equals(this.normal)&&t.constant===this.constant}clone(){return new this.constructor().copy(this)}}oi.prototype.isPlane=!0;const is=new $r,qa=new O;class ja{constructor(t=new oi,e=new oi,i=new oi,r=new oi,s=new oi,o=new oi){this.planes=[t,e,i,r,s,o]}set(t,e,i,r,s,o){const a=this.planes;return a[0].copy(t),a[1].copy(e),a[2].copy(i),a[3].copy(r),a[4].copy(s),a[5].copy(o),this}copy(t){const e=this.planes;for(let i=0;i<6;i++)e[i].copy(t.planes[i]);return this}setFromProjectionMatrix(t){const e=this.planes,i=t.elements,r=i[0],s=i[1],o=i[2],a=i[3],l=i[4],c=i[5],h=i[6],u=i[7],d=i[8],f=i[9],g=i[10],v=i[11],x=i[12],m=i[13],p=i[14],b=i[15];return e[0].setComponents(a-r,u-l,v-d,b-x).normalize(),e[1].setComponents(a+r,u+l,v+d,b+x).normalize(),e[2].setComponents(a+s,u+c,v+f,b+m).normalize(),e[3].setComponents(a-s,u-c,v-f,b-m).normalize(),e[4].setComponents(a-o,u-h,v-g,b-p).normalize(),e[5].setComponents(a+o,u+h,v+g,b+p).normalize(),this}intersectsObject(t){const e=t.geometry;return e.boundingSphere===null&&e.computeBoundingSphere(),is.copy(e.boundingSphere).applyMatrix4(t.matrixWorld),this.intersectsSphere(is)}intersectsSprite(t){return is.center.set(0,0,0),is.radius=.7071067811865476,is.applyMatrix4(t.matrixWorld),this.intersectsSphere(is)}intersectsSphere(t){const e=this.planes,i=t.center,r=-t.radius;for(let s=0;s<6;s++)if(e[s].distanceToPoint(i)<r)return!1;return!0}intersectsBox(t){const e=this.planes;for(let i=0;i<6;i++){const r=e[i];if(qa.x=r.normal.x>0?t.max.x:t.min.x,qa.y=r.normal.y>0?t.max.y:t.min.y,qa.z=r.normal.z>0?t.max.z:t.min.z,r.distanceToPoint(qa)<0)return!1}return!0}containsPoint(t){const e=this.planes;for(let i=0;i<6;i++)if(e[i].distanceToPoint(t)<0)return!1;return!0}clone(){return new this.constructor().copy(this)}}function sf(){let n=null,t=!1,e=null,i=null;function r(s,o){e(s,o),i=n.requestAnimationFrame(r)}return{start:function(){t!==!0&&e!==null&&(i=n.requestAnimationFrame(r),t=!0)},stop:function(){n.cancelAnimationFrame(i),t=!1},setAnimationLoop:function(s){e=s},setContext:function(s){n=s}}}function ry(n,t){const e=t.isWebGL2,i=new WeakMap;function r(c,h){const u=c.array,d=c.usage,f=n.createBuffer();n.bindBuffer(h,f),n.bufferData(h,u,d),c.onUploadCallback();let g=5126;return u instanceof Float32Array?g=5126:u instanceof Float64Array?console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array."):u instanceof Uint16Array?c.isFloat16BufferAttribute?e?g=5131:console.warn("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2."):g=5123:u instanceof Int16Array?g=5122:u instanceof Uint32Array?g=5125:u instanceof Int32Array?g=5124:u instanceof Int8Array?g=5120:(u instanceof Uint8Array||u instanceof Uint8ClampedArray)&&(g=5121),{buffer:f,type:g,bytesPerElement:u.BYTES_PER_ELEMENT,version:c.version}}function s(c,h,u){const d=h.array,f=h.updateRange;n.bindBuffer(u,c),f.count===-1?n.bufferSubData(u,0,d):(e?n.bufferSubData(u,f.offset*d.BYTES_PER_ELEMENT,d,f.offset,f.count):n.bufferSubData(u,f.offset*d.BYTES_PER_ELEMENT,d.subarray(f.offset,f.offset+f.count)),f.count=-1)}function o(c){return c.isInterleavedBufferAttribute&&(c=c.data),i.get(c)}function a(c){c.isInterleavedBufferAttribute&&(c=c.data);const h=i.get(c);h&&(n.deleteBuffer(h.buffer),i.delete(c))}function l(c,h){if(c.isGLBufferAttribute){const d=i.get(c);(!d||d.version<c.version)&&i.set(c,{buffer:c.buffer,type:c.type,bytesPerElement:c.elementSize,version:c.version});return}c.isInterleavedBufferAttribute&&(c=c.data);const u=i.get(c);u===void 0?i.set(c,r(c,h)):u.version<c.version&&(s(u.buffer,c,h),u.version=c.version)}return{get:o,remove:a,update:l}}class rh extends re{constructor(t=1,e=1,i=1,r=1){super();this.type="PlaneGeometry",this.parameters={width:t,height:e,widthSegments:i,heightSegments:r};const s=t/2,o=e/2,a=Math.floor(i),l=Math.floor(r),c=a+1,h=l+1,u=t/a,d=e/l,f=[],g=[],v=[],x=[];for(let m=0;m<h;m++){const p=m*d-o;for(let b=0;b<c;b++){const _=b*u-s;g.push(_,-p,0),v.push(0,0,1),x.push(b/a),x.push(1-m/l)}}for(let m=0;m<l;m++)for(let p=0;p<a;p++){const b=p+c*m,_=p+c*(m+1),w=p+1+c*(m+1),E=p+1+c*m;f.push(b,_,E),f.push(_,w,E)}this.setIndex(f),this.setAttribute("position",new ue(g,3)),this.setAttribute("normal",new ue(v,3)),this.setAttribute("uv",new ue(x,2))}static fromJSON(t){return new rh(t.width,t.height,t.widthSegments,t.heightSegments)}}var sy=`#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vUv ).g;
#endif`,oy=`#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,ay=`#ifdef USE_ALPHATEST
	if ( diffuseColor.a < alphaTest ) discard;
#endif`,ly=`#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`,cy=`#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`,hy=`#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`,uy="vec3 transformed = vec3( position );",dy=`vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`,fy=`vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float roughness ) {
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
	float D = D_GGX( alpha, dotNH );
	return F * ( V * D );
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float dotNH ) {
	float alpha = pow2( roughness );
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float dotNV, float dotNL ) {
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
}
vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );
	return sheenColor * ( D * V );
}
#endif`,py=`#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vUv );
		vec2 dSTdy = dFdy( vUv );
		float Hll = bumpScale * texture2D( bumpMap, vUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );
		vec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`,my=`#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#pragma unroll_loop_start
	for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
		plane = clippingPlanes[ i ];
		if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
	}
	#pragma unroll_loop_end
	#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
		bool clipped = true;
		#pragma unroll_loop_start
		for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
		}
		#pragma unroll_loop_end
		if ( clipped ) discard;
	#endif
#endif`,gy=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`,vy=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`,xy=`#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`,yy=`#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`,_y=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`,by=`#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	varying vec3 vColor;
#endif`,My=`#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif`,wy=`#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
struct GeometricContext {
	vec3 position;
	vec3 normal;
	vec3 viewDir;
#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal;
#endif
};
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
float linearToRelativeLuminance( const in vec3 color ) {
	vec3 weights = vec3( 0.2126, 0.7152, 0.0722 );
	return dot( weights, color.rgb );
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}`,Sy=`#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_maxMipLevel 8.0
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_maxTileSize 256.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		float texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );
		vec2 uv = getUV( direction, face ) * ( faceSize - 1.0 );
		vec2 f = fract( uv );
		uv += 0.5 - f;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		if ( mipInt < cubeUV_maxMipLevel ) {
			uv.y += 2.0 * cubeUV_maxTileSize;
		}
		uv.y += filterInt * 2.0 * cubeUV_minTileSize;
		uv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );
		uv *= texelSize;
		vec3 tl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;
		uv.x += texelSize;
		vec3 tr = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;
		uv.y += texelSize;
		vec3 br = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;
		uv.x -= texelSize;
		vec3 bl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;
		vec3 tm = mix( tl, tr, f.x );
		vec3 bm = mix( bl, br, f.x );
		return mix( tm, bm, f.y );
	}
	#define r0 1.0
	#define v0 0.339
	#define m0 - 2.0
	#define r1 0.8
	#define v1 0.276
	#define m1 - 1.0
	#define r4 0.4
	#define v4 0.046
	#define m4 2.0
	#define r5 0.305
	#define v5 0.016
	#define m5 3.0
	#define r6 0.21
	#define v6 0.0038
	#define m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= r1 ) {
			mip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;
		} else if ( roughness >= r4 ) {
			mip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;
		} else if ( roughness >= r5 ) {
			mip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;
		} else if ( roughness >= r6 ) {
			mip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`,Ey=`vec3 transformedNormal = objectNormal;
#ifdef USE_INSTANCING
	mat3 m = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );
	transformedNormal = m * transformedNormal;
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	vec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`,Ty=`#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`,Ay=`#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );
#endif`,Ly=`#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vUv );
	emissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`,Cy=`#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`,Ry="gl_FragColor = linearToOutputTexel( gl_FragColor );",Py=`
vec4 LinearToLinear( in vec4 value ) {
	return value;
}
vec4 GammaToLinear( in vec4 value, in float gammaFactor ) {
	return vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );
}
vec4 LinearToGamma( in vec4 value, in float gammaFactor ) {
	return vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );
}
vec4 sRGBToLinear( in vec4 value ) {
	return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );
}
vec4 LinearTosRGB( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}
vec4 RGBEToLinear( in vec4 value ) {
	return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );
}
vec4 LinearToRGBE( in vec4 value ) {
	float maxComponent = max( max( value.r, value.g ), value.b );
	float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );
	return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );
}
vec4 RGBMToLinear( in vec4 value, in float maxRange ) {
	return vec4( value.rgb * value.a * maxRange, 1.0 );
}
vec4 LinearToRGBM( in vec4 value, in float maxRange ) {
	float maxRGB = max( value.r, max( value.g, value.b ) );
	float M = clamp( maxRGB / maxRange, 0.0, 1.0 );
	M = ceil( M * 255.0 ) / 255.0;
	return vec4( value.rgb / ( M * maxRange ), M );
}
vec4 RGBDToLinear( in vec4 value, in float maxRange ) {
	return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );
}
vec4 LinearToRGBD( in vec4 value, in float maxRange ) {
	float maxRGB = max( value.r, max( value.g, value.b ) );
	float D = max( maxRange / maxRGB, 1.0 );
	D = clamp( floor( D ) / 255.0, 0.0, 1.0 );
	return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );
}
const mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );
vec4 LinearToLogLuv( in vec4 value ) {
	vec3 Xp_Y_XYZp = cLogLuvM * value.rgb;
	Xp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );
	vec4 vResult;
	vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;
	float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;
	vResult.w = fract( Le );
	vResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;
	return vResult;
}
const mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );
vec4 LogLuvToLinear( in vec4 value ) {
	float Le = value.z * 255.0 + value.w;
	vec3 Xp_Y_XYZp;
	Xp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );
	Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;
	Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;
	vec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;
	return vec4( max( vRGB, 0.0 ), 1.0 );
}`,Iy=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
		envColor = envMapTexelToLinear( envColor );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`,Dy=`#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	uniform int maxMipLevel;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`,Ny=`#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`,Fy=`#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`,By=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`,Oy=`#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`,zy=`#ifdef USE_FOG
	varying float vFogDepth;
#endif`,Uy=`#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`,Hy=`#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`,Gy=`#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return texture2D( gradientMap, coord ).rgb;
	#else
		return ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );
	#endif
}`,ky=`#ifdef USE_LIGHTMAP
	vec4 lightMapTexel = texture2D( lightMap, vUv2 );
	vec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;
	#ifndef PHYSICALLY_CORRECT_LIGHTS
		lightMapIrradiance *= PI;
	#endif
	reflectedLight.indirectDiffuse += lightMapIrradiance;
#endif`,Vy=`#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`,Wy=`vec3 diffuse = vec3( 1.0 );
GeometricContext geometry;
geometry.position = mvPosition.xyz;
geometry.normal = normalize( transformedNormal );
geometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );
GeometricContext backGeometry;
backGeometry.position = geometry.position;
backGeometry.normal = -geometry.normal;
backGeometry.viewDir = geometry.viewDir;
vLightFront = vec3( 0.0 );
vIndirectFront = vec3( 0.0 );
#ifdef DOUBLE_SIDED
	vLightBack = vec3( 0.0 );
	vIndirectBack = vec3( 0.0 );
#endif
IncidentLight directLight;
float dotNL;
vec3 directLightColor_Diffuse;
vIndirectFront += getAmbientLightIrradiance( ambientLightColor );
vIndirectFront += getLightProbeIrradiance( lightProbe, geometry.normal );
#ifdef DOUBLE_SIDED
	vIndirectBack += getAmbientLightIrradiance( ambientLightColor );
	vIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry.normal );
#endif
#if NUM_POINT_LIGHTS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		getPointLightInfo( pointLights[ i ], geometry, directLight );
		dotNL = dot( geometry.normal, directLight.direction );
		directLightColor_Diffuse = directLight.color;
		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;
		#ifdef DOUBLE_SIDED
			vLightBack += saturate( - dotNL ) * directLightColor_Diffuse;
		#endif
	}
	#pragma unroll_loop_end
#endif
#if NUM_SPOT_LIGHTS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		getSpotLightInfo( spotLights[ i ], geometry, directLight );
		dotNL = dot( geometry.normal, directLight.direction );
		directLightColor_Diffuse = directLight.color;
		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;
		#ifdef DOUBLE_SIDED
			vLightBack += saturate( - dotNL ) * directLightColor_Diffuse;
		#endif
	}
	#pragma unroll_loop_end
#endif
#if NUM_DIR_LIGHTS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		getDirectionalLightInfo( directionalLights[ i ], geometry, directLight );
		dotNL = dot( geometry.normal, directLight.direction );
		directLightColor_Diffuse = directLight.color;
		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;
		#ifdef DOUBLE_SIDED
			vLightBack += saturate( - dotNL ) * directLightColor_Diffuse;
		#endif
	}
	#pragma unroll_loop_end
#endif
#if NUM_HEMI_LIGHTS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
		vIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );
		#ifdef DOUBLE_SIDED
			vIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry.normal );
		#endif
	}
	#pragma unroll_loop_end
#endif`,$y=`uniform bool receiveShadow;
uniform vec3 ambientLightColor;
uniform vec3 lightProbe[ 9 ];
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {
	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	#if defined ( PHYSICALLY_CORRECT_LIGHTS )
		float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
		if ( cutoffDistance > 0.0 ) {
			distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
		}
		return distanceFalloff;
	#else
		if ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {
			return pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );
		}
		return 1.0;
	#endif
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometry.position;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometry.position;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {
		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`,qy=`#if defined( USE_ENVMAP )
	#ifdef ENVMAP_MODE_REFRACTION
		uniform float refractionRatio;
	#endif
	vec3 getIBLIrradiance( const in vec3 normal ) {
		#if defined( ENVMAP_TYPE_CUBE_UV )
			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#if defined( ENVMAP_TYPE_CUBE_UV )
			vec3 reflectVec;
			#ifdef ENVMAP_MODE_REFLECTION
				reflectVec = reflect( - viewDir, normal );
				reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			#else
				reflectVec = refract( - viewDir, normal, refractionRatio );
			#endif
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
#endif`,jy=`ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`,Xy=`varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon
#define Material_LightProbeLOD( material )	(0)`,Yy=`BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`,Zy=`varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong
#define Material_LightProbeLOD( material )	(0)`,Jy=`PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	#ifdef SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;
		#ifdef USE_SPECULARINTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;
		#endif
		#ifdef USE_SPECULARCOLORMAP
			specularColorFactor *= specularColorMapTexelToLinear( texture2D( specularColorMap, vUv ) ).rgb;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( ior - 1.0 ) / ( ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheenColor;
	#ifdef USE_SHEENCOLORMAP
		material.sheenColor *= sheenColorMapTexelToLinear( texture2D( sheenColorMap, vUv ) ).rgb;
	#endif
	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );
	#ifdef USE_SHEENROUGHNESSMAP
		material.sheenRoughness *= texture2D( sheenRoughnessMap, vUv ).a;
	#endif
#endif`,Qy=`struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif
};
vec3 clearcoatSpecular = vec3( 0.0 );
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	vec3 FssEss = specularColor * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometry.normal;
		vec3 viewDir = geometry.viewDir;
		vec3 position = geometry.position;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecular += ccIrradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		reflectedLight.directSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );
	#endif
	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	computeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	vec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`,Ky=`
GeometricContext geometry;
geometry.position = - vViewPosition;
geometry.normal = normal;
geometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
#ifdef USE_CLEARCOAT
	geometry.clearcoatNormal = clearcoatNormal;
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometry, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometry, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, geometry, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	irradiance += getLightProbeIrradiance( lightProbe, geometry.normal );
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`,t_=`#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vUv2 );
		vec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;
		#ifndef PHYSICALLY_CORRECT_LIGHTS
			lightMapIrradiance *= PI;
		#endif
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometry.normal );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	radiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`,e_=`#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );
#endif`,n_=`#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	gl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`,i_=`#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,r_=`#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		varying float vFragDepth;
		varying float vIsPerspective;
	#else
		uniform float logDepthBufFC;
	#endif
#endif`,s_=`#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		vFragDepth = 1.0 + gl_Position.w;
		vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
	#else
		if ( isPerspectiveMatrix( projectionMatrix ) ) {
			gl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;
			gl_Position.z *= gl_Position.w;
		}
	#endif
#endif`,o_=`#ifdef USE_MAP
	vec4 texelColor = texture2D( map, vUv );
	texelColor = mapTexelToLinear( texelColor );
	diffuseColor *= texelColor;
#endif`,a_=`#ifdef USE_MAP
	uniform sampler2D map;
#endif`,l_=`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
#endif
#ifdef USE_MAP
	vec4 mapTexel = texture2D( map, uv );
	diffuseColor *= mapTexelToLinear( mapTexel );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`,c_=`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	uniform mat3 uvTransform;
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,h_=`float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vUv );
	metalnessFactor *= texelMetalness.b;
#endif`,u_=`#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`,d_=`#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
			if ( morphTargetInfluences[ i ] > 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1, 2 ) * morphTargetInfluences[ i ];
		}
	#else
		objectNormal += morphNormal0 * morphTargetInfluences[ 0 ];
		objectNormal += morphNormal1 * morphTargetInfluences[ 1 ];
		objectNormal += morphNormal2 * morphTargetInfluences[ 2 ];
		objectNormal += morphNormal3 * morphTargetInfluences[ 3 ];
	#endif
#endif`,f_=`#ifdef USE_MORPHTARGETS
	uniform float morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
		uniform sampler2DArray morphTargetsTexture;
		uniform vec2 morphTargetsTextureSize;
		vec3 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset, const in int stride ) {
			float texelIndex = float( vertexIndex * stride + offset );
			float y = floor( texelIndex / morphTargetsTextureSize.x );
			float x = texelIndex - y * morphTargetsTextureSize.x;
			vec3 morphUV = vec3( ( x + 0.5 ) / morphTargetsTextureSize.x, y / morphTargetsTextureSize.y, morphTargetIndex );
			return texture( morphTargetsTexture, morphUV ).xyz;
		}
	#else
		#ifndef USE_MORPHNORMALS
			uniform float morphTargetInfluences[ 8 ];
		#else
			uniform float morphTargetInfluences[ 4 ];
		#endif
	#endif
#endif`,p_=`#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
			#ifndef USE_MORPHNORMALS
				if ( morphTargetInfluences[ i ] > 0.0 ) transformed += getMorph( gl_VertexID, i, 0, 1 ) * morphTargetInfluences[ i ];
			#else
				if ( morphTargetInfluences[ i ] > 0.0 ) transformed += getMorph( gl_VertexID, i, 0, 2 ) * morphTargetInfluences[ i ];
			#endif
		}
	#else
		transformed += morphTarget0 * morphTargetInfluences[ 0 ];
		transformed += morphTarget1 * morphTargetInfluences[ 1 ];
		transformed += morphTarget2 * morphTargetInfluences[ 2 ];
		transformed += morphTarget3 * morphTargetInfluences[ 3 ];
		#ifndef USE_MORPHNORMALS
			transformed += morphTarget4 * morphTargetInfluences[ 4 ];
			transformed += morphTarget5 * morphTargetInfluences[ 5 ];
			transformed += morphTarget6 * morphTargetInfluences[ 6 ];
			transformed += morphTarget7 * morphTargetInfluences[ 7 ];
		#endif
	#endif
#endif`,m_=`float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );
	vec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	#ifdef USE_TANGENT
		vec3 tangent = normalize( vTangent );
		vec3 bitangent = normalize( vBitangent );
		#ifdef DOUBLE_SIDED
			tangent = tangent * faceDirection;
			bitangent = bitangent * faceDirection;
		#endif
		#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )
			mat3 vTBN = mat3( tangent, bitangent, normal );
		#endif
	#endif
#endif
vec3 geometryNormal = normal;`,g_=`#ifdef OBJECTSPACE_NORMALMAP
	normal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( TANGENTSPACE_NORMALMAP )
	vec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	#ifdef USE_TANGENT
		normal = normalize( vTBN * mapN );
	#else
		normal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );
	#endif
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`,v_=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,x_=`#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`,y_=`#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`,__=`#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef OBJECTSPACE_NORMALMAP
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )
	vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {
		vec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );
		vec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );
		vec2 st0 = dFdx( vUv.st );
		vec2 st1 = dFdy( vUv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );
		return normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );
	}
#endif`,b_=`#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = geometryNormal;
#endif`,M_=`#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	#ifdef USE_TANGENT
		clearcoatNormal = normalize( vTBN * clearcoatMapN );
	#else
		clearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );
	#endif
#endif`,w_=`#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif`,S_=`#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= transmissionAlpha + 0.1;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`,E_=`vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;
const vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );
const vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );
const float ShiftRight8 = 1. / 256.;
vec4 packDepthToRGBA( const in float v ) {
	vec4 r = vec4( fract( v * PackFactors ), v );
	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors );
}
vec4 pack2HalfToRGBA( vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {
	return linearClipZ * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * invClipZ - far );
}`,T_=`#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`,A_=`vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`,L_=`#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`,C_=`#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`,R_=`float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vUv );
	roughnessFactor *= texelRoughness.g;
#endif`,P_=`#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`,I_=`#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		float hard_shadow = step( compare , distribution.x );
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );
		bool inFrustum = all( inFrustumVec );
		bvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );
		bool frustumTest = all( frustumTestVec );
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), 
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), 
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), 
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), 
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), 
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), 
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return shadow;
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
		vec3 lightToPosition = shadowCoord.xyz;
		float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );		dp += shadowBias;
		vec3 bd3D = normalize( lightToPosition );
		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
			return (
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
			) * ( 1.0 / 9.0 );
		#else
			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
		#endif
	}
#endif`,D_=`#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];
		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`,N_=`#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0
		vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		vec4 shadowWorldPosition;
	#endif
	#if NUM_DIR_LIGHT_SHADOWS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
		vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );
		vSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
		vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
	#endif
#endif`,F_=`float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`,B_=`#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`,O_=`#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	#ifdef BONE_TEXTURE
		uniform highp sampler2D boneTexture;
		uniform int boneTextureSize;
		mat4 getBoneMatrix( const in float i ) {
			float j = i * 4.0;
			float x = mod( j, float( boneTextureSize ) );
			float y = floor( j / float( boneTextureSize ) );
			float dx = 1.0 / float( boneTextureSize );
			float dy = 1.0 / float( boneTextureSize );
			y = dy * ( y + 0.5 );
			vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );
			vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );
			vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );
			vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );
			mat4 bone = mat4( v1, v2, v3, v4 );
			return bone;
		}
	#else
		uniform mat4 boneMatrices[ MAX_BONES ];
		mat4 getBoneMatrix( const in float i ) {
			mat4 bone = boneMatrices[ int(i) ];
			return bone;
		}
	#endif
#endif`,z_=`#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`,U_=`#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`,H_=`float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`,G_=`#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`,k_=`#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`,V_=`#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return toneMappingExposure * color;
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 OptimizedCineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
vec3 CustomToneMapping( vec3 color ) { return color; }`,W_=`#ifdef USE_TRANSMISSION
	float transmissionAlpha = 1.0;
	float transmissionFactor = transmission;
	float thicknessFactor = thickness;
	#ifdef USE_TRANSMISSIONMAP
		transmissionFactor *= texture2D( transmissionMap, vUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		thicknessFactor *= texture2D( thicknessMap, vUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmission = getIBLVolumeRefraction(
		n, v, roughnessFactor, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, ior, thicknessFactor,
		attenuationColor, attenuationDistance );
	totalDiffuse = mix( totalDiffuse, transmission.rgb, transmissionFactor );
	transmissionAlpha = mix( transmissionAlpha, transmission.a, transmissionFactor );
#endif`,$_=`#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	vec3 getVolumeTransmissionRay( vec3 n, vec3 v, float thickness, float ior, mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( float roughness, float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( vec2 fragCoord, float roughness, float ior ) {
		float framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		#ifdef TEXTURE_LOD_EXT
			return texture2DLodEXT( transmissionSamplerMap, fragCoord.xy, framebufferLod );
		#else
			return texture2D( transmissionSamplerMap, fragCoord.xy, framebufferLod );
		#endif
	}
	vec3 applyVolumeAttenuation( vec3 radiance, float transmissionDistance, vec3 attenuationColor, float attenuationDistance ) {
		if ( attenuationDistance == 0.0 ) {
			return radiance;
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance * radiance;
		}
	}
	vec4 getIBLVolumeRefraction( vec3 n, vec3 v, float roughness, vec3 diffuseColor, vec3 specularColor, float specularF90,
		vec3 position, mat4 modelMatrix, mat4 viewMatrix, mat4 projMatrix, float ior, float thickness,
		vec3 attenuationColor, float attenuationDistance ) {
		vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
		vec3 refractedRayExit = position + transmissionRay;
		vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
		vec2 refractionCoords = ndcPos.xy / ndcPos.w;
		refractionCoords += 1.0;
		refractionCoords /= 2.0;
		vec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
		vec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		return vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );
	}
#endif`,q_=`#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )
	varying vec2 vUv;
#endif`,j_=`#ifdef USE_UV
	#ifdef UVS_VERTEX_ONLY
		vec2 vUv;
	#else
		varying vec2 vUv;
	#endif
	uniform mat3 uvTransform;
#endif`,X_=`#ifdef USE_UV
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
#endif`,Y_=`#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )
	varying vec2 vUv2;
#endif`,Z_=`#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )
	attribute vec2 uv2;
	varying vec2 vUv2;
	uniform mat3 uv2Transform;
#endif`,J_=`#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )
	vUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;
#endif`,Q_=`#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION )
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`;const K_=`varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`,t0=`uniform sampler2D t2D;
varying vec2 vUv;
void main() {
	vec4 texColor = texture2D( t2D, vUv );
	gl_FragColor = mapTexelToLinear( texColor );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,e0=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,n0=`#include <envmap_common_pars_fragment>
uniform float opacity;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	vec3 vReflect = vWorldDirection;
	#include <envmap_fragment>
	gl_FragColor = envColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,i0=`#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <skinbase_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`,r0=`#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( 1.0 );
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <logdepthbuf_fragment>
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#endif
}`,s0=`#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <skinbase_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`,o0=`#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( 1.0 );
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`,a0=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`,l0=`uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	vec4 texColor = texture2D( tEquirect, sampleUV );
	gl_FragColor = mapTexelToLinear( texColor );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,c0=`uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <color_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,h0=`uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,u0=`#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`,d0=`uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <cube_uv_reflection_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel= texture2D( lightMap, vUv2 );
		reflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,f0=`#define LAMBERT
varying vec3 vLightFront;
varying vec3 vIndirectFront;
#ifdef DOUBLE_SIDED
	varying vec3 vLightBack;
	varying vec3 vIndirectBack;
#endif
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <envmap_pars_vertex>
#include <bsdfs>
#include <lights_pars_begin>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <lights_lambert_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,p0=`uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
varying vec3 vLightFront;
varying vec3 vIndirectFront;
#ifdef DOUBLE_SIDED
	varying vec3 vLightBack;
	varying vec3 vIndirectBack;
#endif
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <cube_uv_reflection_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <fog_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	#include <emissivemap_fragment>
	#ifdef DOUBLE_SIDED
		reflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;
	#else
		reflectedLight.indirectDiffuse += vIndirectFront;
	#endif
	#include <lightmap_fragment>
	reflectedLight.indirectDiffuse *= BRDF_Lambert( diffuseColor.rgb );
	#ifdef DOUBLE_SIDED
		reflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;
	#else
		reflectedLight.directDiffuse = vLightFront;
	#endif
	reflectedLight.directDiffuse *= BRDF_Lambert( diffuseColor.rgb ) * getShadowMask();
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,m0=`#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`,g0=`#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
		matcapColor = matcapTexelToLinear( matcapColor );
	#else
		vec4 matcapColor = vec4( 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,v0=`#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )
	vViewPosition = - mvPosition.xyz;
#endif
}`,x0=`#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), opacity );
}`,y0=`#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,_0=`#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <cube_uv_reflection_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,b0=`#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`,M0=`#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;
	#ifdef USE_SPECULARINTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
	#ifdef USE_SPECULARCOLORMAP
		uniform sampler2D specularColorMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;
	#ifdef USE_SHEENCOLORMAP
		uniform sampler2D sheenColorMap;
	#endif
	#ifdef USE_SHEENROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <bsdfs>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - clearcoat * Fcc ) + clearcoatSpecular * clearcoat;
	#endif
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,w0=`#define TOON
varying vec3 vViewPosition;
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,S0=`#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,E0=`uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <color_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`,T0=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,A0=`#include <common>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,L0=`uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
}`,C0=`uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );
	vec2 scale;
	scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );
	scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,R0=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <output_fragment>
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
}`,Zt={alphamap_fragment:sy,alphamap_pars_fragment:oy,alphatest_fragment:ay,alphatest_pars_fragment:ly,aomap_fragment:cy,aomap_pars_fragment:hy,begin_vertex:uy,beginnormal_vertex:dy,bsdfs:fy,bumpmap_pars_fragment:py,clipping_planes_fragment:my,clipping_planes_pars_fragment:gy,clipping_planes_pars_vertex:vy,clipping_planes_vertex:xy,color_fragment:yy,color_pars_fragment:_y,color_pars_vertex:by,color_vertex:My,common:wy,cube_uv_reflection_fragment:Sy,defaultnormal_vertex:Ey,displacementmap_pars_vertex:Ty,displacementmap_vertex:Ay,emissivemap_fragment:Ly,emissivemap_pars_fragment:Cy,encodings_fragment:Ry,encodings_pars_fragment:Py,envmap_fragment:Iy,envmap_common_pars_fragment:Dy,envmap_pars_fragment:Ny,envmap_pars_vertex:Fy,envmap_physical_pars_fragment:qy,envmap_vertex:By,fog_vertex:Oy,fog_pars_vertex:zy,fog_fragment:Uy,fog_pars_fragment:Hy,gradientmap_pars_fragment:Gy,lightmap_fragment:ky,lightmap_pars_fragment:Vy,lights_lambert_vertex:Wy,lights_pars_begin:$y,lights_toon_fragment:jy,lights_toon_pars_fragment:Xy,lights_phong_fragment:Yy,lights_phong_pars_fragment:Zy,lights_physical_fragment:Jy,lights_physical_pars_fragment:Qy,lights_fragment_begin:Ky,lights_fragment_maps:t_,lights_fragment_end:e_,logdepthbuf_fragment:n_,logdepthbuf_pars_fragment:i_,logdepthbuf_pars_vertex:r_,logdepthbuf_vertex:s_,map_fragment:o_,map_pars_fragment:a_,map_particle_fragment:l_,map_particle_pars_fragment:c_,metalnessmap_fragment:h_,metalnessmap_pars_fragment:u_,morphnormal_vertex:d_,morphtarget_pars_vertex:f_,morphtarget_vertex:p_,normal_fragment_begin:m_,normal_fragment_maps:g_,normal_pars_fragment:v_,normal_pars_vertex:x_,normal_vertex:y_,normalmap_pars_fragment:__,clearcoat_normal_fragment_begin:b_,clearcoat_normal_fragment_maps:M_,clearcoat_pars_fragment:w_,output_fragment:S_,packing:E_,premultiplied_alpha_fragment:T_,project_vertex:A_,dithering_fragment:L_,dithering_pars_fragment:C_,roughnessmap_fragment:R_,roughnessmap_pars_fragment:P_,shadowmap_pars_fragment:I_,shadowmap_pars_vertex:D_,shadowmap_vertex:N_,shadowmask_pars_fragment:F_,skinbase_vertex:B_,skinning_pars_vertex:O_,skinning_vertex:z_,skinnormal_vertex:U_,specularmap_fragment:H_,specularmap_pars_fragment:G_,tonemapping_fragment:k_,tonemapping_pars_fragment:V_,transmission_fragment:W_,transmission_pars_fragment:$_,uv_pars_fragment:q_,uv_pars_vertex:j_,uv_vertex:X_,uv2_pars_fragment:Y_,uv2_pars_vertex:Z_,uv2_vertex:J_,worldpos_vertex:Q_,background_vert:K_,background_frag:t0,cube_vert:e0,cube_frag:n0,depth_vert:i0,depth_frag:r0,distanceRGBA_vert:s0,distanceRGBA_frag:o0,equirect_vert:a0,equirect_frag:l0,linedashed_vert:c0,linedashed_frag:h0,meshbasic_vert:u0,meshbasic_frag:d0,meshlambert_vert:f0,meshlambert_frag:p0,meshmatcap_vert:m0,meshmatcap_frag:g0,meshnormal_vert:v0,meshnormal_frag:x0,meshphong_vert:y0,meshphong_frag:_0,meshphysical_vert:b0,meshphysical_frag:M0,meshtoon_vert:w0,meshtoon_frag:S0,points_vert:E0,points_frag:T0,shadow_vert:A0,shadow_frag:L0,sprite_vert:C0,sprite_frag:R0},Ct={common:{diffuse:{value:new Ft(16777215)},opacity:{value:1},map:{value:null},uvTransform:{value:new Ie},uv2Transform:{value:new Ie},alphaMap:{value:null},alphaTest:{value:0}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98},maxMipLevel:{value:0}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new bt(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new Ft(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new Ft(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new Ie}},sprite:{diffuse:{value:new Ft(16777215)},opacity:{value:1},center:{value:new bt(.5,.5)},rotation:{value:0},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new Ie}}},Gn={basic:{uniforms:Ge([Ct.common,Ct.specularmap,Ct.envmap,Ct.aomap,Ct.lightmap,Ct.fog]),vertexShader:Zt.meshbasic_vert,fragmentShader:Zt.meshbasic_frag},lambert:{uniforms:Ge([Ct.common,Ct.specularmap,Ct.envmap,Ct.aomap,Ct.lightmap,Ct.emissivemap,Ct.fog,Ct.lights,{emissive:{value:new Ft(0)}}]),vertexShader:Zt.meshlambert_vert,fragmentShader:Zt.meshlambert_frag},phong:{uniforms:Ge([Ct.common,Ct.specularmap,Ct.envmap,Ct.aomap,Ct.lightmap,Ct.emissivemap,Ct.bumpmap,Ct.normalmap,Ct.displacementmap,Ct.fog,Ct.lights,{emissive:{value:new Ft(0)},specular:{value:new Ft(1118481)},shininess:{value:30}}]),vertexShader:Zt.meshphong_vert,fragmentShader:Zt.meshphong_frag},standard:{uniforms:Ge([Ct.common,Ct.envmap,Ct.aomap,Ct.lightmap,Ct.emissivemap,Ct.bumpmap,Ct.normalmap,Ct.displacementmap,Ct.roughnessmap,Ct.metalnessmap,Ct.fog,Ct.lights,{emissive:{value:new Ft(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:Zt.meshphysical_vert,fragmentShader:Zt.meshphysical_frag},toon:{uniforms:Ge([Ct.common,Ct.aomap,Ct.lightmap,Ct.emissivemap,Ct.bumpmap,Ct.normalmap,Ct.displacementmap,Ct.gradientmap,Ct.fog,Ct.lights,{emissive:{value:new Ft(0)}}]),vertexShader:Zt.meshtoon_vert,fragmentShader:Zt.meshtoon_frag},matcap:{uniforms:Ge([Ct.common,Ct.bumpmap,Ct.normalmap,Ct.displacementmap,Ct.fog,{matcap:{value:null}}]),vertexShader:Zt.meshmatcap_vert,fragmentShader:Zt.meshmatcap_frag},points:{uniforms:Ge([Ct.points,Ct.fog]),vertexShader:Zt.points_vert,fragmentShader:Zt.points_frag},dashed:{uniforms:Ge([Ct.common,Ct.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:Zt.linedashed_vert,fragmentShader:Zt.linedashed_frag},depth:{uniforms:Ge([Ct.common,Ct.displacementmap]),vertexShader:Zt.depth_vert,fragmentShader:Zt.depth_frag},normal:{uniforms:Ge([Ct.common,Ct.bumpmap,Ct.normalmap,Ct.displacementmap,{opacity:{value:1}}]),vertexShader:Zt.meshnormal_vert,fragmentShader:Zt.meshnormal_frag},sprite:{uniforms:Ge([Ct.sprite,Ct.fog]),vertexShader:Zt.sprite_vert,fragmentShader:Zt.sprite_frag},background:{uniforms:{uvTransform:{value:new Ie},t2D:{value:null}},vertexShader:Zt.background_vert,fragmentShader:Zt.background_frag},cube:{uniforms:Ge([Ct.envmap,{opacity:{value:1}}]),vertexShader:Zt.cube_vert,fragmentShader:Zt.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:Zt.equirect_vert,fragmentShader:Zt.equirect_frag},distanceRGBA:{uniforms:Ge([Ct.common,Ct.displacementmap,{referencePosition:{value:new O},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:Zt.distanceRGBA_vert,fragmentShader:Zt.distanceRGBA_frag},shadow:{uniforms:Ge([Ct.lights,Ct.fog,{color:{value:new Ft(0)},opacity:{value:1}}]),vertexShader:Zt.shadow_vert,fragmentShader:Zt.shadow_frag}};Gn.physical={uniforms:Ge([Gn.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatNormalScale:{value:new bt(1,1)},clearcoatNormalMap:{value:null},sheen:{value:0},sheenColor:{value:new Ft(0)},sheenColorMap:{value:null},sheenRoughness:{value:0},sheenRoughnessMap:{value:null},transmission:{value:0},transmissionMap:{value:null},transmissionSamplerSize:{value:new bt},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},attenuationDistance:{value:0},attenuationColor:{value:new Ft(0)},specularIntensity:{value:0},specularIntensityMap:{value:null},specularColor:{value:new Ft(1,1,1)},specularColorMap:{value:null}}]),vertexShader:Zt.meshphysical_vert,fragmentShader:Zt.meshphysical_frag};function P0(n,t,e,i,r){const s=new Ft(0);let o=0,a,l,c=null,h=0,u=null;function d(g,v){let x=!1,m=v.isScene===!0?v.background:null;m&&m.isTexture&&(m=t.get(m));const p=n.xr,b=p.getSession&&p.getSession();b&&b.environmentBlendMode==="additive"&&(m=null),m===null?f(s,o):m&&m.isColor&&(f(m,1),x=!0),(n.autoClear||x)&&n.clear(n.autoClearColor,n.autoClearDepth,n.autoClearStencil),m&&(m.isCubeTexture||m.mapping===_a)?(l===void 0&&(l=new tn(new xo(1,1,1),new ur({name:"BackgroundCubeMaterial",uniforms:ts(Gn.cube.uniforms),vertexShader:Gn.cube.vertexShader,fragmentShader:Gn.cube.fragmentShader,side:Ee,depthTest:!1,depthWrite:!1,fog:!1})),l.geometry.deleteAttribute("normal"),l.geometry.deleteAttribute("uv"),l.onBeforeRender=function(_,w,E){this.matrixWorld.copyPosition(E.matrixWorld)},Object.defineProperty(l.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),i.update(l)),l.material.uniforms.envMap.value=m,l.material.uniforms.flipEnvMap.value=m.isCubeTexture&&m.isRenderTargetTexture===!1?-1:1,(c!==m||h!==m.version||u!==n.toneMapping)&&(l.material.needsUpdate=!0,c=m,h=m.version,u=n.toneMapping),g.unshift(l,l.geometry,l.material,0,0,null)):m&&m.isTexture&&(a===void 0&&(a=new tn(new rh(2,2),new ur({name:"BackgroundMaterial",uniforms:ts(Gn.background.uniforms),vertexShader:Gn.background.vertexShader,fragmentShader:Gn.background.fragmentShader,side:oo,depthTest:!1,depthWrite:!1,fog:!1})),a.geometry.deleteAttribute("normal"),Object.defineProperty(a.material,"map",{get:function(){return this.uniforms.t2D.value}}),i.update(a)),a.material.uniforms.t2D.value=m,m.matrixAutoUpdate===!0&&m.updateMatrix(),a.material.uniforms.uvTransform.value.copy(m.matrix),(c!==m||h!==m.version||u!==n.toneMapping)&&(a.material.needsUpdate=!0,c=m,h=m.version,u=n.toneMapping),g.unshift(a,a.geometry,a.material,0,0,null))}function f(g,v){e.buffers.color.setClear(g.r,g.g,g.b,v,r)}return{getClearColor:function(){return s},setClearColor:function(g,v=1){s.set(g),o=v,f(s,o)},getClearAlpha:function(){return o},setClearAlpha:function(g){o=g,f(s,o)},render:d}}function I0(n,t,e,i){const r=n.getParameter(34921),s=i.isWebGL2?null:t.get("OES_vertex_array_object"),o=i.isWebGL2||s!==null,a={},l=v(null);let c=l;function h(I,N,C,L,F){let q=!1;if(o){const ot=g(L,C,N);c!==ot&&(c=ot,d(c.object)),q=x(L,F),q&&m(L,F)}else{const ot=N.wireframe===!0;(c.geometry!==L.id||c.program!==C.id||c.wireframe!==ot)&&(c.geometry=L.id,c.program=C.id,c.wireframe=ot,q=!0)}I.isInstancedMesh===!0&&(q=!0),F!==null&&e.update(F,34963),q&&(S(I,N,C,L),F!==null&&n.bindBuffer(34963,e.get(F).buffer))}function u(){return i.isWebGL2?n.createVertexArray():s.createVertexArrayOES()}function d(I){return i.isWebGL2?n.bindVertexArray(I):s.bindVertexArrayOES(I)}function f(I){return i.isWebGL2?n.deleteVertexArray(I):s.deleteVertexArrayOES(I)}function g(I,N,C){const L=C.wireframe===!0;let F=a[I.id];F===void 0&&(F={},a[I.id]=F);let q=F[N.id];q===void 0&&(q={},F[N.id]=q);let ot=q[L];return ot===void 0&&(ot=v(u()),q[L]=ot),ot}function v(I){const N=[],C=[],L=[];for(let F=0;F<r;F++)N[F]=0,C[F]=0,L[F]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:N,enabledAttributes:C,attributeDivisors:L,object:I,attributes:{},index:null}}function x(I,N){const C=c.attributes,L=I.attributes;let F=0;for(const q in L){const ot=C[q],pt=L[q];if(ot===void 0||ot.attribute!==pt||ot.data!==pt.data)return!0;F++}return c.attributesNum!==F||c.index!==N}function m(I,N){const C={},L=I.attributes;let F=0;for(const q in L){const ot=L[q],pt={};pt.attribute=ot,ot.data&&(pt.data=ot.data),C[q]=pt,F++}c.attributes=C,c.attributesNum=F,c.index=N}function p(){const I=c.newAttributes;for(let N=0,C=I.length;N<C;N++)I[N]=0}function b(I){_(I,0)}function _(I,N){const C=c.newAttributes,L=c.enabledAttributes,F=c.attributeDivisors;C[I]=1,L[I]===0&&(n.enableVertexAttribArray(I),L[I]=1),F[I]!==N&&((i.isWebGL2?n:t.get("ANGLE_instanced_arrays"))[i.isWebGL2?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](I,N),F[I]=N)}function w(){const I=c.newAttributes,N=c.enabledAttributes;for(let C=0,L=N.length;C<L;C++)N[C]!==I[C]&&(n.disableVertexAttribArray(C),N[C]=0)}function E(I,N,C,L,F,q){i.isWebGL2===!0&&(C===5124||C===5125)?n.vertexAttribIPointer(I,N,C,F,q):n.vertexAttribPointer(I,N,C,L,F,q)}function S(I,N,C,L){if(i.isWebGL2===!1&&(I.isInstancedMesh||L.isInstancedBufferGeometry)&&t.get("ANGLE_instanced_arrays")===null)return;p();const F=L.attributes,q=C.getAttributes(),ot=N.defaultAttributeValues;for(const pt in q){const rt=q[pt];if(rt.location>=0){let Et=F[pt];if(Et===void 0&&(pt==="instanceMatrix"&&I.instanceMatrix&&(Et=I.instanceMatrix),pt==="instanceColor"&&I.instanceColor&&(Et=I.instanceColor)),Et!==void 0){const it=Et.normalized,vt=Et.itemSize,Y=e.get(Et);if(Y===void 0)continue;const st=Y.buffer,_t=Y.type,Lt=Y.bytesPerElement;if(Et.isInterleavedBufferAttribute){const yt=Et.data,St=yt.stride,At=Et.offset;if(yt&&yt.isInstancedInterleavedBuffer){for(let V=0;V<rt.locationSize;V++)_(rt.location+V,yt.meshPerAttribute);I.isInstancedMesh!==!0&&L._maxInstanceCount===void 0&&(L._maxInstanceCount=yt.meshPerAttribute*yt.count)}else for(let V=0;V<rt.locationSize;V++)b(rt.location+V);n.bindBuffer(34962,st);for(let V=0;V<rt.locationSize;V++)E(rt.location+V,vt/rt.locationSize,_t,it,St*Lt,(At+vt/rt.locationSize*V)*Lt)}else{if(Et.isInstancedBufferAttribute){for(let yt=0;yt<rt.locationSize;yt++)_(rt.location+yt,Et.meshPerAttribute);I.isInstancedMesh!==!0&&L._maxInstanceCount===void 0&&(L._maxInstanceCount=Et.meshPerAttribute*Et.count)}else for(let yt=0;yt<rt.locationSize;yt++)b(rt.location+yt);n.bindBuffer(34962,st);for(let yt=0;yt<rt.locationSize;yt++)E(rt.location+yt,vt/rt.locationSize,_t,it,vt*Lt,vt/rt.locationSize*yt*Lt)}}else if(ot!==void 0){const it=ot[pt];if(it!==void 0)switch(it.length){case 2:n.vertexAttrib2fv(rt.location,it);break;case 3:n.vertexAttrib3fv(rt.location,it);break;case 4:n.vertexAttrib4fv(rt.location,it);break;default:n.vertexAttrib1fv(rt.location,it)}}}}w()}function R(){T();for(const I in a){const N=a[I];for(const C in N){const L=N[C];for(const F in L)f(L[F].object),delete L[F];delete N[C]}delete a[I]}}function W(I){if(a[I.id]===void 0)return;const N=a[I.id];for(const C in N){const L=N[C];for(const F in L)f(L[F].object),delete L[F];delete N[C]}delete a[I.id]}function B(I){for(const N in a){const C=a[N];if(C[I.id]===void 0)continue;const L=C[I.id];for(const F in L)f(L[F].object),delete L[F];delete C[I.id]}}function T(){k(),c!==l&&(c=l,d(c.object))}function k(){l.geometry=null,l.program=null,l.wireframe=!1}return{setup:h,reset:T,resetDefaultState:k,dispose:R,releaseStatesOfGeometry:W,releaseStatesOfProgram:B,initAttributes:p,enableAttribute:b,disableUnusedAttributes:w}}function D0(n,t,e,i){const r=i.isWebGL2;let s;function o(c){s=c}function a(c,h){n.drawArrays(s,c,h),e.update(h,s,1)}function l(c,h,u){if(u===0)return;let d,f;if(r)d=n,f="drawArraysInstanced";else if(d=t.get("ANGLE_instanced_arrays"),f="drawArraysInstancedANGLE",d===null){console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}d[f](s,c,h,u),e.update(h,s,u)}this.setMode=o,this.render=a,this.renderInstances=l}function N0(n,t,e){let i;function r(){if(i!==void 0)return i;if(t.has("EXT_texture_filter_anisotropic")===!0){const S=t.get("EXT_texture_filter_anisotropic");i=n.getParameter(S.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else i=0;return i}function s(S){if(S==="highp"){if(n.getShaderPrecisionFormat(35633,36338).precision>0&&n.getShaderPrecisionFormat(35632,36338).precision>0)return"highp";S="mediump"}return S==="mediump"&&n.getShaderPrecisionFormat(35633,36337).precision>0&&n.getShaderPrecisionFormat(35632,36337).precision>0?"mediump":"lowp"}const o=typeof WebGL2RenderingContext!="undefined"&&n instanceof WebGL2RenderingContext||typeof WebGL2ComputeRenderingContext!="undefined"&&n instanceof WebGL2ComputeRenderingContext;let a=e.precision!==void 0?e.precision:"highp";const l=s(a);l!==a&&(console.warn("THREE.WebGLRenderer:",a,"not supported, using",l,"instead."),a=l);const c=o||t.has("WEBGL_draw_buffers"),h=e.logarithmicDepthBuffer===!0,u=n.getParameter(34930),d=n.getParameter(35660),f=n.getParameter(3379),g=n.getParameter(34076),v=n.getParameter(34921),x=n.getParameter(36347),m=n.getParameter(36348),p=n.getParameter(36349),b=d>0,_=o||t.has("OES_texture_float"),w=b&&_,E=o?n.getParameter(36183):0;return{isWebGL2:o,drawBuffers:c,getMaxAnisotropy:r,getMaxPrecision:s,precision:a,logarithmicDepthBuffer:h,maxTextures:u,maxVertexTextures:d,maxTextureSize:f,maxCubemapSize:g,maxAttributes:v,maxVertexUniforms:x,maxVaryings:m,maxFragmentUniforms:p,vertexTextures:b,floatFragmentTextures:_,floatVertexTextures:w,maxSamples:E}}function F0(n){const t=this;let e=null,i=0,r=!1,s=!1;const o=new oi,a=new Ie,l={value:null,needsUpdate:!1};this.uniform=l,this.numPlanes=0,this.numIntersection=0,this.init=function(u,d,f){const g=u.length!==0||d||i!==0||r;return r=d,e=h(u,f,0),i=u.length,g},this.beginShadows=function(){s=!0,h(null)},this.endShadows=function(){s=!1,c()},this.setState=function(u,d,f){const g=u.clippingPlanes,v=u.clipIntersection,x=u.clipShadows,m=n.get(u);if(!r||g===null||g.length===0||s&&!x)s?h(null):c();else{const p=s?0:i,b=p*4;let _=m.clippingState||null;l.value=_,_=h(g,d,b,f);for(let w=0;w!==b;++w)_[w]=e[w];m.clippingState=_,this.numIntersection=v?this.numPlanes:0,this.numPlanes+=p}};function c(){l.value!==e&&(l.value=e,l.needsUpdate=i>0),t.numPlanes=i,t.numIntersection=0}function h(u,d,f,g){const v=u!==null?u.length:0;let x=null;if(v!==0){if(x=l.value,g!==!0||x===null){const m=f+v*4,p=d.matrixWorldInverse;a.getNormalMatrix(p),(x===null||x.length<m)&&(x=new Float32Array(m));for(let b=0,_=f;b!==v;++b,_+=4)o.copy(u[b]).applyMatrix4(p,a),o.normal.toArray(x,_),x[_+3]=o.constant}l.value=x,l.needsUpdate=!0}return t.numPlanes=v,t.numIntersection=0,x}}function B0(n){let t=new WeakMap;function e(o,a){return a===yc?o.mapping=lo:a===_c&&(o.mapping=co),o}function i(o){if(o&&o.isTexture&&o.isRenderTargetTexture===!1){const a=o.mapping;if(a===yc||a===_c)if(t.has(o)){const l=t.get(o).texture;return e(l,o.mapping)}else{const l=o.image;if(l&&l.height>0){const c=n.getRenderTarget(),h=new rf(l.height/2);return h.fromEquirectangularTexture(n,o),t.set(o,h),n.setRenderTarget(c),o.addEventListener("dispose",r),e(h.texture,o.mapping)}else return null}}return o}function r(o){const a=o.target;a.removeEventListener("dispose",r);const l=t.get(a);l!==void 0&&(t.delete(a),l.dispose())}function s(){t=new WeakMap}return{get:i,dispose:s}}class sh extends eh{constructor(t=-1,e=1,i=1,r=-1,s=.1,o=2e3){super();this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=t,this.right=e,this.top=i,this.bottom=r,this.near=s,this.far=o,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.left=t.left,this.right=t.right,this.top=t.top,this.bottom=t.bottom,this.near=t.near,this.far=t.far,this.zoom=t.zoom,this.view=t.view===null?null:Object.assign({},t.view),this}setViewOffset(t,e,i,r,s,o){this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=i,this.view.offsetY=r,this.view.width=s,this.view.height=o,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=(this.right-this.left)/(2*this.zoom),e=(this.top-this.bottom)/(2*this.zoom),i=(this.right+this.left)/2,r=(this.top+this.bottom)/2;let s=i-t,o=i+t,a=r+e,l=r-e;if(this.view!==null&&this.view.enabled){const c=(this.right-this.left)/this.view.fullWidth/this.zoom,h=(this.top-this.bottom)/this.view.fullHeight/this.zoom;s+=c*this.view.offsetX,o=s+c*this.view.width,a-=h*this.view.offsetY,l=a-h*this.view.height}this.projectionMatrix.makeOrthographic(s,o,a,l,this.near,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.zoom=this.zoom,e.object.left=this.left,e.object.right=this.right,e.object.top=this.top,e.object.bottom=this.bottom,e.object.near=this.near,e.object.far=this.far,this.view!==null&&(e.object.view=Object.assign({},this.view)),e}}sh.prototype.isOrthographicCamera=!0;class Xa extends ur{constructor(t){super(t);this.type="RawShaderMaterial"}}Xa.prototype.isRawShaderMaterial=!0;const rs=4,Ni=8,kn=Math.pow(2,Ni),of=[.125,.215,.35,.446,.526,.582],af=Ni-rs+1+of.length,ss=20,Fi={[ze]:0,[lr]:1,[Ac]:2,[Fd]:3,[Bd]:4,[Od]:5,[Tc]:6},oh=new sh,{_lodPlanes:yo,_sizeLods:lf,_sigmas:Ya}=U0(),cf=new Ft;let ah=null;const dr=(1+Math.sqrt(5))/2,os=1/dr,hf=[new O(1,1,1),new O(-1,1,1),new O(1,1,-1),new O(-1,1,-1),new O(0,dr,os),new O(0,dr,-os),new O(os,0,dr),new O(-os,0,dr),new O(dr,os,0),new O(-dr,os,0)];class O0{constructor(t){this._renderer=t,this._pingPongRenderTarget=null,this._blurMaterial=H0(ss),this._equirectShader=null,this._cubemapShader=null,this._compileMaterial(this._blurMaterial)}fromScene(t,e=0,i=.1,r=100){ah=this._renderer.getRenderTarget();const s=this._allocateTargets();return this._sceneToCubeUV(t,i,r,s),e>0&&this._blur(s,0,0,e),this._applyPMREM(s),this._cleanup(s),s}fromEquirectangular(t){return this._fromTexture(t)}fromCubemap(t){return this._fromTexture(t)}compileCubemapShader(){this._cubemapShader===null&&(this._cubemapShader=ff(),this._compileMaterial(this._cubemapShader))}compileEquirectangularShader(){this._equirectShader===null&&(this._equirectShader=df(),this._compileMaterial(this._equirectShader))}dispose(){this._blurMaterial.dispose(),this._cubemapShader!==null&&this._cubemapShader.dispose(),this._equirectShader!==null&&this._equirectShader.dispose();for(let t=0;t<yo.length;t++)yo[t].dispose()}_cleanup(t){this._pingPongRenderTarget.dispose(),this._renderer.setRenderTarget(ah),t.scissorTest=!1,Za(t,0,0,t.width,t.height)}_fromTexture(t){ah=this._renderer.getRenderTarget();const e=this._allocateTargets(t);return this._textureToCubeUV(t,e),this._applyPMREM(e),this._cleanup(e),e}_allocateTargets(t){const e={magFilter:Ae,minFilter:Ae,generateMipmaps:!1,type:Si,format:Wv,encoding:z0(t)?t.encoding:Ac,depthBuffer:!1},i=uf(e);return i.depthBuffer=!t,this._pingPongRenderTarget=uf(e),i}_compileMaterial(t){const e=new tn(yo[0],t);this._renderer.compile(e,oh)}_sceneToCubeUV(t,e,i,r){const s=90,o=1,a=new en(s,o,e,i),l=[1,-1,1,1,1,1],c=[1,1,1,-1,-1,-1],h=this._renderer,u=h.autoClear,d=h.outputEncoding,f=h.toneMapping;h.getClearColor(cf),h.toneMapping=ar,h.outputEncoding=ze,h.autoClear=!1;const g=new Xc({name:"PMREM.Background",side:Ee,depthWrite:!1,depthTest:!1}),v=new tn(new xo,g);let x=!1;const m=t.background;m?m.isColor&&(g.color.copy(m),t.background=null,x=!0):(g.color.copy(cf),x=!0);for(let p=0;p<6;p++){const b=p%3;b==0?(a.up.set(0,l[p],0),a.lookAt(c[p],0,0)):b==1?(a.up.set(0,0,l[p]),a.lookAt(0,c[p],0)):(a.up.set(0,l[p],0),a.lookAt(0,0,c[p])),Za(r,b*kn,p>2?kn:0,kn,kn),h.setRenderTarget(r),x&&h.render(v,a),h.render(t,a)}v.geometry.dispose(),v.material.dispose(),h.toneMapping=f,h.outputEncoding=d,h.autoClear=u,t.background=m}_setEncoding(t,e){this._renderer.capabilities.isWebGL2===!0&&e.format===Ye&&e.type===Si&&e.encoding===lr?t.value=Fi[ze]:t.value=Fi[e.encoding]}_textureToCubeUV(t,e){const i=this._renderer,r=t.mapping===lo||t.mapping===co;r?this._cubemapShader==null&&(this._cubemapShader=ff()):this._equirectShader==null&&(this._equirectShader=df());const s=r?this._cubemapShader:this._equirectShader,o=new tn(yo[0],s),a=s.uniforms;a.envMap.value=t,r||a.texelSize.value.set(1/t.image.width,1/t.image.height),this._setEncoding(a.inputEncoding,t),this._setEncoding(a.outputEncoding,e.texture),Za(e,0,0,3*kn,2*kn),i.setRenderTarget(e),i.render(o,oh)}_applyPMREM(t){const e=this._renderer,i=e.autoClear;e.autoClear=!1;for(let r=1;r<af;r++){const s=Math.sqrt(Ya[r]*Ya[r]-Ya[r-1]*Ya[r-1]),o=hf[(r-1)%hf.length];this._blur(t,r-1,r,s,o)}e.autoClear=i}_blur(t,e,i,r,s){const o=this._pingPongRenderTarget;this._halfBlur(t,o,e,i,r,"latitudinal",s),this._halfBlur(o,t,i,i,r,"longitudinal",s)}_halfBlur(t,e,i,r,s,o,a){const l=this._renderer,c=this._blurMaterial;o!=="latitudinal"&&o!=="longitudinal"&&console.error("blur direction must be either latitudinal or longitudinal!");const h=3,u=new tn(yo[r],c),d=c.uniforms,f=lf[i]-1,g=isFinite(s)?Math.PI/(2*f):2*Math.PI/(2*ss-1),v=s/g,x=isFinite(s)?1+Math.floor(h*v):ss;x>ss&&console.warn(`sigmaRadians, ${s}, is too large and will clip, as it requested ${x} samples when the maximum is set to ${ss}`);const m=[];let p=0;for(let E=0;E<ss;++E){const S=E/v,R=Math.exp(-S*S/2);m.push(R),E==0?p+=R:E<x&&(p+=2*R)}for(let E=0;E<m.length;E++)m[E]=m[E]/p;d.envMap.value=t.texture,d.samples.value=x,d.weights.value=m,d.latitudinal.value=o==="latitudinal",a&&(d.poleAxis.value=a),d.dTheta.value=g,d.mipInt.value=Ni-i,this._setEncoding(d.inputEncoding,t.texture),this._setEncoding(d.outputEncoding,t.texture);const b=lf[r],_=3*Math.max(0,kn-2*b),w=(r===0?0:2*kn)+2*b*(r>Ni-rs?r-Ni+rs:0);Za(e,_,w,3*b,2*b),l.setRenderTarget(e),l.render(u,oh)}}function z0(n){return n===void 0||n.type!==Si?!1:n.encoding===ze||n.encoding===lr||n.encoding===Tc}function U0(){const n=[],t=[],e=[];let i=Ni;for(let r=0;r<af;r++){const s=Math.pow(2,i);t.push(s);let o=1/s;r>Ni-rs?o=of[r-Ni+rs-1]:r==0&&(o=0),e.push(o);const a=1/(s-1),l=-a/2,c=1+a/2,h=[l,l,c,l,c,c,l,l,c,c,l,c],u=6,d=6,f=3,g=2,v=1,x=new Float32Array(f*d*u),m=new Float32Array(g*d*u),p=new Float32Array(v*d*u);for(let _=0;_<u;_++){const w=_%3*2/3-1,E=_>2?0:-1,S=[w,E,0,w+2/3,E,0,w+2/3,E+1,0,w,E,0,w+2/3,E+1,0,w,E+1,0];x.set(S,f*d*_),m.set(h,g*d*_);const R=[_,_,_,_,_,_];p.set(R,v*d*_)}const b=new re;b.setAttribute("position",new Me(x,f)),b.setAttribute("uv",new Me(m,g)),b.setAttribute("faceIndex",new Me(p,v)),n.push(b),i>rs&&i--}return{_lodPlanes:n,_sizeLods:t,_sigmas:e}}function uf(n){const t=new Hn(3*kn,3*kn,n);return t.texture.mapping=_a,t.texture.name="PMREM.cubeUv",t.scissorTest=!0,t}function Za(n,t,e,i,r){n.viewport.set(t,e,i,r),n.scissor.set(t,e,i,r)}function H0(n){const t=new Float32Array(n),e=new O(0,1,0);return new Xa({name:"SphericalGaussianBlur",defines:{n},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:t},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:e},inputEncoding:{value:Fi[ze]},outputEncoding:{value:Fi[ze]}},vertexShader:lh(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			${ch()}

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

				gl_FragColor = linearToOutputTexel( gl_FragColor );

			}
		`,blending:wi,depthTest:!1,depthWrite:!1})}function df(){const n=new bt(1,1);return new Xa({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null},texelSize:{value:n},inputEncoding:{value:Fi[ze]},outputEncoding:{value:Fi[ze]}},vertexShader:lh(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform vec2 texelSize;

			${ch()}

			#include <common>

			void main() {

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				vec2 f = fract( uv / texelSize - 0.5 );
				uv -= f * texelSize;
				vec3 tl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;
				uv.x += texelSize.x;
				vec3 tr = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;
				uv.y += texelSize.y;
				vec3 br = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;
				uv.x -= texelSize.x;
				vec3 bl = envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;

				vec3 tm = mix( tl, tr, f.x );
				vec3 bm = mix( bl, br, f.x );
				gl_FragColor.rgb = mix( tm, bm, f.y );

				gl_FragColor = linearToOutputTexel( gl_FragColor );

			}
		`,blending:wi,depthTest:!1,depthWrite:!1})}function ff(){return new Xa({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},inputEncoding:{value:Fi[ze]},outputEncoding:{value:Fi[ze]}},vertexShader:lh(),fragmentShader:`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			${ch()}

			void main() {

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb = envMapTexelToLinear( textureCube( envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ) ) ).rgb;
				gl_FragColor = linearToOutputTexel( gl_FragColor );

			}
		`,blending:wi,depthTest:!1,depthWrite:!1})}function lh(){return`

		precision mediump float;
		precision mediump int;

		attribute vec3 position;
		attribute vec2 uv;
		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`}function ch(){return`

		uniform int inputEncoding;
		uniform int outputEncoding;

		#include <encodings_pars_fragment>

		vec4 inputTexelToLinear( vec4 value ) {

			if ( inputEncoding == 0 ) {

				return value;

			} else if ( inputEncoding == 1 ) {

				return sRGBToLinear( value );

			} else if ( inputEncoding == 2 ) {

				return RGBEToLinear( value );

			} else if ( inputEncoding == 3 ) {

				return RGBMToLinear( value, 7.0 );

			} else if ( inputEncoding == 4 ) {

				return RGBMToLinear( value, 16.0 );

			} else if ( inputEncoding == 5 ) {

				return RGBDToLinear( value, 256.0 );

			} else {

				return GammaToLinear( value, 2.2 );

			}

		}

		vec4 linearToOutputTexel( vec4 value ) {

			if ( outputEncoding == 0 ) {

				return value;

			} else if ( outputEncoding == 1 ) {

				return LinearTosRGB( value );

			} else if ( outputEncoding == 2 ) {

				return LinearToRGBE( value );

			} else if ( outputEncoding == 3 ) {

				return LinearToRGBM( value, 7.0 );

			} else if ( outputEncoding == 4 ) {

				return LinearToRGBM( value, 16.0 );

			} else if ( outputEncoding == 5 ) {

				return LinearToRGBD( value, 256.0 );

			} else {

				return LinearToGamma( value, 2.2 );

			}

		}

		vec4 envMapTexelToLinear( vec4 color ) {

			return inputTexelToLinear( color );

		}
	`}function G0(n){let t=new WeakMap,e=null;function i(a){if(a&&a.isTexture&&a.isRenderTargetTexture===!1){const l=a.mapping,c=l===yc||l===_c,h=l===lo||l===co;if(c||h){if(t.has(a))return t.get(a).texture;{const u=a.image;if(c&&u&&u.height>0||h&&u&&r(u)){const d=n.getRenderTarget();e===null&&(e=new O0(n));const f=c?e.fromEquirectangular(a):e.fromCubemap(a);return t.set(a,f),n.setRenderTarget(d),a.addEventListener("dispose",s),f.texture}else return null}}}return a}function r(a){let l=0;const c=6;for(let h=0;h<c;h++)a[h]!==void 0&&l++;return l===c}function s(a){const l=a.target;l.removeEventListener("dispose",s);const c=t.get(l);c!==void 0&&(t.delete(l),c.dispose())}function o(){t=new WeakMap,e!==null&&(e.dispose(),e=null)}return{get:i,dispose:o}}function k0(n){const t={};function e(i){if(t[i]!==void 0)return t[i];let r;switch(i){case"WEBGL_depth_texture":r=n.getExtension("WEBGL_depth_texture")||n.getExtension("MOZ_WEBGL_depth_texture")||n.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":r=n.getExtension("EXT_texture_filter_anisotropic")||n.getExtension("MOZ_EXT_texture_filter_anisotropic")||n.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":r=n.getExtension("WEBGL_compressed_texture_s3tc")||n.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||n.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":r=n.getExtension("WEBGL_compressed_texture_pvrtc")||n.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:r=n.getExtension(i)}return t[i]=r,r}return{has:function(i){return e(i)!==null},init:function(i){i.isWebGL2?e("EXT_color_buffer_float"):(e("WEBGL_depth_texture"),e("OES_texture_float"),e("OES_texture_half_float"),e("OES_texture_half_float_linear"),e("OES_standard_derivatives"),e("OES_element_index_uint"),e("OES_vertex_array_object"),e("ANGLE_instanced_arrays")),e("OES_texture_float_linear"),e("EXT_color_buffer_half_float")},get:function(i){const r=e(i);return r===null&&console.warn("THREE.WebGLRenderer: "+i+" extension not supported."),r}}}function V0(n,t,e,i){const r={},s=new WeakMap;function o(u){const d=u.target;d.index!==null&&t.remove(d.index);for(const g in d.attributes)t.remove(d.attributes[g]);d.removeEventListener("dispose",o),delete r[d.id];const f=s.get(d);f&&(t.remove(f),s.delete(d)),i.releaseStatesOfGeometry(d),d.isInstancedBufferGeometry===!0&&delete d._maxInstanceCount,e.memory.geometries--}function a(u,d){return r[d.id]===!0||(d.addEventListener("dispose",o),r[d.id]=!0,e.memory.geometries++),d}function l(u){const d=u.attributes;for(const g in d)t.update(d[g],34962);const f=u.morphAttributes;for(const g in f){const v=f[g];for(let x=0,m=v.length;x<m;x++)t.update(v[x],34962)}}function c(u){const d=[],f=u.index,g=u.attributes.position;let v=0;if(f!==null){const p=f.array;v=f.version;for(let b=0,_=p.length;b<_;b+=3){const w=p[b+0],E=p[b+1],S=p[b+2];d.push(w,E,E,S,S,w)}}else{const p=g.array;v=g.version;for(let b=0,_=p.length/3-1;b<_;b+=3){const w=b+0,E=b+1,S=b+2;d.push(w,E,E,S,S,w)}}const x=new(Hd(d)>65535?ef:tf)(d,1);x.version=v;const m=s.get(u);m&&t.remove(m),s.set(u,x)}function h(u){const d=s.get(u);if(d){const f=u.index;f!==null&&d.version<f.version&&c(u)}else c(u);return s.get(u)}return{get:a,update:l,getWireframeAttribute:h}}function W0(n,t,e,i){const r=i.isWebGL2;let s;function o(d){s=d}let a,l;function c(d){a=d.type,l=d.bytesPerElement}function h(d,f){n.drawElements(s,f,a,d*l),e.update(f,s,1)}function u(d,f,g){if(g===0)return;let v,x;if(r)v=n,x="drawElementsInstanced";else if(v=t.get("ANGLE_instanced_arrays"),x="drawElementsInstancedANGLE",v===null){console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}v[x](s,f,a,d*l,g),e.update(f,s,g)}this.setMode=o,this.setIndex=c,this.render=h,this.renderInstances=u}function $0(n){const t={geometries:0,textures:0},e={frame:0,calls:0,triangles:0,points:0,lines:0};function i(s,o,a){switch(e.calls++,o){case 4:e.triangles+=a*(s/3);break;case 1:e.lines+=a*(s/2);break;case 3:e.lines+=a*(s-1);break;case 2:e.lines+=a*s;break;case 0:e.points+=a*s;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",o);break}}function r(){e.frame++,e.calls=0,e.triangles=0,e.points=0,e.lines=0}return{memory:t,render:e,programs:null,autoReset:!0,reset:r,update:i}}class hh extends De{constructor(t=null,e=1,i=1,r=1){super(null);this.image={data:t,width:e,height:i,depth:r},this.magFilter=Ae,this.minFilter=Ae,this.wrapR=on,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.needsUpdate=!0}}hh.prototype.isDataTexture2DArray=!0;function q0(n,t){return n[0]-t[0]}function j0(n,t){return Math.abs(t[1])-Math.abs(n[1])}function pf(n,t){let e=1;const i=t.isInterleavedBufferAttribute?t.data.array:t.array;i instanceof Int8Array?e=127:i instanceof Int16Array?e=32767:i instanceof Int32Array?e=2147483647:console.error("THREE.WebGLMorphtargets: Unsupported morph attribute data type: ",i),n.divideScalar(e)}function X0(n,t,e){const i={},r=new Float32Array(8),s=new WeakMap,o=new O,a=[];for(let c=0;c<8;c++)a[c]=[c,0];function l(c,h,u,d){const f=c.morphTargetInfluences;if(t.isWebGL2===!0){const g=h.morphAttributes.position.length;let v=s.get(h);if(v===void 0||v.count!==g){v!==void 0&&v.texture.dispose();const p=h.morphAttributes.normal!==void 0,b=h.morphAttributes.position,_=h.morphAttributes.normal||[],w=h.attributes.position.count,E=p===!0?2:1;let S=w*E,R=1;S>t.maxTextureSize&&(R=Math.ceil(S/t.maxTextureSize),S=t.maxTextureSize);const W=new Float32Array(S*R*4*g),B=new hh(W,S,R,g);B.format=Ye,B.type=Ei;const T=E*4;for(let k=0;k<g;k++){const I=b[k],N=_[k],C=S*R*4*k;for(let L=0;L<I.count;L++){o.fromBufferAttribute(I,L),I.normalized===!0&&pf(o,I);const F=L*T;W[C+F+0]=o.x,W[C+F+1]=o.y,W[C+F+2]=o.z,W[C+F+3]=0,p===!0&&(o.fromBufferAttribute(N,L),N.normalized===!0&&pf(o,N),W[C+F+4]=o.x,W[C+F+5]=o.y,W[C+F+6]=o.z,W[C+F+7]=0)}}v={count:g,texture:B,size:new bt(S,R)},s.set(h,v)}let x=0;for(let p=0;p<f.length;p++)x+=f[p];const m=h.morphTargetsRelative?1:1-x;d.getUniforms().setValue(n,"morphTargetBaseInfluence",m),d.getUniforms().setValue(n,"morphTargetInfluences",f),d.getUniforms().setValue(n,"morphTargetsTexture",v.texture,e),d.getUniforms().setValue(n,"morphTargetsTextureSize",v.size)}else{const g=f===void 0?0:f.length;let v=i[h.id];if(v===void 0||v.length!==g){v=[];for(let _=0;_<g;_++)v[_]=[_,0];i[h.id]=v}for(let _=0;_<g;_++){const w=v[_];w[0]=_,w[1]=f[_]}v.sort(j0);for(let _=0;_<8;_++)_<g&&v[_][1]?(a[_][0]=v[_][0],a[_][1]=v[_][1]):(a[_][0]=Number.MAX_SAFE_INTEGER,a[_][1]=0);a.sort(q0);const x=h.morphAttributes.position,m=h.morphAttributes.normal;let p=0;for(let _=0;_<8;_++){const w=a[_],E=w[0],S=w[1];E!==Number.MAX_SAFE_INTEGER&&S?(x&&h.getAttribute("morphTarget"+_)!==x[E]&&h.setAttribute("morphTarget"+_,x[E]),m&&h.getAttribute("morphNormal"+_)!==m[E]&&h.setAttribute("morphNormal"+_,m[E]),r[_]=S,p+=S):(x&&h.hasAttribute("morphTarget"+_)===!0&&h.deleteAttribute("morphTarget"+_),m&&h.hasAttribute("morphNormal"+_)===!0&&h.deleteAttribute("morphNormal"+_),r[_]=0)}const b=h.morphTargetsRelative?1:1-p;d.getUniforms().setValue(n,"morphTargetBaseInfluence",b),d.getUniforms().setValue(n,"morphTargetInfluences",r)}}return{update:l}}function Y0(n,t,e,i){let r=new WeakMap;function s(l){const c=i.render.frame,h=l.geometry,u=t.get(l,h);return r.get(u)!==c&&(t.update(u),r.set(u,c)),l.isInstancedMesh&&(l.hasEventListener("dispose",a)===!1&&l.addEventListener("dispose",a),e.update(l.instanceMatrix,34962),l.instanceColor!==null&&e.update(l.instanceColor,34962)),u}function o(){r=new WeakMap}function a(l){const c=l.target;c.removeEventListener("dispose",a),e.remove(c.instanceMatrix),c.instanceColor!==null&&e.remove(c.instanceColor)}return{update:s,dispose:o}}class mf extends De{constructor(t=null,e=1,i=1,r=1){super(null);this.image={data:t,width:e,height:i,depth:r},this.magFilter=Ae,this.minFilter=Ae,this.wrapR=on,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.needsUpdate=!0}}mf.prototype.isDataTexture3D=!0;const gf=new De,Z0=new hh,J0=new mf,vf=new $a,xf=[],yf=[],_f=new Float32Array(16),bf=new Float32Array(9),Mf=new Float32Array(4);function as(n,t,e){const i=n[0];if(i<=0||i>0)return n;const r=t*e;let s=xf[r];if(s===void 0&&(s=new Float32Array(r),xf[r]=s),t!==0){i.toArray(s,0);for(let o=1,a=0;o!==t;++o)a+=e,n[o].toArray(s,a)}return s}function Ze(n,t){if(n.length!==t.length)return!1;for(let e=0,i=n.length;e<i;e++)if(n[e]!==t[e])return!1;return!0}function ke(n,t){for(let e=0,i=t.length;e<i;e++)n[e]=t[e]}function wf(n,t){let e=yf[t];e===void 0&&(e=new Int32Array(t),yf[t]=e);for(let i=0;i!==t;++i)e[i]=n.allocateTextureUnit();return e}function Q0(n,t){const e=this.cache;e[0]!==t&&(n.uniform1f(this.addr,t),e[0]=t)}function K0(n,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y)&&(n.uniform2f(this.addr,t.x,t.y),e[0]=t.x,e[1]=t.y);else{if(Ze(e,t))return;n.uniform2fv(this.addr,t),ke(e,t)}}function tb(n,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z)&&(n.uniform3f(this.addr,t.x,t.y,t.z),e[0]=t.x,e[1]=t.y,e[2]=t.z);else if(t.r!==void 0)(e[0]!==t.r||e[1]!==t.g||e[2]!==t.b)&&(n.uniform3f(this.addr,t.r,t.g,t.b),e[0]=t.r,e[1]=t.g,e[2]=t.b);else{if(Ze(e,t))return;n.uniform3fv(this.addr,t),ke(e,t)}}function eb(n,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z||e[3]!==t.w)&&(n.uniform4f(this.addr,t.x,t.y,t.z,t.w),e[0]=t.x,e[1]=t.y,e[2]=t.z,e[3]=t.w);else{if(Ze(e,t))return;n.uniform4fv(this.addr,t),ke(e,t)}}function nb(n,t){const e=this.cache,i=t.elements;if(i===void 0){if(Ze(e,t))return;n.uniformMatrix2fv(this.addr,!1,t),ke(e,t)}else{if(Ze(e,i))return;Mf.set(i),n.uniformMatrix2fv(this.addr,!1,Mf),ke(e,i)}}function ib(n,t){const e=this.cache,i=t.elements;if(i===void 0){if(Ze(e,t))return;n.uniformMatrix3fv(this.addr,!1,t),ke(e,t)}else{if(Ze(e,i))return;bf.set(i),n.uniformMatrix3fv(this.addr,!1,bf),ke(e,i)}}function rb(n,t){const e=this.cache,i=t.elements;if(i===void 0){if(Ze(e,t))return;n.uniformMatrix4fv(this.addr,!1,t),ke(e,t)}else{if(Ze(e,i))return;_f.set(i),n.uniformMatrix4fv(this.addr,!1,_f),ke(e,i)}}function sb(n,t){const e=this.cache;e[0]!==t&&(n.uniform1i(this.addr,t),e[0]=t)}function ob(n,t){const e=this.cache;Ze(e,t)||(n.uniform2iv(this.addr,t),ke(e,t))}function ab(n,t){const e=this.cache;Ze(e,t)||(n.uniform3iv(this.addr,t),ke(e,t))}function lb(n,t){const e=this.cache;Ze(e,t)||(n.uniform4iv(this.addr,t),ke(e,t))}function cb(n,t){const e=this.cache;e[0]!==t&&(n.uniform1ui(this.addr,t),e[0]=t)}function hb(n,t){const e=this.cache;Ze(e,t)||(n.uniform2uiv(this.addr,t),ke(e,t))}function ub(n,t){const e=this.cache;Ze(e,t)||(n.uniform3uiv(this.addr,t),ke(e,t))}function db(n,t){const e=this.cache;Ze(e,t)||(n.uniform4uiv(this.addr,t),ke(e,t))}function fb(n,t,e){const i=this.cache,r=e.allocateTextureUnit();i[0]!==r&&(n.uniform1i(this.addr,r),i[0]=r),e.safeSetTexture2D(t||gf,r)}function pb(n,t,e){const i=this.cache,r=e.allocateTextureUnit();i[0]!==r&&(n.uniform1i(this.addr,r),i[0]=r),e.setTexture3D(t||J0,r)}function mb(n,t,e){const i=this.cache,r=e.allocateTextureUnit();i[0]!==r&&(n.uniform1i(this.addr,r),i[0]=r),e.safeSetTextureCube(t||vf,r)}function gb(n,t,e){const i=this.cache,r=e.allocateTextureUnit();i[0]!==r&&(n.uniform1i(this.addr,r),i[0]=r),e.setTexture2DArray(t||Z0,r)}function vb(n){switch(n){case 5126:return Q0;case 35664:return K0;case 35665:return tb;case 35666:return eb;case 35674:return nb;case 35675:return ib;case 35676:return rb;case 5124:case 35670:return sb;case 35667:case 35671:return ob;case 35668:case 35672:return ab;case 35669:case 35673:return lb;case 5125:return cb;case 36294:return hb;case 36295:return ub;case 36296:return db;case 35678:case 36198:case 36298:case 36306:case 35682:return fb;case 35679:case 36299:case 36307:return pb;case 35680:case 36300:case 36308:case 36293:return mb;case 36289:case 36303:case 36311:case 36292:return gb}}function xb(n,t){n.uniform1fv(this.addr,t)}function yb(n,t){const e=as(t,this.size,2);n.uniform2fv(this.addr,e)}function _b(n,t){const e=as(t,this.size,3);n.uniform3fv(this.addr,e)}function bb(n,t){const e=as(t,this.size,4);n.uniform4fv(this.addr,e)}function Mb(n,t){const e=as(t,this.size,4);n.uniformMatrix2fv(this.addr,!1,e)}function wb(n,t){const e=as(t,this.size,9);n.uniformMatrix3fv(this.addr,!1,e)}function Sb(n,t){const e=as(t,this.size,16);n.uniformMatrix4fv(this.addr,!1,e)}function Eb(n,t){n.uniform1iv(this.addr,t)}function Tb(n,t){n.uniform2iv(this.addr,t)}function Ab(n,t){n.uniform3iv(this.addr,t)}function Lb(n,t){n.uniform4iv(this.addr,t)}function Cb(n,t){n.uniform1uiv(this.addr,t)}function Rb(n,t){n.uniform2uiv(this.addr,t)}function Pb(n,t){n.uniform3uiv(this.addr,t)}function Ib(n,t){n.uniform4uiv(this.addr,t)}function Db(n,t,e){const i=t.length,r=wf(e,i);n.uniform1iv(this.addr,r);for(let s=0;s!==i;++s)e.safeSetTexture2D(t[s]||gf,r[s])}function Nb(n,t,e){const i=t.length,r=wf(e,i);n.uniform1iv(this.addr,r);for(let s=0;s!==i;++s)e.safeSetTextureCube(t[s]||vf,r[s])}function Fb(n){switch(n){case 5126:return xb;case 35664:return yb;case 35665:return _b;case 35666:return bb;case 35674:return Mb;case 35675:return wb;case 35676:return Sb;case 5124:case 35670:return Eb;case 35667:case 35671:return Tb;case 35668:case 35672:return Ab;case 35669:case 35673:return Lb;case 5125:return Cb;case 36294:return Rb;case 36295:return Pb;case 36296:return Ib;case 35678:case 36198:case 36298:case 36306:case 35682:return Db;case 35680:case 36300:case 36308:case 36293:return Nb}}function Bb(n,t,e){this.id=n,this.addr=e,this.cache=[],this.setValue=vb(t.type)}function Sf(n,t,e){this.id=n,this.addr=e,this.cache=[],this.size=t.size,this.setValue=Fb(t.type)}Sf.prototype.updateCache=function(n){const t=this.cache;n instanceof Float32Array&&t.length!==n.length&&(this.cache=new Float32Array(n.length)),ke(t,n)};function Ef(n){this.id=n,this.seq=[],this.map={}}Ef.prototype.setValue=function(n,t,e){const i=this.seq;for(let r=0,s=i.length;r!==s;++r){const o=i[r];o.setValue(n,t[o.id],e)}};const uh=/(\w+)(\])?(\[|\.)?/g;function Tf(n,t){n.seq.push(t),n.map[t.id]=t}function Ob(n,t,e){const i=n.name,r=i.length;for(uh.lastIndex=0;;){const s=uh.exec(i),o=uh.lastIndex;let a=s[1];const l=s[2]==="]",c=s[3];if(l&&(a=a|0),c===void 0||c==="["&&o+2===r){Tf(e,c===void 0?new Bb(a,n,t):new Sf(a,n,t));break}else{let u=e.map[a];u===void 0&&(u=new Ef(a),Tf(e,u)),e=u}}}function Bi(n,t){this.seq=[],this.map={};const e=n.getProgramParameter(t,35718);for(let i=0;i<e;++i){const r=n.getActiveUniform(t,i),s=n.getUniformLocation(t,r.name);Ob(r,s,this)}}Bi.prototype.setValue=function(n,t,e,i){const r=this.map[t];r!==void 0&&r.setValue(n,e,i)};Bi.prototype.setOptional=function(n,t,e){const i=t[e];i!==void 0&&this.setValue(n,e,i)};Bi.upload=function(n,t,e,i){for(let r=0,s=t.length;r!==s;++r){const o=t[r],a=e[o.id];a.needsUpdate!==!1&&o.setValue(n,a.value,i)}};Bi.seqWithValue=function(n,t){const e=[];for(let i=0,r=n.length;i!==r;++i){const s=n[i];s.id in t&&e.push(s)}return e};function Af(n,t,e){const i=n.createShader(t);return n.shaderSource(i,e),n.compileShader(i),i}let zb=0;function Ub(n){const t=n.split(`
`);for(let e=0;e<t.length;e++)t[e]=e+1+": "+t[e];return t.join(`
`)}function Lf(n){switch(n){case ze:return["Linear","( value )"];case lr:return["sRGB","( value )"];case Ac:return["RGBE","( value )"];case Fd:return["RGBM","( value, 7.0 )"];case Bd:return["RGBM","( value, 16.0 )"];case Od:return["RGBD","( value, 256.0 )"];case Tc:return["Gamma","( value, float( GAMMA_FACTOR ) )"];case Px:return["LogLuv","( value )"];default:return console.warn("THREE.WebGLProgram: Unsupported encoding:",n),["Linear","( value )"]}}function Cf(n,t,e){const i=n.getShaderParameter(t,35713),r=n.getShaderInfoLog(t).trim();return i&&r===""?"":e.toUpperCase()+`

`+r+`

`+Ub(n.getShaderSource(t))}function fr(n,t){const e=Lf(t);return"vec4 "+n+"( vec4 value ) { return "+e[0]+"ToLinear"+e[1]+"; }"}function Hb(n,t){const e=Lf(t);return"vec4 "+n+"( vec4 value ) { return LinearTo"+e[0]+e[1]+"; }"}function Gb(n,t){let e;switch(t){case Cv:e="Linear";break;case Rv:e="Reinhard";break;case Pv:e="OptimizedCineon";break;case Iv:e="ACESFilmic";break;case Dv:e="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",t),e="Linear"}return"vec3 "+n+"( vec3 color ) { return "+e+"ToneMapping( color ); }"}function kb(n){return[n.extensionDerivatives||n.envMapCubeUV||n.bumpMap||n.tangentSpaceNormalMap||n.clearcoatNormalMap||n.flatShading||n.shaderID==="physical"?"#extension GL_OES_standard_derivatives : enable":"",(n.extensionFragDepth||n.logarithmicDepthBuffer)&&n.rendererExtensionFragDepth?"#extension GL_EXT_frag_depth : enable":"",n.extensionDrawBuffers&&n.rendererExtensionDrawBuffers?"#extension GL_EXT_draw_buffers : require":"",(n.extensionShaderTextureLOD||n.envMap||n.transmission)&&n.rendererExtensionShaderTextureLod?"#extension GL_EXT_shader_texture_lod : enable":""].filter(_o).join(`
`)}function Vb(n){const t=[];for(const e in n){const i=n[e];i!==!1&&t.push("#define "+e+" "+i)}return t.join(`
`)}function Wb(n,t){const e={},i=n.getProgramParameter(t,35721);for(let r=0;r<i;r++){const s=n.getActiveAttrib(t,r),o=s.name;let a=1;s.type===35674&&(a=2),s.type===35675&&(a=3),s.type===35676&&(a=4),e[o]={type:s.type,location:n.getAttribLocation(t,o),locationSize:a}}return e}function _o(n){return n!==""}function Rf(n,t){return n.replace(/NUM_DIR_LIGHTS/g,t.numDirLights).replace(/NUM_SPOT_LIGHTS/g,t.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,t.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,t.numPointLights).replace(/NUM_HEMI_LIGHTS/g,t.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,t.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g,t.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,t.numPointLightShadows)}function Pf(n,t){return n.replace(/NUM_CLIPPING_PLANES/g,t.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,t.numClippingPlanes-t.numClipIntersection)}const $b=/^[ \t]*#include +<([\w\d./]+)>/gm;function dh(n){return n.replace($b,qb)}function qb(n,t){const e=Zt[t];if(e===void 0)throw new Error("Can not resolve #include <"+t+">");return dh(e)}const jb=/#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g,Xb=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function If(n){return n.replace(Xb,Df).replace(jb,Yb)}function Yb(n,t,e,i){return console.warn("WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead."),Df(n,t,e,i)}function Df(n,t,e,i){let r="";for(let s=parseInt(t);s<parseInt(e);s++)r+=i.replace(/\[\s*i\s*\]/g,"[ "+s+" ]").replace(/UNROLLED_LOOP_INDEX/g,s);return r}function Nf(n){let t="precision "+n.precision+` float;
precision `+n.precision+" int;";return n.precision==="highp"?t+=`
#define HIGH_PRECISION`:n.precision==="mediump"?t+=`
#define MEDIUM_PRECISION`:n.precision==="lowp"&&(t+=`
#define LOW_PRECISION`),t}function Zb(n){let t="SHADOWMAP_TYPE_BASIC";return n.shadowMapType===dd?t="SHADOWMAP_TYPE_PCF":n.shadowMapType===av?t="SHADOWMAP_TYPE_PCF_SOFT":n.shadowMapType===so&&(t="SHADOWMAP_TYPE_VSM"),t}function Jb(n){let t="ENVMAP_TYPE_CUBE";if(n.envMap)switch(n.envMapMode){case lo:case co:t="ENVMAP_TYPE_CUBE";break;case _a:case bc:t="ENVMAP_TYPE_CUBE_UV";break}return t}function Qb(n){let t="ENVMAP_MODE_REFLECTION";if(n.envMap)switch(n.envMapMode){case co:case bc:t="ENVMAP_MODE_REFRACTION";break}return t}function Kb(n){let t="ENVMAP_BLENDING_NONE";if(n.envMap)switch(n.combine){case ya:t="ENVMAP_BLENDING_MULTIPLY";break;case Av:t="ENVMAP_BLENDING_MIX";break;case Lv:t="ENVMAP_BLENDING_ADD";break}return t}function tM(n,t,e,i){const r=n.getContext(),s=e.defines;let o=e.vertexShader,a=e.fragmentShader;const l=Zb(e),c=Jb(e),h=Qb(e),u=Kb(e),d=n.gammaFactor>0?n.gammaFactor:1,f=e.isWebGL2?"":kb(e),g=Vb(s),v=r.createProgram();let x,m,p=e.glslVersion?"#version "+e.glslVersion+`
`:"";e.isRawShaderMaterial?(x=[g].filter(_o).join(`
`),x.length>0&&(x+=`
`),m=[f,g].filter(_o).join(`
`),m.length>0&&(m+=`
`)):(x=[Nf(e),"#define SHADER_NAME "+e.shaderName,g,e.instancing?"#define USE_INSTANCING":"",e.instancingColor?"#define USE_INSTANCING_COLOR":"",e.supportsVertexTextures?"#define VERTEX_TEXTURES":"","#define GAMMA_FACTOR "+d,"#define MAX_BONES "+e.maxBones,e.useFog&&e.fog?"#define USE_FOG":"",e.useFog&&e.fogExp2?"#define FOG_EXP2":"",e.map?"#define USE_MAP":"",e.envMap?"#define USE_ENVMAP":"",e.envMap?"#define "+h:"",e.lightMap?"#define USE_LIGHTMAP":"",e.aoMap?"#define USE_AOMAP":"",e.emissiveMap?"#define USE_EMISSIVEMAP":"",e.bumpMap?"#define USE_BUMPMAP":"",e.normalMap?"#define USE_NORMALMAP":"",e.normalMap&&e.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",e.normalMap&&e.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",e.clearcoatMap?"#define USE_CLEARCOATMAP":"",e.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",e.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",e.displacementMap&&e.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",e.specularMap?"#define USE_SPECULARMAP":"",e.specularIntensityMap?"#define USE_SPECULARINTENSITYMAP":"",e.specularColorMap?"#define USE_SPECULARCOLORMAP":"",e.roughnessMap?"#define USE_ROUGHNESSMAP":"",e.metalnessMap?"#define USE_METALNESSMAP":"",e.alphaMap?"#define USE_ALPHAMAP":"",e.transmission?"#define USE_TRANSMISSION":"",e.transmissionMap?"#define USE_TRANSMISSIONMAP":"",e.thicknessMap?"#define USE_THICKNESSMAP":"",e.sheenColorMap?"#define USE_SHEENCOLORMAP":"",e.sheenRoughnessMap?"#define USE_SHEENROUGHNESSMAP":"",e.vertexTangents?"#define USE_TANGENT":"",e.vertexColors?"#define USE_COLOR":"",e.vertexAlphas?"#define USE_COLOR_ALPHA":"",e.vertexUvs?"#define USE_UV":"",e.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",e.flatShading?"#define FLAT_SHADED":"",e.skinning?"#define USE_SKINNING":"",e.useVertexTexture?"#define BONE_TEXTURE":"",e.morphTargets?"#define USE_MORPHTARGETS":"",e.morphNormals&&e.flatShading===!1?"#define USE_MORPHNORMALS":"",e.morphTargets&&e.isWebGL2?"#define MORPHTARGETS_TEXTURE":"",e.morphTargets&&e.isWebGL2?"#define MORPHTARGETS_COUNT "+e.morphTargetsCount:"",e.doubleSided?"#define DOUBLE_SIDED":"",e.flipSided?"#define FLIP_SIDED":"",e.shadowMapEnabled?"#define USE_SHADOWMAP":"",e.shadowMapEnabled?"#define "+l:"",e.sizeAttenuation?"#define USE_SIZEATTENUATION":"",e.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",e.logarithmicDepthBuffer&&e.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","	attribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","	attribute vec3 instanceColor;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_TANGENT","	attribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","	attribute vec4 color;","#elif defined( USE_COLOR )","	attribute vec3 color;","#endif","#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )","	attribute vec3 morphTarget0;","	attribute vec3 morphTarget1;","	attribute vec3 morphTarget2;","	attribute vec3 morphTarget3;","	#ifdef USE_MORPHNORMALS","		attribute vec3 morphNormal0;","		attribute vec3 morphNormal1;","		attribute vec3 morphNormal2;","		attribute vec3 morphNormal3;","	#else","		attribute vec3 morphTarget4;","		attribute vec3 morphTarget5;","		attribute vec3 morphTarget6;","		attribute vec3 morphTarget7;","	#endif","#endif","#ifdef USE_SKINNING","	attribute vec4 skinIndex;","	attribute vec4 skinWeight;","#endif",`
`].filter(_o).join(`
`),m=[f,Nf(e),"#define SHADER_NAME "+e.shaderName,g,"#define GAMMA_FACTOR "+d,e.useFog&&e.fog?"#define USE_FOG":"",e.useFog&&e.fogExp2?"#define FOG_EXP2":"",e.map?"#define USE_MAP":"",e.matcap?"#define USE_MATCAP":"",e.envMap?"#define USE_ENVMAP":"",e.envMap?"#define "+c:"",e.envMap?"#define "+h:"",e.envMap?"#define "+u:"",e.lightMap?"#define USE_LIGHTMAP":"",e.aoMap?"#define USE_AOMAP":"",e.emissiveMap?"#define USE_EMISSIVEMAP":"",e.bumpMap?"#define USE_BUMPMAP":"",e.normalMap?"#define USE_NORMALMAP":"",e.normalMap&&e.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",e.normalMap&&e.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",e.clearcoat?"#define USE_CLEARCOAT":"",e.clearcoatMap?"#define USE_CLEARCOATMAP":"",e.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",e.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",e.specularMap?"#define USE_SPECULARMAP":"",e.specularIntensityMap?"#define USE_SPECULARINTENSITYMAP":"",e.specularColorMap?"#define USE_SPECULARCOLORMAP":"",e.roughnessMap?"#define USE_ROUGHNESSMAP":"",e.metalnessMap?"#define USE_METALNESSMAP":"",e.alphaMap?"#define USE_ALPHAMAP":"",e.alphaTest?"#define USE_ALPHATEST":"",e.sheen?"#define USE_SHEEN":"",e.sheenColorMap?"#define USE_SHEENCOLORMAP":"",e.sheenRoughnessMap?"#define USE_SHEENROUGHNESSMAP":"",e.transmission?"#define USE_TRANSMISSION":"",e.transmissionMap?"#define USE_TRANSMISSIONMAP":"",e.thicknessMap?"#define USE_THICKNESSMAP":"",e.vertexTangents?"#define USE_TANGENT":"",e.vertexColors||e.instancingColor?"#define USE_COLOR":"",e.vertexAlphas?"#define USE_COLOR_ALPHA":"",e.vertexUvs?"#define USE_UV":"",e.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",e.gradientMap?"#define USE_GRADIENTMAP":"",e.flatShading?"#define FLAT_SHADED":"",e.doubleSided?"#define DOUBLE_SIDED":"",e.flipSided?"#define FLIP_SIDED":"",e.shadowMapEnabled?"#define USE_SHADOWMAP":"",e.shadowMapEnabled?"#define "+l:"",e.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",e.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",e.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",e.logarithmicDepthBuffer&&e.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"",(e.extensionShaderTextureLOD||e.envMap)&&e.rendererExtensionShaderTextureLod?"#define TEXTURE_LOD_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",e.toneMapping!==ar?"#define TONE_MAPPING":"",e.toneMapping!==ar?Zt.tonemapping_pars_fragment:"",e.toneMapping!==ar?Gb("toneMapping",e.toneMapping):"",e.dithering?"#define DITHERING":"",e.format===Fr?"#define OPAQUE":"",Zt.encodings_pars_fragment,e.map?fr("mapTexelToLinear",e.mapEncoding):"",e.matcap?fr("matcapTexelToLinear",e.matcapEncoding):"",e.envMap?fr("envMapTexelToLinear",e.envMapEncoding):"",e.emissiveMap?fr("emissiveMapTexelToLinear",e.emissiveMapEncoding):"",e.specularColorMap?fr("specularColorMapTexelToLinear",e.specularColorMapEncoding):"",e.sheenColorMap?fr("sheenColorMapTexelToLinear",e.sheenColorMapEncoding):"",e.lightMap?fr("lightMapTexelToLinear",e.lightMapEncoding):"",Hb("linearToOutputTexel",e.outputEncoding),e.depthPacking?"#define DEPTH_PACKING "+e.depthPacking:"",`
`].filter(_o).join(`
`)),o=dh(o),o=Rf(o,e),o=Pf(o,e),a=dh(a),a=Rf(a,e),a=Pf(a,e),o=If(o),a=If(a),e.isWebGL2&&e.isRawShaderMaterial!==!0&&(p=`#version 300 es
`,x=["precision mediump sampler2DArray;","#define attribute in","#define varying out","#define texture2D texture"].join(`
`)+`
`+x,m=["#define varying in",e.glslVersion===zd?"":"out highp vec4 pc_fragColor;",e.glslVersion===zd?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join(`
`)+`
`+m);const b=p+x+o,_=p+m+a,w=Af(r,35633,b),E=Af(r,35632,_);if(r.attachShader(v,w),r.attachShader(v,E),e.index0AttributeName!==void 0?r.bindAttribLocation(v,0,e.index0AttributeName):e.morphTargets===!0&&r.bindAttribLocation(v,0,"position"),r.linkProgram(v),n.debug.checkShaderErrors){const W=r.getProgramInfoLog(v).trim(),B=r.getShaderInfoLog(w).trim(),T=r.getShaderInfoLog(E).trim();let k=!0,I=!0;if(r.getProgramParameter(v,35714)===!1){k=!1;const N=Cf(r,w,"vertex"),C=Cf(r,E,"fragment");console.error("THREE.WebGLProgram: Shader Error "+r.getError()+" - VALIDATE_STATUS "+r.getProgramParameter(v,35715)+`

Program Info Log: `+W+`
`+N+`
`+C)}else W!==""?console.warn("THREE.WebGLProgram: Program Info Log:",W):(B===""||T==="")&&(I=!1);I&&(this.diagnostics={runnable:k,programLog:W,vertexShader:{log:B,prefix:x},fragmentShader:{log:T,prefix:m}})}r.deleteShader(w),r.deleteShader(E);let S;this.getUniforms=function(){return S===void 0&&(S=new Bi(r,v)),S};let R;return this.getAttributes=function(){return R===void 0&&(R=Wb(r,v)),R},this.destroy=function(){i.releaseStatesOfProgram(this),r.deleteProgram(v),this.program=void 0},this.name=e.shaderName,this.id=zb++,this.cacheKey=t,this.usedTimes=1,this.program=v,this.vertexShader=w,this.fragmentShader=E,this}function eM(n,t,e,i,r,s,o){const a=[],l=r.isWebGL2,c=r.logarithmicDepthBuffer,h=r.floatVertexTextures,u=r.maxVertexUniforms,d=r.vertexTextures;let f=r.precision;const g={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"},v=["precision","isWebGL2","supportsVertexTextures","outputEncoding","instancing","instancingColor","map","mapEncoding","matcap","matcapEncoding","envMap","envMapMode","envMapEncoding","envMapCubeUV","lightMap","lightMapEncoding","aoMap","emissiveMap","emissiveMapEncoding","bumpMap","normalMap","objectSpaceNormalMap","tangentSpaceNormalMap","clearcoat","clearcoatMap","clearcoatRoughnessMap","clearcoatNormalMap","displacementMap","specularMap",,"roughnessMap","metalnessMap","gradientMap","alphaMap","alphaTest","combine","vertexColors","vertexAlphas","vertexTangents","vertexUvs","uvsVertexOnly","fog","useFog","fogExp2","flatShading","sizeAttenuation","logarithmicDepthBuffer","skinning","maxBones","useVertexTexture","morphTargets","morphNormals","morphTargetsCount","premultipliedAlpha","numDirLights","numPointLights","numSpotLights","numHemiLights","numRectAreaLights","numDirLightShadows","numPointLightShadows","numSpotLightShadows","shadowMapEnabled","shadowMapType","toneMapping","physicallyCorrectLights","doubleSided","flipSided","numClippingPlanes","numClipIntersection","depthPacking","dithering","format","specularIntensityMap","specularColorMap","specularColorMapEncoding","transmission","transmissionMap","thicknessMap","sheen","sheenColorMap","sheenColorMapEncoding","sheenRoughnessMap"];function x(S){const W=S.skeleton.bones;if(h)return 1024;{const T=Math.floor((u-20)/4),k=Math.min(T,W.length);return k<W.length?(console.warn("THREE.WebGLRenderer: Skeleton has "+W.length+" bones. This GPU supports "+k+"."),0):k}}function m(S){let R;return S&&S.isTexture?R=S.encoding:S&&S.isWebGLRenderTarget?(console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."),R=S.texture.encoding):R=ze,l&&S&&S.isTexture&&S.format===Ye&&S.type===Si&&S.encoding===lr&&(R=ze),R}function p(S,R,W,B,T){const k=B.fog,I=S.isMeshStandardMaterial?B.environment:null,N=(S.isMeshStandardMaterial?e:t).get(S.envMap||I),C=g[S.type],L=T.isSkinnedMesh?x(T):0;S.precision!==null&&(f=r.getMaxPrecision(S.precision),f!==S.precision&&console.warn("THREE.WebGLProgram.getParameters:",S.precision,"not supported, using",f,"instead."));let F,q;if(C){const it=Gn[C];F=it.vertexShader,q=it.fragmentShader}else F=S.vertexShader,q=S.fragmentShader;const ot=n.getRenderTarget(),pt=S.alphaTest>0,rt=S.clearcoat>0;return{isWebGL2:l,shaderID:C,shaderName:S.type,vertexShader:F,fragmentShader:q,defines:S.defines,isRawShaderMaterial:S.isRawShaderMaterial===!0,glslVersion:S.glslVersion,precision:f,instancing:T.isInstancedMesh===!0,instancingColor:T.isInstancedMesh===!0&&T.instanceColor!==null,supportsVertexTextures:d,outputEncoding:ot!==null?m(ot.texture):n.outputEncoding,map:!!S.map,mapEncoding:m(S.map),matcap:!!S.matcap,matcapEncoding:m(S.matcap),envMap:!!N,envMapMode:N&&N.mapping,envMapEncoding:m(N),envMapCubeUV:!!N&&(N.mapping===_a||N.mapping===bc),lightMap:!!S.lightMap,lightMapEncoding:m(S.lightMap),aoMap:!!S.aoMap,emissiveMap:!!S.emissiveMap,emissiveMapEncoding:m(S.emissiveMap),bumpMap:!!S.bumpMap,normalMap:!!S.normalMap,objectSpaceNormalMap:S.normalMapType===Nx,tangentSpaceNormalMap:S.normalMapType===Ur,clearcoat:rt,clearcoatMap:rt&&!!S.clearcoatMap,clearcoatRoughnessMap:rt&&!!S.clearcoatRoughnessMap,clearcoatNormalMap:rt&&!!S.clearcoatNormalMap,displacementMap:!!S.displacementMap,roughnessMap:!!S.roughnessMap,metalnessMap:!!S.metalnessMap,specularMap:!!S.specularMap,specularIntensityMap:!!S.specularIntensityMap,specularColorMap:!!S.specularColorMap,specularColorMapEncoding:m(S.specularColorMap),alphaMap:!!S.alphaMap,alphaTest:pt,gradientMap:!!S.gradientMap,sheen:S.sheen>0,sheenColorMap:!!S.sheenColorMap,sheenColorMapEncoding:m(S.sheenColorMap),sheenRoughnessMap:!!S.sheenRoughnessMap,transmission:S.transmission>0,transmissionMap:!!S.transmissionMap,thicknessMap:!!S.thicknessMap,combine:S.combine,vertexTangents:!!S.normalMap&&!!T.geometry&&!!T.geometry.attributes.tangent,vertexColors:S.vertexColors,vertexAlphas:S.vertexColors===!0&&!!T.geometry&&!!T.geometry.attributes.color&&T.geometry.attributes.color.itemSize===4,vertexUvs:!!S.map||!!S.bumpMap||!!S.normalMap||!!S.specularMap||!!S.alphaMap||!!S.emissiveMap||!!S.roughnessMap||!!S.metalnessMap||!!S.clearcoatMap||!!S.clearcoatRoughnessMap||!!S.clearcoatNormalMap||!!S.displacementMap||!!S.transmissionMap||!!S.thicknessMap||!!S.specularIntensityMap||!!S.specularColorMap||!!S.sheenColorMap||S.sheenRoughnessMap,uvsVertexOnly:!(!!S.map||!!S.bumpMap||!!S.normalMap||!!S.specularMap||!!S.alphaMap||!!S.emissiveMap||!!S.roughnessMap||!!S.metalnessMap||!!S.clearcoatNormalMap||S.transmission>0||!!S.transmissionMap||!!S.thicknessMap||!!S.specularIntensityMap||!!S.specularColorMap||!!S.sheen>0||!!S.sheenColorMap||!!S.sheenRoughnessMap)&&!!S.displacementMap,fog:!!k,useFog:S.fog,fogExp2:k&&k.isFogExp2,flatShading:!!S.flatShading,sizeAttenuation:S.sizeAttenuation,logarithmicDepthBuffer:c,skinning:T.isSkinnedMesh===!0&&L>0,maxBones:L,useVertexTexture:h,morphTargets:!!T.geometry&&!!T.geometry.morphAttributes.position,morphNormals:!!T.geometry&&!!T.geometry.morphAttributes.normal,morphTargetsCount:!!T.geometry&&!!T.geometry.morphAttributes.position?T.geometry.morphAttributes.position.length:0,numDirLights:R.directional.length,numPointLights:R.point.length,numSpotLights:R.spot.length,numRectAreaLights:R.rectArea.length,numHemiLights:R.hemi.length,numDirLightShadows:R.directionalShadowMap.length,numPointLightShadows:R.pointShadowMap.length,numSpotLightShadows:R.spotShadowMap.length,numClippingPlanes:o.numPlanes,numClipIntersection:o.numIntersection,format:S.format,dithering:S.dithering,shadowMapEnabled:n.shadowMap.enabled&&W.length>0,shadowMapType:n.shadowMap.type,toneMapping:S.toneMapped?n.toneMapping:ar,physicallyCorrectLights:n.physicallyCorrectLights,premultipliedAlpha:S.premultipliedAlpha,doubleSided:S.side===Ir,flipSided:S.side===Ee,depthPacking:S.depthPacking!==void 0?S.depthPacking:!1,index0AttributeName:S.index0AttributeName,extensionDerivatives:S.extensions&&S.extensions.derivatives,extensionFragDepth:S.extensions&&S.extensions.fragDepth,extensionDrawBuffers:S.extensions&&S.extensions.drawBuffers,extensionShaderTextureLOD:S.extensions&&S.extensions.shaderTextureLOD,rendererExtensionFragDepth:l||i.has("EXT_frag_depth"),rendererExtensionDrawBuffers:l||i.has("WEBGL_draw_buffers"),rendererExtensionShaderTextureLod:l||i.has("EXT_shader_texture_lod"),customProgramCacheKey:S.customProgramCacheKey()}}function b(S){const R=[];if(S.shaderID?R.push(S.shaderID):(R.push(Gd(S.fragmentShader)),R.push(Gd(S.vertexShader))),S.defines!==void 0)for(const W in S.defines)R.push(W),R.push(S.defines[W]);if(S.isRawShaderMaterial===!1){for(let W=0;W<v.length;W++)R.push(S[v[W]]);R.push(n.outputEncoding),R.push(n.gammaFactor)}return R.push(S.customProgramCacheKey),R.join()}function _(S){const R=g[S.type];let W;if(R){const B=Gn[R];W=Kx.clone(B.uniforms)}else W=S.uniforms;return W}function w(S,R){let W;for(let B=0,T=a.length;B<T;B++){const k=a[B];if(k.cacheKey===R){W=k,++W.usedTimes;break}}return W===void 0&&(W=new tM(n,R,S,s),a.push(W)),W}function E(S){if(--S.usedTimes==0){const R=a.indexOf(S);a[R]=a[a.length-1],a.pop(),S.destroy()}}return{getParameters:p,getProgramCacheKey:b,getUniforms:_,acquireProgram:w,releaseProgram:E,programs:a}}function nM(){let n=new WeakMap;function t(s){let o=n.get(s);return o===void 0&&(o={},n.set(s,o)),o}function e(s){n.delete(s)}function i(s,o,a){n.get(s)[o]=a}function r(){n=new WeakMap}return{get:t,remove:e,update:i,dispose:r}}function iM(n,t){return n.groupOrder!==t.groupOrder?n.groupOrder-t.groupOrder:n.renderOrder!==t.renderOrder?n.renderOrder-t.renderOrder:n.program!==t.program?n.program.id-t.program.id:n.material.id!==t.material.id?n.material.id-t.material.id:n.z!==t.z?n.z-t.z:n.id-t.id}function Ff(n,t){return n.groupOrder!==t.groupOrder?n.groupOrder-t.groupOrder:n.renderOrder!==t.renderOrder?n.renderOrder-t.renderOrder:n.z!==t.z?t.z-n.z:n.id-t.id}function Bf(n){const t=[];let e=0;const i=[],r=[],s=[],o={id:-1};function a(){e=0,i.length=0,r.length=0,s.length=0}function l(f,g,v,x,m,p){let b=t[e];const _=n.get(v);return b===void 0?(b={id:f.id,object:f,geometry:g,material:v,program:_.program||o,groupOrder:x,renderOrder:f.renderOrder,z:m,group:p},t[e]=b):(b.id=f.id,b.object=f,b.geometry=g,b.material=v,b.program=_.program||o,b.groupOrder=x,b.renderOrder=f.renderOrder,b.z=m,b.group=p),e++,b}function c(f,g,v,x,m,p){const b=l(f,g,v,x,m,p);v.transmission>0?r.push(b):v.transparent===!0?s.push(b):i.push(b)}function h(f,g,v,x,m,p){const b=l(f,g,v,x,m,p);v.transmission>0?r.unshift(b):v.transparent===!0?s.unshift(b):i.unshift(b)}function u(f,g){i.length>1&&i.sort(f||iM),r.length>1&&r.sort(g||Ff),s.length>1&&s.sort(g||Ff)}function d(){for(let f=e,g=t.length;f<g;f++){const v=t[f];if(v.id===null)break;v.id=null,v.object=null,v.geometry=null,v.material=null,v.program=null,v.group=null}}return{opaque:i,transmissive:r,transparent:s,init:a,push:c,unshift:h,finish:d,sort:u}}function rM(n){let t=new WeakMap;function e(r,s){let o;return t.has(r)===!1?(o=new Bf(n),t.set(r,[o])):s>=t.get(r).length?(o=new Bf(n),t.get(r).push(o)):o=t.get(r)[s],o}function i(){t=new WeakMap}return{get:e,dispose:i}}function sM(){const n={};return{get:function(t){if(n[t.id]!==void 0)return n[t.id];let e;switch(t.type){case"DirectionalLight":e={direction:new O,color:new Ft};break;case"SpotLight":e={position:new O,direction:new O,color:new Ft,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":e={position:new O,color:new Ft,distance:0,decay:0};break;case"HemisphereLight":e={direction:new O,skyColor:new Ft,groundColor:new Ft};break;case"RectAreaLight":e={color:new Ft,position:new O,halfWidth:new O,halfHeight:new O};break}return n[t.id]=e,e}}}function oM(){const n={};return{get:function(t){if(n[t.id]!==void 0)return n[t.id];let e;switch(t.type){case"DirectionalLight":e={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new bt};break;case"SpotLight":e={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new bt};break;case"PointLight":e={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new bt,shadowCameraNear:1,shadowCameraFar:1e3};break}return n[t.id]=e,e}}}let aM=0;function lM(n,t){return(t.castShadow?1:0)-(n.castShadow?1:0)}function cM(n,t){const e=new sM,i=oM(),r={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadow:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[]};for(let h=0;h<9;h++)r.probe.push(new O);const s=new O,o=new Ht,a=new Ht;function l(h,u){let d=0,f=0,g=0;for(let W=0;W<9;W++)r.probe[W].set(0,0,0);let v=0,x=0,m=0,p=0,b=0,_=0,w=0,E=0;h.sort(lM);const S=u!==!0?Math.PI:1;for(let W=0,B=h.length;W<B;W++){const T=h[W],k=T.color,I=T.intensity,N=T.distance,C=T.shadow&&T.shadow.map?T.shadow.map.texture:null;if(T.isAmbientLight)d+=k.r*I*S,f+=k.g*I*S,g+=k.b*I*S;else if(T.isLightProbe)for(let L=0;L<9;L++)r.probe[L].addScaledVector(T.sh.coefficients[L],I);else if(T.isDirectionalLight){const L=e.get(T);if(L.color.copy(T.color).multiplyScalar(T.intensity*S),T.castShadow){const F=T.shadow,q=i.get(T);q.shadowBias=F.bias,q.shadowNormalBias=F.normalBias,q.shadowRadius=F.radius,q.shadowMapSize=F.mapSize,r.directionalShadow[v]=q,r.directionalShadowMap[v]=C,r.directionalShadowMatrix[v]=T.shadow.matrix,_++}r.directional[v]=L,v++}else if(T.isSpotLight){const L=e.get(T);if(L.position.setFromMatrixPosition(T.matrixWorld),L.color.copy(k).multiplyScalar(I*S),L.distance=N,L.coneCos=Math.cos(T.angle),L.penumbraCos=Math.cos(T.angle*(1-T.penumbra)),L.decay=T.decay,T.castShadow){const F=T.shadow,q=i.get(T);q.shadowBias=F.bias,q.shadowNormalBias=F.normalBias,q.shadowRadius=F.radius,q.shadowMapSize=F.mapSize,r.spotShadow[m]=q,r.spotShadowMap[m]=C,r.spotShadowMatrix[m]=T.shadow.matrix,E++}r.spot[m]=L,m++}else if(T.isRectAreaLight){const L=e.get(T);L.color.copy(k).multiplyScalar(I),L.halfWidth.set(T.width*.5,0,0),L.halfHeight.set(0,T.height*.5,0),r.rectArea[p]=L,p++}else if(T.isPointLight){const L=e.get(T);if(L.color.copy(T.color).multiplyScalar(T.intensity*S),L.distance=T.distance,L.decay=T.decay,T.castShadow){const F=T.shadow,q=i.get(T);q.shadowBias=F.bias,q.shadowNormalBias=F.normalBias,q.shadowRadius=F.radius,q.shadowMapSize=F.mapSize,q.shadowCameraNear=F.camera.near,q.shadowCameraFar=F.camera.far,r.pointShadow[x]=q,r.pointShadowMap[x]=C,r.pointShadowMatrix[x]=T.shadow.matrix,w++}r.point[x]=L,x++}else if(T.isHemisphereLight){const L=e.get(T);L.skyColor.copy(T.color).multiplyScalar(I*S),L.groundColor.copy(T.groundColor).multiplyScalar(I*S),r.hemi[b]=L,b++}}p>0&&(t.isWebGL2||n.has("OES_texture_float_linear")===!0?(r.rectAreaLTC1=Ct.LTC_FLOAT_1,r.rectAreaLTC2=Ct.LTC_FLOAT_2):n.has("OES_texture_half_float_linear")===!0?(r.rectAreaLTC1=Ct.LTC_HALF_1,r.rectAreaLTC2=Ct.LTC_HALF_2):console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")),r.ambient[0]=d,r.ambient[1]=f,r.ambient[2]=g;const R=r.hash;(R.directionalLength!==v||R.pointLength!==x||R.spotLength!==m||R.rectAreaLength!==p||R.hemiLength!==b||R.numDirectionalShadows!==_||R.numPointShadows!==w||R.numSpotShadows!==E)&&(r.directional.length=v,r.spot.length=m,r.rectArea.length=p,r.point.length=x,r.hemi.length=b,r.directionalShadow.length=_,r.directionalShadowMap.length=_,r.pointShadow.length=w,r.pointShadowMap.length=w,r.spotShadow.length=E,r.spotShadowMap.length=E,r.directionalShadowMatrix.length=_,r.pointShadowMatrix.length=w,r.spotShadowMatrix.length=E,R.directionalLength=v,R.pointLength=x,R.spotLength=m,R.rectAreaLength=p,R.hemiLength=b,R.numDirectionalShadows=_,R.numPointShadows=w,R.numSpotShadows=E,r.version=aM++)}function c(h,u){let d=0,f=0,g=0,v=0,x=0;const m=u.matrixWorldInverse;for(let p=0,b=h.length;p<b;p++){const _=h[p];if(_.isDirectionalLight){const w=r.directional[d];w.direction.setFromMatrixPosition(_.matrixWorld),s.setFromMatrixPosition(_.target.matrixWorld),w.direction.sub(s),w.direction.transformDirection(m),d++}else if(_.isSpotLight){const w=r.spot[g];w.position.setFromMatrixPosition(_.matrixWorld),w.position.applyMatrix4(m),w.direction.setFromMatrixPosition(_.matrixWorld),s.setFromMatrixPosition(_.target.matrixWorld),w.direction.sub(s),w.direction.transformDirection(m),g++}else if(_.isRectAreaLight){const w=r.rectArea[v];w.position.setFromMatrixPosition(_.matrixWorld),w.position.applyMatrix4(m),a.identity(),o.copy(_.matrixWorld),o.premultiply(m),a.extractRotation(o),w.halfWidth.set(_.width*.5,0,0),w.halfHeight.set(0,_.height*.5,0),w.halfWidth.applyMatrix4(a),w.halfHeight.applyMatrix4(a),v++}else if(_.isPointLight){const w=r.point[f];w.position.setFromMatrixPosition(_.matrixWorld),w.position.applyMatrix4(m),f++}else if(_.isHemisphereLight){const w=r.hemi[x];w.direction.setFromMatrixPosition(_.matrixWorld),w.direction.transformDirection(m),w.direction.normalize(),x++}}}return{setup:l,setupView:c,state:r}}function Of(n,t){const e=new cM(n,t),i=[],r=[];function s(){i.length=0,r.length=0}function o(u){i.push(u)}function a(u){r.push(u)}function l(u){e.setup(i,u)}function c(u){e.setupView(i,u)}return{init:s,state:{lightsArray:i,shadowsArray:r,lights:e},setupLights:l,setupLightsView:c,pushLight:o,pushShadow:a}}function hM(n,t){let e=new WeakMap;function i(s,o=0){let a;return e.has(s)===!1?(a=new Of(n,t),e.set(s,[a])):o>=e.get(s).length?(a=new Of(n,t),e.get(s).push(a)):a=e.get(s)[o],a}function r(){e=new WeakMap}return{get:i,dispose:r}}class zf extends He{constructor(t){super();this.type="MeshDepthMaterial",this.depthPacking=Ix,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.setValues(t)}copy(t){return super.copy(t),this.depthPacking=t.depthPacking,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this}}zf.prototype.isMeshDepthMaterial=!0;class Uf extends He{constructor(t){super();this.type="MeshDistanceMaterial",this.referencePosition=new O,this.nearDistance=1,this.farDistance=1e3,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.fog=!1,this.setValues(t)}copy(t){return super.copy(t),this.referencePosition.copy(t.referencePosition),this.nearDistance=t.nearDistance,this.farDistance=t.farDistance,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this}}Uf.prototype.isMeshDistanceMaterial=!0;const uM=`void main() {
	gl_Position = vec4( position, 1.0 );
}`,dM=`uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	const float samples = float( VSM_SAMPLES );
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`;function Hf(n,t,e){let i=new ja;const r=new bt,s=new bt,o=new oe,a=new zf({depthPacking:Dx}),l=new Uf,c={},h=e.maxTextureSize,u={0:Ee,1:oo,2:Ir},d=new ur({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new bt},radius:{value:4}},vertexShader:uM,fragmentShader:dM}),f=d.clone();f.defines.HORIZONTAL_PASS=1;const g=new re;g.setAttribute("position",new Me(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const v=new tn(g,d),x=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=dd,this.render=function(_,w,E){if(x.enabled===!1||x.autoUpdate===!1&&x.needsUpdate===!1||_.length===0)return;const S=n.getRenderTarget(),R=n.getActiveCubeFace(),W=n.getActiveMipmapLevel(),B=n.state;B.setBlending(wi),B.buffers.color.setClear(1,1,1,1),B.buffers.depth.setTest(!0),B.setScissorTest(!1);for(let T=0,k=_.length;T<k;T++){const I=_[T],N=I.shadow;if(N===void 0){console.warn("THREE.WebGLShadowMap:",I,"has no shadow.");continue}if(N.autoUpdate===!1&&N.needsUpdate===!1)continue;r.copy(N.mapSize);const C=N.getFrameExtents();if(r.multiply(C),s.copy(N.mapSize),(r.x>h||r.y>h)&&(r.x>h&&(s.x=Math.floor(h/C.x),r.x=s.x*C.x,N.mapSize.x=s.x),r.y>h&&(s.y=Math.floor(h/C.y),r.y=s.y*C.y,N.mapSize.y=s.y)),N.map===null&&!N.isPointLightShadow&&this.type===so){const F={minFilter:gn,magFilter:gn,format:Ye};N.map=new Hn(r.x,r.y,F),N.map.texture.name=I.name+".shadowMap",N.mapPass=new Hn(r.x,r.y,F),N.camera.updateProjectionMatrix()}if(N.map===null){const F={minFilter:Ae,magFilter:Ae,format:Ye};N.map=new Hn(r.x,r.y,F),N.map.texture.name=I.name+".shadowMap",N.camera.updateProjectionMatrix()}n.setRenderTarget(N.map),n.clear();const L=N.getViewportCount();for(let F=0;F<L;F++){const q=N.getViewport(F);o.set(s.x*q.x,s.y*q.y,s.x*q.z,s.y*q.w),B.viewport(o),N.updateMatrices(I,F),i=N.getFrustum(),b(w,E,N.camera,I,this.type)}!N.isPointLightShadow&&this.type===so&&m(N,E),N.needsUpdate=!1}x.needsUpdate=!1,n.setRenderTarget(S,R,W)};function m(_,w){const E=t.update(v);d.defines.VSM_SAMPLES!==_.blurSamples&&(d.defines.VSM_SAMPLES=_.blurSamples,f.defines.VSM_SAMPLES=_.blurSamples,d.needsUpdate=!0,f.needsUpdate=!0),d.uniforms.shadow_pass.value=_.map.texture,d.uniforms.resolution.value=_.mapSize,d.uniforms.radius.value=_.radius,n.setRenderTarget(_.mapPass),n.clear(),n.renderBufferDirect(w,null,E,d,v,null),f.uniforms.shadow_pass.value=_.mapPass.texture,f.uniforms.resolution.value=_.mapSize,f.uniforms.radius.value=_.radius,n.setRenderTarget(_.map),n.clear(),n.renderBufferDirect(w,null,E,f,v,null)}function p(_,w,E,S,R,W,B){let T=null;const k=S.isPointLight===!0?_.customDistanceMaterial:_.customDepthMaterial;if(k!==void 0?T=k:T=S.isPointLight===!0?l:a,n.localClippingEnabled&&E.clipShadows===!0&&E.clippingPlanes.length!==0||E.displacementMap&&E.displacementScale!==0||E.alphaMap&&E.alphaTest>0){const I=T.uuid,N=E.uuid;let C=c[I];C===void 0&&(C={},c[I]=C);let L=C[N];L===void 0&&(L=T.clone(),C[N]=L),T=L}return T.visible=E.visible,T.wireframe=E.wireframe,B===so?T.side=E.shadowSide!==null?E.shadowSide:E.side:T.side=E.shadowSide!==null?E.shadowSide:u[E.side],T.alphaMap=E.alphaMap,T.alphaTest=E.alphaTest,T.clipShadows=E.clipShadows,T.clippingPlanes=E.clippingPlanes,T.clipIntersection=E.clipIntersection,T.displacementMap=E.displacementMap,T.displacementScale=E.displacementScale,T.displacementBias=E.displacementBias,T.wireframeLinewidth=E.wireframeLinewidth,T.linewidth=E.linewidth,S.isPointLight===!0&&T.isMeshDistanceMaterial===!0&&(T.referencePosition.setFromMatrixPosition(S.matrixWorld),T.nearDistance=R,T.farDistance=W),T}function b(_,w,E,S,R){if(_.visible===!1)return;if(_.layers.test(w.layers)&&(_.isMesh||_.isLine||_.isPoints)&&(_.castShadow||_.receiveShadow&&R===so)&&(!_.frustumCulled||i.intersectsObject(_))){_.modelViewMatrix.multiplyMatrices(E.matrixWorldInverse,_.matrixWorld);const T=t.update(_),k=_.material;if(Array.isArray(k)){const I=T.groups;for(let N=0,C=I.length;N<C;N++){const L=I[N],F=k[L.materialIndex];if(F&&F.visible){const q=p(_,T,F,S,E.near,E.far,R);n.renderBufferDirect(E,null,T,q,_,L)}}}else if(k.visible){const I=p(_,T,k,S,E.near,E.far,R);n.renderBufferDirect(E,null,T,I,_,null)}}const B=_.children;for(let T=0,k=B.length;T<k;T++)b(B[T],w,E,S,R)}}function fM(n,t,e){const i=e.isWebGL2;function r(){let U=!1;const dt=new oe;let Z=null;const xt=new oe(0,0,0,0);return{setMask:function(z){Z!==z&&!U&&(n.colorMask(z,z,z,z),Z=z)},setLocked:function(z){U=z},setClear:function(z,Mt,$t,Qt,xe){xe===!0&&(z*=Qt,Mt*=Qt,$t*=Qt),dt.set(z,Mt,$t,Qt),xt.equals(dt)===!1&&(n.clearColor(z,Mt,$t,Qt),xt.copy(dt))},reset:function(){U=!1,Z=null,xt.set(-1,0,0,0)}}}function s(){let U=!1,dt=null,Z=null,xt=null;return{setTest:function(z){z?vt(2929):Y(2929)},setMask:function(z){dt!==z&&!U&&(n.depthMask(z),dt=z)},setFunc:function(z){if(Z!==z){if(z)switch(z){case _v:n.depthFunc(512);break;case bv:n.depthFunc(519);break;case Mv:n.depthFunc(513);break;case xc:n.depthFunc(515);break;case wv:n.depthFunc(514);break;case Sv:n.depthFunc(518);break;case Ev:n.depthFunc(516);break;case Tv:n.depthFunc(517);break;default:n.depthFunc(515)}else n.depthFunc(515);Z=z}},setLocked:function(z){U=z},setClear:function(z){xt!==z&&(n.clearDepth(z),xt=z)},reset:function(){U=!1,dt=null,Z=null,xt=null}}}function o(){let U=!1,dt=null,Z=null,xt=null,z=null,Mt=null,$t=null,Qt=null,xe=null;return{setTest:function(te){U||(te?vt(2960):Y(2960))},setMask:function(te){dt!==te&&!U&&(n.stencilMask(te),dt=te)},setFunc:function(te,Te,Oe){(Z!==te||xt!==Te||z!==Oe)&&(n.stencilFunc(te,Te,Oe),Z=te,xt=Te,z=Oe)},setOp:function(te,Te,Oe){(Mt!==te||$t!==Te||Qt!==Oe)&&(n.stencilOp(te,Te,Oe),Mt=te,$t=Te,Qt=Oe)},setLocked:function(te){U=te},setClear:function(te){xe!==te&&(n.clearStencil(te),xe=te)},reset:function(){U=!1,dt=null,Z=null,xt=null,z=null,Mt=null,$t=null,Qt=null,xe=null}}}const a=new r,l=new s,c=new o;let h={},u=null,d={},f=null,g=!1,v=null,x=null,m=null,p=null,b=null,_=null,w=null,E=!1,S=null,R=null,W=null,B=null,T=null;const k=n.getParameter(35661);let I=!1,N=0;const C=n.getParameter(7938);C.indexOf("WebGL")!==-1?(N=parseFloat(/^WebGL (\d)/.exec(C)[1]),I=N>=1):C.indexOf("OpenGL ES")!==-1&&(N=parseFloat(/^OpenGL ES (\d)/.exec(C)[1]),I=N>=2);let L=null,F={};const q=n.getParameter(3088),ot=n.getParameter(2978),pt=new oe().fromArray(q),rt=new oe().fromArray(ot);function Et(U,dt,Z){const xt=new Uint8Array(4),z=n.createTexture();n.bindTexture(U,z),n.texParameteri(U,10241,9728),n.texParameteri(U,10240,9728);for(let Mt=0;Mt<Z;Mt++)n.texImage2D(dt+Mt,0,6408,1,1,0,6408,5121,xt);return z}const it={};it[3553]=Et(3553,3553,1),it[34067]=Et(34067,34069,6),a.setClear(0,0,0,1),l.setClear(1),c.setClear(0),vt(2929),l.setFunc(xc),X(!1),Q(ud),vt(2884),At(wi);function vt(U){h[U]!==!0&&(n.enable(U),h[U]=!0)}function Y(U){h[U]!==!1&&(n.disable(U),h[U]=!1)}function st(U){U!==u&&(n.bindFramebuffer(36160,U),u=U)}function _t(U,dt){return dt===null&&u!==null&&(dt=u),d[U]!==dt?(n.bindFramebuffer(U,dt),d[U]=dt,i&&(U===36009&&(d[36160]=dt),U===36160&&(d[36009]=dt)),!0):!1}function Lt(U){return f!==U?(n.useProgram(U),f=U,!0):!1}const yt={[Dr]:32774,[cv]:32778,[hv]:32779};if(i)yt[vd]=32775,yt[xd]=32776;else{const U=t.get("EXT_blend_minmax");U!==null&&(yt[vd]=U.MIN_EXT,yt[xd]=U.MAX_EXT)}const St={[uv]:0,[dv]:1,[fv]:768,[yd]:770,[yv]:776,[vv]:774,[mv]:772,[pv]:769,[_d]:771,[xv]:775,[gv]:773};function At(U,dt,Z,xt,z,Mt,$t,Qt){if(U===wi){g===!0&&(Y(3042),g=!1);return}if(g===!1&&(vt(3042),g=!0),U!==lv){if(U!==v||Qt!==E){if((x!==Dr||b!==Dr)&&(n.blendEquation(32774),x=Dr,b=Dr),Qt)switch(U){case ao:n.blendFuncSeparate(1,771,1,771);break;case pd:n.blendFunc(1,1);break;case md:n.blendFuncSeparate(0,0,769,771);break;case gd:n.blendFuncSeparate(0,768,0,770);break;default:console.error("THREE.WebGLState: Invalid blending: ",U);break}else switch(U){case ao:n.blendFuncSeparate(770,771,1,771);break;case pd:n.blendFunc(770,1);break;case md:n.blendFunc(0,769);break;case gd:n.blendFunc(0,768);break;default:console.error("THREE.WebGLState: Invalid blending: ",U);break}m=null,p=null,_=null,w=null,v=U,E=Qt}return}z=z||dt,Mt=Mt||Z,$t=$t||xt,(dt!==x||z!==b)&&(n.blendEquationSeparate(yt[dt],yt[z]),x=dt,b=z),(Z!==m||xt!==p||Mt!==_||$t!==w)&&(n.blendFuncSeparate(St[Z],St[xt],St[Mt],St[$t]),m=Z,p=xt,_=Mt,w=$t),v=U,E=null}function V(U,dt){U.side===Ir?Y(2884):vt(2884);let Z=U.side===Ee;dt&&(Z=!Z),X(Z),U.blending===ao&&U.transparent===!1?At(wi):At(U.blending,U.blendEquation,U.blendSrc,U.blendDst,U.blendEquationAlpha,U.blendSrcAlpha,U.blendDstAlpha,U.premultipliedAlpha),l.setFunc(U.depthFunc),l.setTest(U.depthTest),l.setMask(U.depthWrite),a.setMask(U.colorWrite);const xt=U.stencilWrite;c.setTest(xt),xt&&(c.setMask(U.stencilWriteMask),c.setFunc(U.stencilFunc,U.stencilRef,U.stencilFuncMask),c.setOp(U.stencilFail,U.stencilZFail,U.stencilZPass)),et(U.polygonOffset,U.polygonOffsetFactor,U.polygonOffsetUnits),U.alphaToCoverage===!0?vt(32926):Y(32926)}function X(U){S!==U&&(U?n.frontFace(2304):n.frontFace(2305),S=U)}function Q(U){U!==sv?(vt(2884),U!==R&&(U===ud?n.cullFace(1029):U===ov?n.cullFace(1028):n.cullFace(1032))):Y(2884),R=U}function mt(U){U!==W&&(I&&n.lineWidth(U),W=U)}function et(U,dt,Z){U?(vt(32823),(B!==dt||T!==Z)&&(n.polygonOffset(dt,Z),B=dt,T=Z)):Y(32823)}function M(U){U?vt(3089):Y(3089)}function y(U){U===void 0&&(U=33984+k-1),L!==U&&(n.activeTexture(U),L=U)}function G(U,dt){L===null&&y();let Z=F[L];Z===void 0&&(Z={type:void 0,texture:void 0},F[L]=Z),(Z.type!==U||Z.texture!==dt)&&(n.bindTexture(U,dt||it[U]),Z.type=U,Z.texture=dt)}function $(){const U=F[L];U!==void 0&&U.type!==void 0&&(n.bindTexture(U.type,null),U.type=void 0,U.texture=void 0)}function P(){try{n.compressedTexImage2D.apply(n,arguments)}catch(U){console.error("THREE.WebGLState:",U)}}function K(){try{n.texImage2D.apply(n,arguments)}catch(U){console.error("THREE.WebGLState:",U)}}function ht(){try{n.texImage3D.apply(n,arguments)}catch(U){console.error("THREE.WebGLState:",U)}}function gt(U){pt.equals(U)===!1&&(n.scissor(U.x,U.y,U.z,U.w),pt.copy(U))}function ct(U){rt.equals(U)===!1&&(n.viewport(U.x,U.y,U.z,U.w),rt.copy(U))}function ut(){n.disable(3042),n.disable(2884),n.disable(2929),n.disable(32823),n.disable(3089),n.disable(2960),n.disable(32926),n.blendEquation(32774),n.blendFunc(1,0),n.blendFuncSeparate(1,0,1,0),n.colorMask(!0,!0,!0,!0),n.clearColor(0,0,0,0),n.depthMask(!0),n.depthFunc(513),n.clearDepth(1),n.stencilMask(4294967295),n.stencilFunc(519,0,4294967295),n.stencilOp(7680,7680,7680),n.clearStencil(0),n.cullFace(1029),n.frontFace(2305),n.polygonOffset(0,0),n.activeTexture(33984),n.bindFramebuffer(36160,null),i===!0&&(n.bindFramebuffer(36009,null),n.bindFramebuffer(36008,null)),n.useProgram(null),n.lineWidth(1),n.scissor(0,0,n.canvas.width,n.canvas.height),n.viewport(0,0,n.canvas.width,n.canvas.height),h={},L=null,F={},u=null,d={},f=null,g=!1,v=null,x=null,m=null,p=null,b=null,_=null,w=null,E=!1,S=null,R=null,W=null,B=null,T=null,pt.set(0,0,n.canvas.width,n.canvas.height),rt.set(0,0,n.canvas.width,n.canvas.height),a.reset(),l.reset(),c.reset()}return{buffers:{color:a,depth:l,stencil:c},enable:vt,disable:Y,bindFramebuffer:_t,bindXRFramebuffer:st,useProgram:Lt,setBlending:At,setMaterial:V,setFlipSided:X,setCullFace:Q,setLineWidth:mt,setPolygonOffset:et,setScissorTest:M,activeTexture:y,bindTexture:G,unbindTexture:$,compressedTexImage2D:P,texImage2D:K,texImage3D:ht,scissor:gt,viewport:ct,reset:ut}}function pM(n,t,e,i,r,s,o){const a=r.isWebGL2,l=r.maxTextures,c=r.maxCubemapSize,h=r.maxTextureSize,u=r.maxSamples,d=new WeakMap;let f,g=!1;try{g=typeof OffscreenCanvas!="undefined"&&new OffscreenCanvas(1,1).getContext("2d")!==null}catch{}function v(M,y){return g?new OffscreenCanvas(M,y):La("canvas")}function x(M,y,G,$){let P=1;if((M.width>$||M.height>$)&&(P=$/Math.max(M.width,M.height)),P<1||y===!0)if(typeof HTMLImageElement!="undefined"&&M instanceof HTMLImageElement||typeof HTMLCanvasElement!="undefined"&&M instanceof HTMLCanvasElement||typeof ImageBitmap!="undefined"&&M instanceof ImageBitmap){const K=y?zx:Math.floor,ht=K(P*M.width),gt=K(P*M.height);f===void 0&&(f=v(ht,gt));const ct=G?v(ht,gt):f;return ct.width=ht,ct.height=gt,ct.getContext("2d").drawImage(M,0,0,ht,gt),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+M.width+"x"+M.height+") to ("+ht+"x"+gt+")."),ct}else return"data"in M&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+M.width+"x"+M.height+")."),M;return M}function m(M){return Ud(M.width)&&Ud(M.height)}function p(M){return a?!1:M.wrapS!==on||M.wrapT!==on||M.minFilter!==Ae&&M.minFilter!==gn}function b(M,y){return M.generateMipmaps&&y&&M.minFilter!==Ae&&M.minFilter!==gn}function _(M,y,G,$,P=1){n.generateMipmap(M);const K=i.get(y);K.__maxMipLevel=Math.log2(Math.max(G,$,P))}function w(M,y,G,$){if(a===!1)return y;if(M!==null){if(n[M]!==void 0)return n[M];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+M+"'")}let P=y;return y===6403&&(G===5126&&(P=33326),G===5131&&(P=33325),G===5121&&(P=33321)),y===6407&&(G===5126&&(P=34837),G===5131&&(P=34843),G===5121&&(P=32849)),y===6408&&(G===5126&&(P=34836),G===5131&&(P=34842),G===5121&&(P=$===lr?35907:32856)),(P===33325||P===33326||P===34842||P===34836)&&t.get("EXT_color_buffer_float"),P}function E(M){return M===Ae||M===Md||M===wd?9728:9729}function S(M){const y=M.target;y.removeEventListener("dispose",S),W(y),y.isVideoTexture&&d.delete(y),o.memory.textures--}function R(M){const y=M.target;y.removeEventListener("dispose",R),B(y)}function W(M){const y=i.get(M);y.__webglInit!==void 0&&(n.deleteTexture(y.__webglTexture),i.remove(M))}function B(M){const y=M.texture,G=i.get(M),$=i.get(y);if(!!M){if($.__webglTexture!==void 0&&(n.deleteTexture($.__webglTexture),o.memory.textures--),M.depthTexture&&M.depthTexture.dispose(),M.isWebGLCubeRenderTarget)for(let P=0;P<6;P++)n.deleteFramebuffer(G.__webglFramebuffer[P]),G.__webglDepthbuffer&&n.deleteRenderbuffer(G.__webglDepthbuffer[P]);else n.deleteFramebuffer(G.__webglFramebuffer),G.__webglDepthbuffer&&n.deleteRenderbuffer(G.__webglDepthbuffer),G.__webglMultisampledFramebuffer&&n.deleteFramebuffer(G.__webglMultisampledFramebuffer),G.__webglColorRenderbuffer&&n.deleteRenderbuffer(G.__webglColorRenderbuffer),G.__webglDepthRenderbuffer&&n.deleteRenderbuffer(G.__webglDepthRenderbuffer);if(M.isWebGLMultipleRenderTargets)for(let P=0,K=y.length;P<K;P++){const ht=i.get(y[P]);ht.__webglTexture&&(n.deleteTexture(ht.__webglTexture),o.memory.textures--),i.remove(y[P])}i.remove(y),i.remove(M)}}let T=0;function k(){T=0}function I(){const M=T;return M>=l&&console.warn("THREE.WebGLTextures: Trying to use "+M+" texture units while this GPU supports only "+l),T+=1,M}function N(M,y){const G=i.get(M);if(M.isVideoTexture&&V(M),M.version>0&&G.__version!==M.version){const $=M.image;if($===void 0)console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined");else if($.complete===!1)console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");else{Et(G,M,y);return}}e.activeTexture(33984+y),e.bindTexture(3553,G.__webglTexture)}function C(M,y){const G=i.get(M);if(M.version>0&&G.__version!==M.version){Et(G,M,y);return}e.activeTexture(33984+y),e.bindTexture(35866,G.__webglTexture)}function L(M,y){const G=i.get(M);if(M.version>0&&G.__version!==M.version){Et(G,M,y);return}e.activeTexture(33984+y),e.bindTexture(32879,G.__webglTexture)}function F(M,y){const G=i.get(M);if(M.version>0&&G.__version!==M.version){it(G,M,y);return}e.activeTexture(33984+y),e.bindTexture(34067,G.__webglTexture)}const q={[Mc]:10497,[on]:33071,[wc]:33648},ot={[Ae]:9728,[Md]:9984,[wd]:9986,[gn]:9729,[Nv]:9985,[ba]:9987};function pt(M,y,G){if(G?(n.texParameteri(M,10242,q[y.wrapS]),n.texParameteri(M,10243,q[y.wrapT]),(M===32879||M===35866)&&n.texParameteri(M,32882,q[y.wrapR]),n.texParameteri(M,10240,ot[y.magFilter]),n.texParameteri(M,10241,ot[y.minFilter])):(n.texParameteri(M,10242,33071),n.texParameteri(M,10243,33071),(M===32879||M===35866)&&n.texParameteri(M,32882,33071),(y.wrapS!==on||y.wrapT!==on)&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),n.texParameteri(M,10240,E(y.magFilter)),n.texParameteri(M,10241,E(y.minFilter)),y.minFilter!==Ae&&y.minFilter!==gn&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")),t.has("EXT_texture_filter_anisotropic")===!0){const $=t.get("EXT_texture_filter_anisotropic");if(y.type===Ei&&t.has("OES_texture_float_linear")===!1||a===!1&&y.type===Nr&&t.has("OES_texture_half_float_linear")===!1)return;(y.anisotropy>1||i.get(y).__currentAnisotropy)&&(n.texParameterf(M,$.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(y.anisotropy,r.getMaxAnisotropy())),i.get(y).__currentAnisotropy=y.anisotropy)}}function rt(M,y){M.__webglInit===void 0&&(M.__webglInit=!0,y.addEventListener("dispose",S),M.__webglTexture=n.createTexture(),o.memory.textures++)}function Et(M,y,G){let $=3553;y.isDataTexture2DArray&&($=35866),y.isDataTexture3D&&($=32879),rt(M,y),e.activeTexture(33984+G),e.bindTexture($,M.__webglTexture),n.pixelStorei(37440,y.flipY),n.pixelStorei(37441,y.premultiplyAlpha),n.pixelStorei(3317,y.unpackAlignment),n.pixelStorei(37443,0);const P=p(y)&&m(y.image)===!1,K=x(y.image,P,!1,h),ht=m(K)||a,gt=s.convert(y.format);let ct=s.convert(y.type),ut=w(y.internalFormat,gt,ct,y.encoding);pt($,y,ht);let U;const dt=y.mipmaps;if(y.isDepthTexture)ut=6402,a?y.type===Ei?ut=36012:y.type===wa?ut=33190:y.type===ho?ut=35056:ut=33189:y.type===Ei&&console.error("WebGLRenderer: Floating point depth texture requires WebGL2."),y.format===Br&&ut===6402&&y.type!==Ma&&y.type!==wa&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),y.type=Ma,ct=s.convert(y.type)),y.format===uo&&ut===6402&&(ut=34041,y.type!==ho&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),y.type=ho,ct=s.convert(y.type))),e.texImage2D(3553,0,ut,K.width,K.height,0,gt,ct,null);else if(y.isDataTexture)if(dt.length>0&&ht){for(let Z=0,xt=dt.length;Z<xt;Z++)U=dt[Z],e.texImage2D(3553,Z,ut,U.width,U.height,0,gt,ct,U.data);y.generateMipmaps=!1,M.__maxMipLevel=dt.length-1}else e.texImage2D(3553,0,ut,K.width,K.height,0,gt,ct,K.data),M.__maxMipLevel=0;else if(y.isCompressedTexture){for(let Z=0,xt=dt.length;Z<xt;Z++)U=dt[Z],y.format!==Ye&&y.format!==Fr?gt!==null?e.compressedTexImage2D(3553,Z,ut,U.width,U.height,0,U.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):e.texImage2D(3553,Z,ut,U.width,U.height,0,gt,ct,U.data);M.__maxMipLevel=dt.length-1}else if(y.isDataTexture2DArray)e.texImage3D(35866,0,ut,K.width,K.height,K.depth,0,gt,ct,K.data),M.__maxMipLevel=0;else if(y.isDataTexture3D)e.texImage3D(32879,0,ut,K.width,K.height,K.depth,0,gt,ct,K.data),M.__maxMipLevel=0;else if(dt.length>0&&ht){for(let Z=0,xt=dt.length;Z<xt;Z++)U=dt[Z],e.texImage2D(3553,Z,ut,gt,ct,U);y.generateMipmaps=!1,M.__maxMipLevel=dt.length-1}else e.texImage2D(3553,0,ut,gt,ct,K),M.__maxMipLevel=0;b(y,ht)&&_($,y,K.width,K.height),M.__version=y.version,y.onUpdate&&y.onUpdate(y)}function it(M,y,G){if(y.image.length!==6)return;rt(M,y),e.activeTexture(33984+G),e.bindTexture(34067,M.__webglTexture),n.pixelStorei(37440,y.flipY),n.pixelStorei(37441,y.premultiplyAlpha),n.pixelStorei(3317,y.unpackAlignment),n.pixelStorei(37443,0);const $=y&&(y.isCompressedTexture||y.image[0].isCompressedTexture),P=y.image[0]&&y.image[0].isDataTexture,K=[];for(let Z=0;Z<6;Z++)!$&&!P?K[Z]=x(y.image[Z],!1,!0,c):K[Z]=P?y.image[Z].image:y.image[Z];const ht=K[0],gt=m(ht)||a,ct=s.convert(y.format),ut=s.convert(y.type),U=w(y.internalFormat,ct,ut,y.encoding);pt(34067,y,gt);let dt;if($){for(let Z=0;Z<6;Z++){dt=K[Z].mipmaps;for(let xt=0;xt<dt.length;xt++){const z=dt[xt];y.format!==Ye&&y.format!==Fr?ct!==null?e.compressedTexImage2D(34069+Z,xt,U,z.width,z.height,0,z.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):e.texImage2D(34069+Z,xt,U,z.width,z.height,0,ct,ut,z.data)}}M.__maxMipLevel=dt.length-1}else{dt=y.mipmaps;for(let Z=0;Z<6;Z++)if(P){e.texImage2D(34069+Z,0,U,K[Z].width,K[Z].height,0,ct,ut,K[Z].data);for(let xt=0;xt<dt.length;xt++){const Mt=dt[xt].image[Z].image;e.texImage2D(34069+Z,xt+1,U,Mt.width,Mt.height,0,ct,ut,Mt.data)}}else{e.texImage2D(34069+Z,0,U,ct,ut,K[Z]);for(let xt=0;xt<dt.length;xt++){const z=dt[xt];e.texImage2D(34069+Z,xt+1,U,ct,ut,z.image[Z])}}M.__maxMipLevel=dt.length}b(y,gt)&&_(34067,y,ht.width,ht.height),M.__version=y.version,y.onUpdate&&y.onUpdate(y)}function vt(M,y,G,$,P){const K=s.convert(G.format),ht=s.convert(G.type),gt=w(G.internalFormat,K,ht,G.encoding);P===32879||P===35866?e.texImage3D(P,0,gt,y.width,y.height,y.depth,0,K,ht,null):e.texImage2D(P,0,gt,y.width,y.height,0,K,ht,null),e.bindFramebuffer(36160,M),n.framebufferTexture2D(36160,$,P,i.get(G).__webglTexture,0),e.bindFramebuffer(36160,null)}function Y(M,y,G){if(n.bindRenderbuffer(36161,M),y.depthBuffer&&!y.stencilBuffer){let $=33189;if(G){const P=y.depthTexture;P&&P.isDepthTexture&&(P.type===Ei?$=36012:P.type===wa&&($=33190));const K=At(y);n.renderbufferStorageMultisample(36161,K,$,y.width,y.height)}else n.renderbufferStorage(36161,$,y.width,y.height);n.framebufferRenderbuffer(36160,36096,36161,M)}else if(y.depthBuffer&&y.stencilBuffer){if(G){const $=At(y);n.renderbufferStorageMultisample(36161,$,35056,y.width,y.height)}else n.renderbufferStorage(36161,34041,y.width,y.height);n.framebufferRenderbuffer(36160,33306,36161,M)}else{const $=y.isWebGLMultipleRenderTargets===!0?y.texture[0]:y.texture,P=s.convert($.format),K=s.convert($.type),ht=w($.internalFormat,P,K,$.encoding);if(G){const gt=At(y);n.renderbufferStorageMultisample(36161,gt,ht,y.width,y.height)}else n.renderbufferStorage(36161,ht,y.width,y.height)}n.bindRenderbuffer(36161,null)}function st(M,y){if(y&&y.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(e.bindFramebuffer(36160,M),!(y.depthTexture&&y.depthTexture.isDepthTexture))throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");(!i.get(y.depthTexture).__webglTexture||y.depthTexture.image.width!==y.width||y.depthTexture.image.height!==y.height)&&(y.depthTexture.image.width=y.width,y.depthTexture.image.height=y.height,y.depthTexture.needsUpdate=!0),N(y.depthTexture,0);const $=i.get(y.depthTexture).__webglTexture;if(y.depthTexture.format===Br)n.framebufferTexture2D(36160,36096,3553,$,0);else if(y.depthTexture.format===uo)n.framebufferTexture2D(36160,33306,3553,$,0);else throw new Error("Unknown depthTexture format")}function _t(M){const y=i.get(M),G=M.isWebGLCubeRenderTarget===!0;if(M.depthTexture){if(G)throw new Error("target.depthTexture not supported in Cube render targets");st(y.__webglFramebuffer,M)}else if(G){y.__webglDepthbuffer=[];for(let $=0;$<6;$++)e.bindFramebuffer(36160,y.__webglFramebuffer[$]),y.__webglDepthbuffer[$]=n.createRenderbuffer(),Y(y.__webglDepthbuffer[$],M,!1)}else e.bindFramebuffer(36160,y.__webglFramebuffer),y.__webglDepthbuffer=n.createRenderbuffer(),Y(y.__webglDepthbuffer,M,!1);e.bindFramebuffer(36160,null)}function Lt(M){const y=M.texture,G=i.get(M),$=i.get(y);M.addEventListener("dispose",R),M.isWebGLMultipleRenderTargets!==!0&&($.__webglTexture=n.createTexture(),$.__version=y.version,o.memory.textures++);const P=M.isWebGLCubeRenderTarget===!0,K=M.isWebGLMultipleRenderTargets===!0,ht=M.isWebGLMultisampleRenderTarget===!0,gt=y.isDataTexture3D||y.isDataTexture2DArray,ct=m(M)||a;if(a&&y.format===Fr&&(y.type===Ei||y.type===Nr)&&(y.format=Ye,console.warn("THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.")),P){G.__webglFramebuffer=[];for(let ut=0;ut<6;ut++)G.__webglFramebuffer[ut]=n.createFramebuffer()}else if(G.__webglFramebuffer=n.createFramebuffer(),K)if(r.drawBuffers){const ut=M.texture;for(let U=0,dt=ut.length;U<dt;U++){const Z=i.get(ut[U]);Z.__webglTexture===void 0&&(Z.__webglTexture=n.createTexture(),o.memory.textures++)}}else console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");else if(ht)if(a){G.__webglMultisampledFramebuffer=n.createFramebuffer(),G.__webglColorRenderbuffer=n.createRenderbuffer(),n.bindRenderbuffer(36161,G.__webglColorRenderbuffer);const ut=s.convert(y.format),U=s.convert(y.type),dt=w(y.internalFormat,ut,U,y.encoding),Z=At(M);n.renderbufferStorageMultisample(36161,Z,dt,M.width,M.height),e.bindFramebuffer(36160,G.__webglMultisampledFramebuffer),n.framebufferRenderbuffer(36160,36064,36161,G.__webglColorRenderbuffer),n.bindRenderbuffer(36161,null),M.depthBuffer&&(G.__webglDepthRenderbuffer=n.createRenderbuffer(),Y(G.__webglDepthRenderbuffer,M,!0)),e.bindFramebuffer(36160,null)}else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");if(P){e.bindTexture(34067,$.__webglTexture),pt(34067,y,ct);for(let ut=0;ut<6;ut++)vt(G.__webglFramebuffer[ut],M,y,36064,34069+ut);b(y,ct)&&_(34067,y,M.width,M.height),e.unbindTexture()}else if(K){const ut=M.texture;for(let U=0,dt=ut.length;U<dt;U++){const Z=ut[U],xt=i.get(Z);e.bindTexture(3553,xt.__webglTexture),pt(3553,Z,ct),vt(G.__webglFramebuffer,M,Z,36064+U,3553),b(Z,ct)&&_(3553,Z,M.width,M.height)}e.unbindTexture()}else{let ut=3553;gt&&(a?ut=y.isDataTexture3D?32879:35866:console.warn("THREE.DataTexture3D and THREE.DataTexture2DArray only supported with WebGL2.")),e.bindTexture(ut,$.__webglTexture),pt(ut,y,ct),vt(G.__webglFramebuffer,M,y,36064,ut),b(y,ct)&&_(ut,y,M.width,M.height,M.depth),e.unbindTexture()}M.depthBuffer&&_t(M)}function yt(M){const y=m(M)||a,G=M.isWebGLMultipleRenderTargets===!0?M.texture:[M.texture];for(let $=0,P=G.length;$<P;$++){const K=G[$];if(b(K,y)){const ht=M.isWebGLCubeRenderTarget?34067:3553,gt=i.get(K).__webglTexture;e.bindTexture(ht,gt),_(ht,K,M.width,M.height),e.unbindTexture()}}}function St(M){if(M.isWebGLMultisampleRenderTarget)if(a){const y=M.width,G=M.height;let $=16384;M.depthBuffer&&($|=256),M.stencilBuffer&&($|=1024);const P=i.get(M);e.bindFramebuffer(36008,P.__webglMultisampledFramebuffer),e.bindFramebuffer(36009,P.__webglFramebuffer),n.blitFramebuffer(0,0,y,G,0,0,y,G,$,9728),e.bindFramebuffer(36008,null),e.bindFramebuffer(36009,P.__webglMultisampledFramebuffer)}else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.")}function At(M){return a&&M.isWebGLMultisampleRenderTarget?Math.min(u,M.samples):0}function V(M){const y=o.render.frame;d.get(M)!==y&&(d.set(M,y),M.update())}let X=!1,Q=!1;function mt(M,y){M&&M.isWebGLRenderTarget&&(X===!1&&(console.warn("THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead."),X=!0),M=M.texture),N(M,y)}function et(M,y){M&&M.isWebGLCubeRenderTarget&&(Q===!1&&(console.warn("THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead."),Q=!0),M=M.texture),F(M,y)}this.allocateTextureUnit=I,this.resetTextureUnits=k,this.setTexture2D=N,this.setTexture2DArray=C,this.setTexture3D=L,this.setTextureCube=F,this.setupRenderTarget=Lt,this.updateRenderTargetMipmap=yt,this.updateMultisampleRenderTarget=St,this.safeSetTexture2D=mt,this.safeSetTextureCube=et}function mM(n,t,e){const i=e.isWebGL2;function r(s){let o;if(s===Si)return 5121;if(s===zv)return 32819;if(s===Uv)return 32820;if(s===Hv)return 33635;if(s===Fv)return 5120;if(s===Bv)return 5122;if(s===Ma)return 5123;if(s===Ov)return 5124;if(s===wa)return 5125;if(s===Ei)return 5126;if(s===Nr)return i?5131:(o=t.get("OES_texture_half_float"),o!==null?o.HALF_FLOAT_OES:null);if(s===Gv)return 6406;if(s===Fr)return 6407;if(s===Ye)return 6408;if(s===kv)return 6409;if(s===Vv)return 6410;if(s===Br)return 6402;if(s===uo)return 34041;if(s===$v)return 6403;if(s===qv)return 36244;if(s===jv)return 33319;if(s===Xv)return 33320;if(s===Yv)return 36248;if(s===Zv)return 36249;if(s===Sd||s===Ed||s===Td||s===Ad)if(o=t.get("WEBGL_compressed_texture_s3tc"),o!==null){if(s===Sd)return o.COMPRESSED_RGB_S3TC_DXT1_EXT;if(s===Ed)return o.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(s===Td)return o.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(s===Ad)return o.COMPRESSED_RGBA_S3TC_DXT5_EXT}else return null;if(s===Ld||s===Cd||s===Rd||s===Pd)if(o=t.get("WEBGL_compressed_texture_pvrtc"),o!==null){if(s===Ld)return o.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(s===Cd)return o.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(s===Rd)return o.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(s===Pd)return o.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}else return null;if(s===Jv)return o=t.get("WEBGL_compressed_texture_etc1"),o!==null?o.COMPRESSED_RGB_ETC1_WEBGL:null;if((s===Id||s===Dd)&&(o=t.get("WEBGL_compressed_texture_etc"),o!==null)){if(s===Id)return o.COMPRESSED_RGB8_ETC2;if(s===Dd)return o.COMPRESSED_RGBA8_ETC2_EAC}if(s===Qv||s===Kv||s===tx||s===ex||s===nx||s===ix||s===rx||s===sx||s===ox||s===ax||s===lx||s===cx||s===hx||s===ux||s===fx||s===px||s===mx||s===gx||s===vx||s===xx||s===yx||s===_x||s===bx||s===Mx||s===wx||s===Sx||s===Ex||s===Tx)return o=t.get("WEBGL_compressed_texture_astc"),o!==null?s:null;if(s===dx)return o=t.get("EXT_texture_compression_bptc"),o!==null?s:null;if(s===ho)return i?34042:(o=t.get("WEBGL_depth_texture"),o!==null?o.UNSIGNED_INT_24_8_WEBGL:null)}return{convert:r}}class Gf extends en{constructor(t=[]){super();this.cameras=t}}Gf.prototype.isArrayCamera=!0;class bo extends ne{constructor(){super();this.type="Group"}}bo.prototype.isGroup=!0;const gM={type:"move"};class fh{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return this._hand===null&&(this._hand=new bo,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return this._targetRay===null&&(this._targetRay=new bo,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new O,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new O),this._targetRay}getGripSpace(){return this._grip===null&&(this._grip=new bo,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new O,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new O),this._grip}dispatchEvent(t){return this._targetRay!==null&&this._targetRay.dispatchEvent(t),this._grip!==null&&this._grip.dispatchEvent(t),this._hand!==null&&this._hand.dispatchEvent(t),this}disconnect(t){return this.dispatchEvent({type:"disconnected",data:t}),this._targetRay!==null&&(this._targetRay.visible=!1),this._grip!==null&&(this._grip.visible=!1),this._hand!==null&&(this._hand.visible=!1),this}update(t,e,i){let r=null,s=null,o=null;const a=this._targetRay,l=this._grip,c=this._hand;if(t&&e.session.visibilityState!=="visible-blurred")if(a!==null&&(r=e.getPose(t.targetRaySpace,i),r!==null&&(a.matrix.fromArray(r.transform.matrix),a.matrix.decompose(a.position,a.rotation,a.scale),r.linearVelocity?(a.hasLinearVelocity=!0,a.linearVelocity.copy(r.linearVelocity)):a.hasLinearVelocity=!1,r.angularVelocity?(a.hasAngularVelocity=!0,a.angularVelocity.copy(r.angularVelocity)):a.hasAngularVelocity=!1,this.dispatchEvent(gM))),c&&t.hand){o=!0;for(const v of t.hand.values()){const x=e.getJointPose(v,i);if(c.joints[v.jointName]===void 0){const p=new bo;p.matrixAutoUpdate=!1,p.visible=!1,c.joints[v.jointName]=p,c.add(p)}const m=c.joints[v.jointName];x!==null&&(m.matrix.fromArray(x.transform.matrix),m.matrix.decompose(m.position,m.rotation,m.scale),m.jointRadius=x.radius),m.visible=x!==null}const h=c.joints["index-finger-tip"],u=c.joints["thumb-tip"],d=h.position.distanceTo(u.position),f=.02,g=.005;c.inputState.pinching&&d>f+g?(c.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:t.handedness,target:this})):!c.inputState.pinching&&d<=f-g&&(c.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:t.handedness,target:this}))}else l!==null&&t.gripSpace&&(s=e.getPose(t.gripSpace,i),s!==null&&(l.matrix.fromArray(s.transform.matrix),l.matrix.decompose(l.position,l.rotation,l.scale),s.linearVelocity?(l.hasLinearVelocity=!0,l.linearVelocity.copy(s.linearVelocity)):l.hasLinearVelocity=!1,s.angularVelocity?(l.hasAngularVelocity=!0,l.angularVelocity.copy(s.angularVelocity)):l.hasAngularVelocity=!1));return a!==null&&(a.visible=r!==null),l!==null&&(l.visible=s!==null),c!==null&&(c.visible=o!==null),this}}class vM extends Ti{constructor(t,e){super();const i=this,r=t.state;let s=null,o=1,a=null,l="local-floor",c=null,h=null,u=null,d=null,f=null,g=!1,v=null,x=null,m=null,p=null,b=null,_=null;const w=[],E=new Map,S=new en;S.layers.enable(1),S.viewport=new oe;const R=new en;R.layers.enable(2),R.viewport=new oe;const W=[S,R],B=new Gf;B.layers.enable(1),B.layers.enable(2);let T=null,k=null;this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(it){let vt=w[it];return vt===void 0&&(vt=new fh,w[it]=vt),vt.getTargetRaySpace()},this.getControllerGrip=function(it){let vt=w[it];return vt===void 0&&(vt=new fh,w[it]=vt),vt.getGripSpace()},this.getHand=function(it){let vt=w[it];return vt===void 0&&(vt=new fh,w[it]=vt),vt.getHandSpace()};function I(it){const vt=E.get(it.inputSource);vt&&vt.dispatchEvent({type:it.type,data:it.inputSource})}function N(){E.forEach(function(it,vt){it.disconnect(vt)}),E.clear(),T=null,k=null,r.bindXRFramebuffer(null),t.setRenderTarget(t.getRenderTarget()),u&&e.deleteFramebuffer(u),v&&e.deleteFramebuffer(v),x&&e.deleteRenderbuffer(x),m&&e.deleteRenderbuffer(m),u=null,v=null,x=null,m=null,f=null,d=null,h=null,s=null,Et.stop(),i.isPresenting=!1,i.dispatchEvent({type:"sessionend"})}this.setFramebufferScaleFactor=function(it){o=it,i.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(it){l=it,i.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return a},this.getBaseLayer=function(){return d!==null?d:f},this.getBinding=function(){return h},this.getFrame=function(){return p},this.getSession=function(){return s},this.setSession=async function(it){if(s=it,s!==null){s.addEventListener("select",I),s.addEventListener("selectstart",I),s.addEventListener("selectend",I),s.addEventListener("squeeze",I),s.addEventListener("squeezestart",I),s.addEventListener("squeezeend",I),s.addEventListener("end",N),s.addEventListener("inputsourceschange",C);const vt=e.getContextAttributes();if(vt.xrCompatible!==!0&&await e.makeXRCompatible(),s.renderState.layers===void 0){const Y={antialias:vt.antialias,alpha:vt.alpha,depth:vt.depth,stencil:vt.stencil,framebufferScaleFactor:o};f=new XRWebGLLayer(s,e,Y),s.updateRenderState({baseLayer:f})}else if(e instanceof WebGLRenderingContext){const Y={antialias:!0,alpha:vt.alpha,depth:vt.depth,stencil:vt.stencil,framebufferScaleFactor:o};f=new XRWebGLLayer(s,e,Y),s.updateRenderState({layers:[f]})}else{g=vt.antialias;let Y=null;vt.depth&&(_=256,vt.stencil&&(_|=1024),b=vt.stencil?33306:36096,Y=vt.stencil?35056:33190);const st={colorFormat:vt.alpha?32856:32849,depthFormat:Y,scaleFactor:o};h=new XRWebGLBinding(s,e),d=h.createProjectionLayer(st),u=e.createFramebuffer(),s.updateRenderState({layers:[d]}),g&&(v=e.createFramebuffer(),x=e.createRenderbuffer(),e.bindRenderbuffer(36161,x),e.renderbufferStorageMultisample(36161,4,32856,d.textureWidth,d.textureHeight),r.bindFramebuffer(36160,v),e.framebufferRenderbuffer(36160,36064,36161,x),e.bindRenderbuffer(36161,null),Y!==null&&(m=e.createRenderbuffer(),e.bindRenderbuffer(36161,m),e.renderbufferStorageMultisample(36161,4,Y,d.textureWidth,d.textureHeight),e.framebufferRenderbuffer(36160,b,36161,m),e.bindRenderbuffer(36161,null)),r.bindFramebuffer(36160,null))}a=await s.requestReferenceSpace(l),Et.setContext(s),Et.start(),i.isPresenting=!0,i.dispatchEvent({type:"sessionstart"})}};function C(it){const vt=s.inputSources;for(let Y=0;Y<w.length;Y++)E.set(vt[Y],w[Y]);for(let Y=0;Y<it.removed.length;Y++){const st=it.removed[Y],_t=E.get(st);_t&&(_t.dispatchEvent({type:"disconnected",data:st}),E.delete(st))}for(let Y=0;Y<it.added.length;Y++){const st=it.added[Y],_t=E.get(st);_t&&_t.dispatchEvent({type:"connected",data:st})}}const L=new O,F=new O;function q(it,vt,Y){L.setFromMatrixPosition(vt.matrixWorld),F.setFromMatrixPosition(Y.matrixWorld);const st=L.distanceTo(F),_t=vt.projectionMatrix.elements,Lt=Y.projectionMatrix.elements,yt=_t[14]/(_t[10]-1),St=_t[14]/(_t[10]+1),At=(_t[9]+1)/_t[5],V=(_t[9]-1)/_t[5],X=(_t[8]-1)/_t[0],Q=(Lt[8]+1)/Lt[0],mt=yt*X,et=yt*Q,M=st/(-X+Q),y=M*-X;vt.matrixWorld.decompose(it.position,it.quaternion,it.scale),it.translateX(y),it.translateZ(M),it.matrixWorld.compose(it.position,it.quaternion,it.scale),it.matrixWorldInverse.copy(it.matrixWorld).invert();const G=yt+M,$=St+M,P=mt-y,K=et+(st-y),ht=At*St/$*G,gt=V*St/$*G;it.projectionMatrix.makePerspective(P,K,ht,gt,G,$)}function ot(it,vt){vt===null?it.matrixWorld.copy(it.matrix):it.matrixWorld.multiplyMatrices(vt.matrixWorld,it.matrix),it.matrixWorldInverse.copy(it.matrixWorld).invert()}this.updateCamera=function(it){if(s===null)return;B.near=R.near=S.near=it.near,B.far=R.far=S.far=it.far,(T!==B.near||k!==B.far)&&(s.updateRenderState({depthNear:B.near,depthFar:B.far}),T=B.near,k=B.far);const vt=it.parent,Y=B.cameras;ot(B,vt);for(let _t=0;_t<Y.length;_t++)ot(Y[_t],vt);B.matrixWorld.decompose(B.position,B.quaternion,B.scale),it.position.copy(B.position),it.quaternion.copy(B.quaternion),it.scale.copy(B.scale),it.matrix.copy(B.matrix),it.matrixWorld.copy(B.matrixWorld);const st=it.children;for(let _t=0,Lt=st.length;_t<Lt;_t++)st[_t].updateMatrixWorld(!0);Y.length===2?q(B,S,R):B.projectionMatrix.copy(S.projectionMatrix)},this.getCamera=function(){return B},this.getFoveation=function(){if(d!==null)return d.fixedFoveation;if(f!==null)return f.fixedFoveation},this.setFoveation=function(it){d!==null&&(d.fixedFoveation=it),f!==null&&f.fixedFoveation!==void 0&&(f.fixedFoveation=it)};let pt=null;function rt(it,vt){if(c=vt.getViewerPose(a),p=vt,c!==null){const st=c.views;f!==null&&r.bindXRFramebuffer(f.framebuffer);let _t=!1;st.length!==B.cameras.length&&(B.cameras.length=0,_t=!0);for(let Lt=0;Lt<st.length;Lt++){const yt=st[Lt];let St=null;if(f!==null)St=f.getViewport(yt);else{const V=h.getViewSubImage(d,yt);r.bindXRFramebuffer(u),V.depthStencilTexture!==void 0&&e.framebufferTexture2D(36160,b,3553,V.depthStencilTexture,0),e.framebufferTexture2D(36160,36064,3553,V.colorTexture,0),St=V.viewport}const At=W[Lt];At.matrix.fromArray(yt.transform.matrix),At.projectionMatrix.fromArray(yt.projectionMatrix),At.viewport.set(St.x,St.y,St.width,St.height),Lt===0&&B.matrix.copy(At.matrix),_t===!0&&B.cameras.push(At)}g&&(r.bindXRFramebuffer(v),_!==null&&e.clear(_))}const Y=s.inputSources;for(let st=0;st<w.length;st++){const _t=w[st],Lt=Y[st];_t.update(Lt,vt,a)}if(pt&&pt(it,vt),g){const st=d.textureWidth,_t=d.textureHeight;r.bindFramebuffer(36008,v),r.bindFramebuffer(36009,u),e.invalidateFramebuffer(36008,[b]),e.invalidateFramebuffer(36009,[b]),e.blitFramebuffer(0,0,st,_t,0,0,st,_t,16384,9728),e.invalidateFramebuffer(36008,[36064]),r.bindFramebuffer(36008,null),r.bindFramebuffer(36009,null),r.bindFramebuffer(36160,v)}p=null}const Et=new sf;Et.setAnimationLoop(rt),this.setAnimationLoop=function(it){pt=it},this.dispose=function(){}}}function xM(n){function t(m,p){m.fogColor.value.copy(p.color),p.isFog?(m.fogNear.value=p.near,m.fogFar.value=p.far):p.isFogExp2&&(m.fogDensity.value=p.density)}function e(m,p,b,_,w){p.isMeshBasicMaterial?i(m,p):p.isMeshLambertMaterial?(i(m,p),l(m,p)):p.isMeshToonMaterial?(i(m,p),h(m,p)):p.isMeshPhongMaterial?(i(m,p),c(m,p)):p.isMeshStandardMaterial?(i(m,p),p.isMeshPhysicalMaterial?d(m,p,w):u(m,p)):p.isMeshMatcapMaterial?(i(m,p),f(m,p)):p.isMeshDepthMaterial?(i(m,p),g(m,p)):p.isMeshDistanceMaterial?(i(m,p),v(m,p)):p.isMeshNormalMaterial?(i(m,p),x(m,p)):p.isLineBasicMaterial?(r(m,p),p.isLineDashedMaterial&&s(m,p)):p.isPointsMaterial?o(m,p,b,_):p.isSpriteMaterial?a(m,p):p.isShadowMaterial?(m.color.value.copy(p.color),m.opacity.value=p.opacity):p.isShaderMaterial&&(p.uniformsNeedUpdate=!1)}function i(m,p){m.opacity.value=p.opacity,p.color&&m.diffuse.value.copy(p.color),p.emissive&&m.emissive.value.copy(p.emissive).multiplyScalar(p.emissiveIntensity),p.map&&(m.map.value=p.map),p.alphaMap&&(m.alphaMap.value=p.alphaMap),p.specularMap&&(m.specularMap.value=p.specularMap),p.alphaTest>0&&(m.alphaTest.value=p.alphaTest);const b=n.get(p).envMap;if(b){m.envMap.value=b,m.flipEnvMap.value=b.isCubeTexture&&b.isRenderTargetTexture===!1?-1:1,m.reflectivity.value=p.reflectivity,m.ior.value=p.ior,m.refractionRatio.value=p.refractionRatio;const E=n.get(b).__maxMipLevel;E!==void 0&&(m.maxMipLevel.value=E)}p.lightMap&&(m.lightMap.value=p.lightMap,m.lightMapIntensity.value=p.lightMapIntensity),p.aoMap&&(m.aoMap.value=p.aoMap,m.aoMapIntensity.value=p.aoMapIntensity);let _;p.map?_=p.map:p.specularMap?_=p.specularMap:p.displacementMap?_=p.displacementMap:p.normalMap?_=p.normalMap:p.bumpMap?_=p.bumpMap:p.roughnessMap?_=p.roughnessMap:p.metalnessMap?_=p.metalnessMap:p.alphaMap?_=p.alphaMap:p.emissiveMap?_=p.emissiveMap:p.clearcoatMap?_=p.clearcoatMap:p.clearcoatNormalMap?_=p.clearcoatNormalMap:p.clearcoatRoughnessMap?_=p.clearcoatRoughnessMap:p.specularIntensityMap?_=p.specularIntensityMap:p.specularColorMap?_=p.specularColorMap:p.transmissionMap?_=p.transmissionMap:p.thicknessMap?_=p.thicknessMap:p.sheenColorMap?_=p.sheenColorMap:p.sheenRoughnessMap&&(_=p.sheenRoughnessMap),_!==void 0&&(_.isWebGLRenderTarget&&(_=_.texture),_.matrixAutoUpdate===!0&&_.updateMatrix(),m.uvTransform.value.copy(_.matrix));let w;p.aoMap?w=p.aoMap:p.lightMap&&(w=p.lightMap),w!==void 0&&(w.isWebGLRenderTarget&&(w=w.texture),w.matrixAutoUpdate===!0&&w.updateMatrix(),m.uv2Transform.value.copy(w.matrix))}function r(m,p){m.diffuse.value.copy(p.color),m.opacity.value=p.opacity}function s(m,p){m.dashSize.value=p.dashSize,m.totalSize.value=p.dashSize+p.gapSize,m.scale.value=p.scale}function o(m,p,b,_){m.diffuse.value.copy(p.color),m.opacity.value=p.opacity,m.size.value=p.size*b,m.scale.value=_*.5,p.map&&(m.map.value=p.map),p.alphaMap&&(m.alphaMap.value=p.alphaMap),p.alphaTest>0&&(m.alphaTest.value=p.alphaTest);let w;p.map?w=p.map:p.alphaMap&&(w=p.alphaMap),w!==void 0&&(w.matrixAutoUpdate===!0&&w.updateMatrix(),m.uvTransform.value.copy(w.matrix))}function a(m,p){m.diffuse.value.copy(p.color),m.opacity.value=p.opacity,m.rotation.value=p.rotation,p.map&&(m.map.value=p.map),p.alphaMap&&(m.alphaMap.value=p.alphaMap),p.alphaTest>0&&(m.alphaTest.value=p.alphaTest);let b;p.map?b=p.map:p.alphaMap&&(b=p.alphaMap),b!==void 0&&(b.matrixAutoUpdate===!0&&b.updateMatrix(),m.uvTransform.value.copy(b.matrix))}function l(m,p){p.emissiveMap&&(m.emissiveMap.value=p.emissiveMap)}function c(m,p){m.specular.value.copy(p.specular),m.shininess.value=Math.max(p.shininess,1e-4),p.emissiveMap&&(m.emissiveMap.value=p.emissiveMap),p.bumpMap&&(m.bumpMap.value=p.bumpMap,m.bumpScale.value=p.bumpScale,p.side===Ee&&(m.bumpScale.value*=-1)),p.normalMap&&(m.normalMap.value=p.normalMap,m.normalScale.value.copy(p.normalScale),p.side===Ee&&m.normalScale.value.negate()),p.displacementMap&&(m.displacementMap.value=p.displacementMap,m.displacementScale.value=p.displacementScale,m.displacementBias.value=p.displacementBias)}function h(m,p){p.gradientMap&&(m.gradientMap.value=p.gradientMap),p.emissiveMap&&(m.emissiveMap.value=p.emissiveMap),p.bumpMap&&(m.bumpMap.value=p.bumpMap,m.bumpScale.value=p.bumpScale,p.side===Ee&&(m.bumpScale.value*=-1)),p.normalMap&&(m.normalMap.value=p.normalMap,m.normalScale.value.copy(p.normalScale),p.side===Ee&&m.normalScale.value.negate()),p.displacementMap&&(m.displacementMap.value=p.displacementMap,m.displacementScale.value=p.displacementScale,m.displacementBias.value=p.displacementBias)}function u(m,p){m.roughness.value=p.roughness,m.metalness.value=p.metalness,p.roughnessMap&&(m.roughnessMap.value=p.roughnessMap),p.metalnessMap&&(m.metalnessMap.value=p.metalnessMap),p.emissiveMap&&(m.emissiveMap.value=p.emissiveMap),p.bumpMap&&(m.bumpMap.value=p.bumpMap,m.bumpScale.value=p.bumpScale,p.side===Ee&&(m.bumpScale.value*=-1)),p.normalMap&&(m.normalMap.value=p.normalMap,m.normalScale.value.copy(p.normalScale),p.side===Ee&&m.normalScale.value.negate()),p.displacementMap&&(m.displacementMap.value=p.displacementMap,m.displacementScale.value=p.displacementScale,m.displacementBias.value=p.displacementBias),n.get(p).envMap&&(m.envMapIntensity.value=p.envMapIntensity)}function d(m,p,b){u(m,p),m.ior.value=p.ior,p.sheen>0&&(m.sheenColor.value.copy(p.sheenColor).multiplyScalar(p.sheen),m.sheenRoughness.value=p.sheenRoughness,p.sheenColorMap&&(m.sheenColorMap.value=p.sheenColorMap),p.sheenRoughnessMap&&(m.sheenRoughnessMap.value=p.sheenRoughnessMap)),p.clearcoat>0&&(m.clearcoat.value=p.clearcoat,m.clearcoatRoughness.value=p.clearcoatRoughness,p.clearcoatMap&&(m.clearcoatMap.value=p.clearcoatMap),p.clearcoatRoughnessMap&&(m.clearcoatRoughnessMap.value=p.clearcoatRoughnessMap),p.clearcoatNormalMap&&(m.clearcoatNormalScale.value.copy(p.clearcoatNormalScale),m.clearcoatNormalMap.value=p.clearcoatNormalMap,p.side===Ee&&m.clearcoatNormalScale.value.negate())),p.transmission>0&&(m.transmission.value=p.transmission,m.transmissionSamplerMap.value=b.texture,m.transmissionSamplerSize.value.set(b.width,b.height),p.transmissionMap&&(m.transmissionMap.value=p.transmissionMap),m.thickness.value=p.thickness,p.thicknessMap&&(m.thicknessMap.value=p.thicknessMap),m.attenuationDistance.value=p.attenuationDistance,m.attenuationColor.value.copy(p.attenuationColor)),m.specularIntensity.value=p.specularIntensity,m.specularColor.value.copy(p.specularColor),p.specularIntensityMap&&(m.specularIntensityMap.value=p.specularIntensityMap),p.specularColorMap&&(m.specularColorMap.value=p.specularColorMap)}function f(m,p){p.matcap&&(m.matcap.value=p.matcap),p.bumpMap&&(m.bumpMap.value=p.bumpMap,m.bumpScale.value=p.bumpScale,p.side===Ee&&(m.bumpScale.value*=-1)),p.normalMap&&(m.normalMap.value=p.normalMap,m.normalScale.value.copy(p.normalScale),p.side===Ee&&m.normalScale.value.negate()),p.displacementMap&&(m.displacementMap.value=p.displacementMap,m.displacementScale.value=p.displacementScale,m.displacementBias.value=p.displacementBias)}function g(m,p){p.displacementMap&&(m.displacementMap.value=p.displacementMap,m.displacementScale.value=p.displacementScale,m.displacementBias.value=p.displacementBias)}function v(m,p){p.displacementMap&&(m.displacementMap.value=p.displacementMap,m.displacementScale.value=p.displacementScale,m.displacementBias.value=p.displacementBias),m.referencePosition.value.copy(p.referencePosition),m.nearDistance.value=p.nearDistance,m.farDistance.value=p.farDistance}function x(m,p){p.bumpMap&&(m.bumpMap.value=p.bumpMap,m.bumpScale.value=p.bumpScale,p.side===Ee&&(m.bumpScale.value*=-1)),p.normalMap&&(m.normalMap.value=p.normalMap,m.normalScale.value.copy(p.normalScale),p.side===Ee&&m.normalScale.value.negate()),p.displacementMap&&(m.displacementMap.value=p.displacementMap,m.displacementScale.value=p.displacementScale,m.displacementBias.value=p.displacementBias)}return{refreshFogUniforms:t,refreshMaterialUniforms:e}}function yM(){const n=La("canvas");return n.style.display="block",n}function se(n={}){const t=n.canvas!==void 0?n.canvas:yM(),e=n.context!==void 0?n.context:null,i=n.alpha!==void 0?n.alpha:!1,r=n.depth!==void 0?n.depth:!0,s=n.stencil!==void 0?n.stencil:!0,o=n.antialias!==void 0?n.antialias:!1,a=n.premultipliedAlpha!==void 0?n.premultipliedAlpha:!0,l=n.preserveDrawingBuffer!==void 0?n.preserveDrawingBuffer:!1,c=n.powerPreference!==void 0?n.powerPreference:"default",h=n.failIfMajorPerformanceCaveat!==void 0?n.failIfMajorPerformanceCaveat:!1;let u=null,d=null;const f=[],g=[];this.domElement=t,this.debug={checkShaderErrors:!0},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.gammaFactor=2,this.outputEncoding=ze,this.physicallyCorrectLights=!1,this.toneMapping=ar,this.toneMappingExposure=1;const v=this;let x=!1,m=0,p=0,b=null,_=-1,w=null;const E=new oe,S=new oe;let R=null,W=t.width,B=t.height,T=1,k=null,I=null;const N=new oe(0,0,W,B),C=new oe(0,0,W,B);let L=!1;const F=[],q=new ja;let ot=!1,pt=!1,rt=null;const Et=new Ht,it=new O,vt={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};function Y(){return b===null?T:1}let st=e;function _t(A,j){for(let J=0;J<A.length;J++){const tt=A[J],lt=t.getContext(tt,j);if(lt!==null)return lt}return null}try{const A={alpha:i,depth:r,stencil:s,antialias:o,premultipliedAlpha:a,preserveDrawingBuffer:l,powerPreference:c,failIfMajorPerformanceCaveat:h};if(t.addEventListener("webglcontextlost",$t,!1),t.addEventListener("webglcontextrestored",Qt,!1),st===null){const j=["webgl2","webgl","experimental-webgl"];if(v.isWebGL1Renderer===!0&&j.shift(),st=_t(j,A),st===null)throw _t(j)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}st.getShaderPrecisionFormat===void 0&&(st.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(A){throw console.error("THREE.WebGLRenderer: "+A.message),A}let Lt,yt,St,At,V,X,Q,mt,et,M,y,G,$,P,K,ht,gt,ct,ut,U,dt,Z,xt;function z(){Lt=new k0(st),yt=new N0(st,Lt,n),Lt.init(yt),Z=new mM(st,Lt,yt),St=new fM(st,Lt,yt),F[0]=1029,At=new $0(st),V=new nM,X=new pM(st,Lt,St,V,yt,Z,At),Q=new B0(v),mt=new G0(v),et=new ry(st,yt),xt=new I0(st,Lt,et,yt),M=new V0(st,et,At,xt),y=new Y0(st,M,et,At),ut=new X0(st,yt,X),ht=new F0(V),G=new eM(v,Q,mt,Lt,yt,xt,ht),$=new xM(V),P=new rM(V),K=new hM(Lt,yt),ct=new P0(v,Q,St,y,a),gt=new Hf(v,y,yt),U=new D0(st,Lt,At,yt),dt=new W0(st,Lt,At,yt),At.programs=G.programs,v.capabilities=yt,v.extensions=Lt,v.properties=V,v.renderLists=P,v.shadowMap=gt,v.state=St,v.info=At}z();const Mt=new vM(v,st);this.xr=Mt,this.getContext=function(){return st},this.getContextAttributes=function(){return st.getContextAttributes()},this.forceContextLoss=function(){const A=Lt.get("WEBGL_lose_context");A&&A.loseContext()},this.forceContextRestore=function(){const A=Lt.get("WEBGL_lose_context");A&&A.restoreContext()},this.getPixelRatio=function(){return T},this.setPixelRatio=function(A){A!==void 0&&(T=A,this.setSize(W,B,!1))},this.getSize=function(A){return A.set(W,B)},this.setSize=function(A,j,J){if(Mt.isPresenting){console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");return}W=A,B=j,t.width=Math.floor(A*T),t.height=Math.floor(j*T),J!==!1&&(t.style.width=A+"px",t.style.height=j+"px"),this.setViewport(0,0,A,j)},this.getDrawingBufferSize=function(A){return A.set(W*T,B*T).floor()},this.setDrawingBufferSize=function(A,j,J){W=A,B=j,T=J,t.width=Math.floor(A*J),t.height=Math.floor(j*J),this.setViewport(0,0,A,j)},this.getCurrentViewport=function(A){return A.copy(E)},this.getViewport=function(A){return A.copy(N)},this.setViewport=function(A,j,J,tt){A.isVector4?N.set(A.x,A.y,A.z,A.w):N.set(A,j,J,tt),St.viewport(E.copy(N).multiplyScalar(T).floor())},this.getScissor=function(A){return A.copy(C)},this.setScissor=function(A,j,J,tt){A.isVector4?C.set(A.x,A.y,A.z,A.w):C.set(A,j,J,tt),St.scissor(S.copy(C).multiplyScalar(T).floor())},this.getScissorTest=function(){return L},this.setScissorTest=function(A){St.setScissorTest(L=A)},this.setOpaqueSort=function(A){k=A},this.setTransparentSort=function(A){I=A},this.getClearColor=function(A){return A.copy(ct.getClearColor())},this.setClearColor=function(){ct.setClearColor.apply(ct,arguments)},this.getClearAlpha=function(){return ct.getClearAlpha()},this.setClearAlpha=function(){ct.setClearAlpha.apply(ct,arguments)},this.clear=function(A,j,J){let tt=0;(A===void 0||A)&&(tt|=16384),(j===void 0||j)&&(tt|=256),(J===void 0||J)&&(tt|=1024),st.clear(tt)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){t.removeEventListener("webglcontextlost",$t,!1),t.removeEventListener("webglcontextrestored",Qt,!1),P.dispose(),K.dispose(),V.dispose(),Q.dispose(),mt.dispose(),y.dispose(),xt.dispose(),Mt.dispose(),Mt.removeEventListener("sessionstart",Xe),Mt.removeEventListener("sessionend",no),rt&&(rt.dispose(),rt=null),zn.stop()};function $t(A){A.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),x=!0}function Qt(){console.log("THREE.WebGLRenderer: Context Restored."),x=!1;const A=At.autoReset,j=gt.enabled,J=gt.autoUpdate,tt=gt.needsUpdate,lt=gt.type;z(),At.autoReset=A,gt.enabled=j,gt.autoUpdate=J,gt.needsUpdate=tt,gt.type=lt}function xe(A){const j=A.target;j.removeEventListener("dispose",xe),te(j)}function te(A){Te(A),V.remove(A)}function Te(A){const j=V.get(A).programs;j!==void 0&&j.forEach(function(J){G.releaseProgram(J)})}this.renderBufferDirect=function(A,j,J,tt,lt,Tt){j===null&&(j=vt);const It=lt.isMesh&&lt.matrixWorld.determinant()<0,Nt=ft(A,j,J,tt,lt);St.setMaterial(tt,It);let Dt=J.index;const Xt=J.attributes.position;if(Dt===null){if(Xt===void 0||Xt.count===0)return}else if(Dt.count===0)return;let Bt=1;tt.wireframe===!0&&(Dt=M.getWireframeAttribute(J),Bt=2),xt.setup(lt,tt,Nt,J,Dt);let Kt,Yt=U;Dt!==null&&(Kt=et.get(Dt),Yt=dt,Yt.setIndex(Kt));const sn=Dt!==null?Dt.count:Xt.count,jt=J.drawRange.start*Bt,Sn=J.drawRange.count*Bt,pe=Tt!==null?Tt.start*Bt:0,rr=Tt!==null?Tt.count*Bt:1/0,sr=Math.max(jt,pe),or=Math.min(sn,jt+Sn,pe+rr)-1,Mi=Math.max(0,or-sr+1);if(Mi!==0){if(lt.isMesh)tt.wireframe===!0?(St.setLineWidth(tt.wireframeLinewidth*Y()),Yt.setMode(1)):Yt.setMode(4);else if(lt.isLine){let be=tt.linewidth;be===void 0&&(be=1),St.setLineWidth(be*Y()),lt.isLineSegments?Yt.setMode(1):lt.isLineLoop?Yt.setMode(2):Yt.setMode(3)}else lt.isPoints?Yt.setMode(0):lt.isSprite&&Yt.setMode(4);if(lt.isInstancedMesh)Yt.renderInstances(sr,Mi,lt.count);else if(J.isInstancedBufferGeometry){const be=Math.min(J.instanceCount,J._maxInstanceCount);Yt.renderInstances(sr,Mi,be)}else Yt.render(sr,Mi)}},this.compile=function(A,j){d=K.get(A),d.init(),g.push(d),A.traverseVisible(function(J){J.isLight&&J.layers.test(j.layers)&&(d.pushLight(J),J.castShadow&&d.pushShadow(J))}),d.setupLights(v.physicallyCorrectLights),A.traverse(function(J){const tt=J.material;if(tt)if(Array.isArray(tt))for(let lt=0;lt<tt.length;lt++){const Tt=tt[lt];at(Tt,A,J)}else at(tt,A,J)}),g.pop(),d=null};let Oe=null;function Re(A){Oe&&Oe(A)}function Xe(){zn.stop()}function no(){zn.start()}const zn=new sf;zn.setAnimationLoop(Re),typeof window!="undefined"&&zn.setContext(window),this.setAnimationLoop=function(A){Oe=A,Mt.setAnimationLoop(A),A===null?zn.stop():zn.start()},Mt.addEventListener("sessionstart",Xe),Mt.addEventListener("sessionend",no),this.render=function(A,j){if(j!==void 0&&j.isCamera!==!0){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(x===!0)return;A.autoUpdate===!0&&A.updateMatrixWorld(),j.parent===null&&j.updateMatrixWorld(),Mt.enabled===!0&&Mt.isPresenting===!0&&(Mt.cameraAutoUpdate===!0&&Mt.updateCamera(j),j=Mt.getCamera()),A.isScene===!0&&A.onBeforeRender(v,A,j,b),d=K.get(A,g.length),d.init(),g.push(d),Et.multiplyMatrices(j.projectionMatrix,j.matrixWorldInverse),q.setFromProjectionMatrix(Et),pt=this.localClippingEnabled,ot=ht.init(this.clippingPlanes,pt,j),u=P.get(A,f.length),u.init(),f.push(u),mn(A,j,0,v.sortObjects),u.finish(),v.sortObjects===!0&&u.sort(k,I),ot===!0&&ht.beginShadows();const J=d.state.shadowsArray;if(gt.render(J,A,j),ot===!0&&ht.endShadows(),this.info.autoReset===!0&&this.info.reset(),ct.render(u,A),d.setupLights(v.physicallyCorrectLights),j.isArrayCamera){const tt=j.cameras;for(let lt=0,Tt=tt.length;lt<Tt;lt++){const It=tt[lt];io(u,A,It,It.viewport)}}else io(u,A,j);b!==null&&(X.updateMultisampleRenderTarget(b),X.updateRenderTargetMipmap(b)),A.isScene===!0&&A.onAfterRender(v,A,j),St.buffers.depth.setTest(!0),St.buffers.depth.setMask(!0),St.buffers.color.setMask(!0),St.setPolygonOffset(!1),xt.resetDefaultState(),_=-1,w=null,g.pop(),g.length>0?d=g[g.length-1]:d=null,f.pop(),f.length>0?u=f[f.length-1]:u=null};function mn(A,j,J,tt){if(A.visible===!1)return;if(A.layers.test(j.layers)){if(A.isGroup)J=A.renderOrder;else if(A.isLOD)A.autoUpdate===!0&&A.update(j);else if(A.isLight)d.pushLight(A),A.castShadow&&d.pushShadow(A);else if(A.isSprite){if(!A.frustumCulled||q.intersectsSprite(A)){tt&&it.setFromMatrixPosition(A.matrixWorld).applyMatrix4(Et);const It=y.update(A),Nt=A.material;Nt.visible&&u.push(A,It,Nt,J,it.z,null)}}else if((A.isMesh||A.isLine||A.isPoints)&&(A.isSkinnedMesh&&A.skeleton.frame!==At.render.frame&&(A.skeleton.update(),A.skeleton.frame=At.render.frame),!A.frustumCulled||q.intersectsObject(A))){tt&&it.setFromMatrixPosition(A.matrixWorld).applyMatrix4(Et);const It=y.update(A),Nt=A.material;if(Array.isArray(Nt)){const Dt=It.groups;for(let Xt=0,Bt=Dt.length;Xt<Bt;Xt++){const Kt=Dt[Xt],Yt=Nt[Kt.materialIndex];Yt&&Yt.visible&&u.push(A,It,Yt,J,it.z,Kt)}}else Nt.visible&&u.push(A,It,Nt,J,it.z,null)}}const Tt=A.children;for(let It=0,Nt=Tt.length;It<Nt;It++)mn(Tt[It],j,J,tt)}function io(A,j,J,tt){const lt=A.opaque,Tt=A.transmissive,It=A.transparent;d.setupLightsView(J),Tt.length>0&&vc(lt,j,J),tt&&St.viewport(E.copy(tt)),lt.length>0&&Cr(lt,j,J),Tt.length>0&&Cr(Tt,j,J),It.length>0&&Cr(It,j,J)}function vc(A,j,J){if(rt===null){const It=o===!0&&yt.isWebGL2===!0?kd:Hn;rt=new It(1024,1024,{generateMipmaps:!0,type:Z.convert(Nr)!==null?Nr:Si,minFilter:ba,magFilter:Ae,wrapS:on,wrapT:on})}const tt=v.getRenderTarget();v.setRenderTarget(rt),v.clear();const lt=v.toneMapping;v.toneMapping=ar,Cr(A,j,J),v.toneMapping=lt,X.updateMultisampleRenderTarget(rt),X.updateRenderTargetMipmap(rt),v.setRenderTarget(tt)}function Cr(A,j,J){const tt=j.isScene===!0?j.overrideMaterial:null;for(let lt=0,Tt=A.length;lt<Tt;lt++){const It=A[lt],Nt=It.object,Dt=It.geometry,Xt=tt===null?It.material:tt,Bt=It.group;Nt.layers.test(J.layers)&&D(Nt,j,J,Dt,Xt,Bt)}}function D(A,j,J,tt,lt,Tt){A.onBeforeRender(v,j,J,tt,lt,Tt),A.modelViewMatrix.multiplyMatrices(J.matrixWorldInverse,A.matrixWorld),A.normalMatrix.getNormalMatrix(A.modelViewMatrix),lt.onBeforeRender(v,j,J,tt,A,Tt),lt.transparent===!0&&lt.side===Ir?(lt.side=Ee,lt.needsUpdate=!0,v.renderBufferDirect(J,j,tt,lt,A,Tt),lt.side=oo,lt.needsUpdate=!0,v.renderBufferDirect(J,j,tt,lt,A,Tt),lt.side=Ir):v.renderBufferDirect(J,j,tt,lt,A,Tt),A.onAfterRender(v,j,J,tt,lt,Tt)}function at(A,j,J){j.isScene!==!0&&(j=vt);const tt=V.get(A),lt=d.state.lights,Tt=d.state.shadowsArray,It=lt.state.version,Nt=G.getParameters(A,lt.state,Tt,j,J),Dt=G.getProgramCacheKey(Nt);let Xt=tt.programs;tt.environment=A.isMeshStandardMaterial?j.environment:null,tt.fog=j.fog,tt.envMap=(A.isMeshStandardMaterial?mt:Q).get(A.envMap||tt.environment),Xt===void 0&&(A.addEventListener("dispose",xe),Xt=new Map,tt.programs=Xt);let Bt=Xt.get(Dt);if(Bt!==void 0){if(tt.currentProgram===Bt&&tt.lightsStateVersion===It)return nt(A,Nt),Bt}else Nt.uniforms=G.getUniforms(A),A.onBuild(J,Nt,v),A.onBeforeCompile(Nt,v),Bt=G.acquireProgram(Nt,Dt),Xt.set(Dt,Bt),tt.uniforms=Nt.uniforms;const Kt=tt.uniforms;(!A.isShaderMaterial&&!A.isRawShaderMaterial||A.clipping===!0)&&(Kt.clippingPlanes=ht.uniform),nt(A,Nt),tt.needsLights=qt(A),tt.lightsStateVersion=It,tt.needsLights&&(Kt.ambientLightColor.value=lt.state.ambient,Kt.lightProbe.value=lt.state.probe,Kt.directionalLights.value=lt.state.directional,Kt.directionalLightShadows.value=lt.state.directionalShadow,Kt.spotLights.value=lt.state.spot,Kt.spotLightShadows.value=lt.state.spotShadow,Kt.rectAreaLights.value=lt.state.rectArea,Kt.ltc_1.value=lt.state.rectAreaLTC1,Kt.ltc_2.value=lt.state.rectAreaLTC2,Kt.pointLights.value=lt.state.point,Kt.pointLightShadows.value=lt.state.pointShadow,Kt.hemisphereLights.value=lt.state.hemi,Kt.directionalShadowMap.value=lt.state.directionalShadowMap,Kt.directionalShadowMatrix.value=lt.state.directionalShadowMatrix,Kt.spotShadowMap.value=lt.state.spotShadowMap,Kt.spotShadowMatrix.value=lt.state.spotShadowMatrix,Kt.pointShadowMap.value=lt.state.pointShadowMap,Kt.pointShadowMatrix.value=lt.state.pointShadowMatrix);const Yt=Bt.getUniforms(),sn=Bi.seqWithValue(Yt.seq,Kt);return tt.currentProgram=Bt,tt.uniformsList=sn,Bt}function nt(A,j){const J=V.get(A);J.outputEncoding=j.outputEncoding,J.instancing=j.instancing,J.skinning=j.skinning,J.morphTargets=j.morphTargets,J.morphNormals=j.morphNormals,J.morphTargetsCount=j.morphTargetsCount,J.numClippingPlanes=j.numClippingPlanes,J.numIntersection=j.numClipIntersection,J.vertexAlphas=j.vertexAlphas,J.vertexTangents=j.vertexTangents}function ft(A,j,J,tt,lt){j.isScene!==!0&&(j=vt),X.resetTextureUnits();const Tt=j.fog,It=tt.isMeshStandardMaterial?j.environment:null,Nt=b===null?v.outputEncoding:b.texture.encoding,Dt=(tt.isMeshStandardMaterial?mt:Q).get(tt.envMap||It),Xt=tt.vertexColors===!0&&!!J.attributes.color&&J.attributes.color.itemSize===4,Bt=!!tt.normalMap&&!!J.attributes.tangent,Kt=!!J.morphAttributes.position,Yt=!!J.morphAttributes.normal,sn=J.morphAttributes.position?J.morphAttributes.position.length:0,jt=V.get(tt),Sn=d.state.lights;if(ot===!0&&(pt===!0||A!==w)){const En=A===w&&tt.id===_;ht.setState(tt,A,En)}let pe=!1;tt.version===jt.__version?(jt.needsLights&&jt.lightsStateVersion!==Sn.state.version||jt.outputEncoding!==Nt||lt.isInstancedMesh&&jt.instancing===!1||!lt.isInstancedMesh&&jt.instancing===!0||lt.isSkinnedMesh&&jt.skinning===!1||!lt.isSkinnedMesh&&jt.skinning===!0||jt.envMap!==Dt||tt.fog&&jt.fog!==Tt||jt.numClippingPlanes!==void 0&&(jt.numClippingPlanes!==ht.numPlanes||jt.numIntersection!==ht.numIntersection)||jt.vertexAlphas!==Xt||jt.vertexTangents!==Bt||jt.morphTargets!==Kt||jt.morphNormals!==Yt||yt.isWebGL2===!0&&jt.morphTargetsCount!==sn)&&(pe=!0):(pe=!0,jt.__version=tt.version);let rr=jt.currentProgram;pe===!0&&(rr=at(tt,j,lt));let sr=!1,or=!1,Mi=!1;const be=rr.getUniforms(),ro=jt.uniforms;if(St.useProgram(rr.program)&&(sr=!0,or=!0,Mi=!0),tt.id!==_&&(_=tt.id,or=!0),sr||w!==A){if(be.setValue(st,"projectionMatrix",A.projectionMatrix),yt.logarithmicDepthBuffer&&be.setValue(st,"logDepthBufFC",2/(Math.log(A.far+1)/Math.LN2)),w!==A&&(w=A,or=!0,Mi=!0),tt.isShaderMaterial||tt.isMeshPhongMaterial||tt.isMeshToonMaterial||tt.isMeshStandardMaterial||tt.envMap){const En=be.map.cameraPosition;En!==void 0&&En.setValue(st,it.setFromMatrixPosition(A.matrixWorld))}(tt.isMeshPhongMaterial||tt.isMeshToonMaterial||tt.isMeshLambertMaterial||tt.isMeshBasicMaterial||tt.isMeshStandardMaterial||tt.isShaderMaterial)&&be.setValue(st,"isOrthographic",A.isOrthographicCamera===!0),(tt.isMeshPhongMaterial||tt.isMeshToonMaterial||tt.isMeshLambertMaterial||tt.isMeshBasicMaterial||tt.isMeshStandardMaterial||tt.isShaderMaterial||tt.isShadowMaterial||lt.isSkinnedMesh)&&be.setValue(st,"viewMatrix",A.matrixWorldInverse)}if(lt.isSkinnedMesh){be.setOptional(st,lt,"bindMatrix"),be.setOptional(st,lt,"bindMatrixInverse");const En=lt.skeleton;En&&(yt.floatVertexTextures?(En.boneTexture===null&&En.computeBoneTexture(),be.setValue(st,"boneTexture",En.boneTexture,X),be.setValue(st,"boneTextureSize",En.boneTextureSize)):be.setOptional(st,En,"boneMatrices"))}return!!J&&(J.morphAttributes.position!==void 0||J.morphAttributes.normal!==void 0)&&ut.update(lt,J,tt,rr),(or||jt.receiveShadow!==lt.receiveShadow)&&(jt.receiveShadow=lt.receiveShadow,be.setValue(st,"receiveShadow",lt.receiveShadow)),or&&(be.setValue(st,"toneMappingExposure",v.toneMappingExposure),jt.needsLights&&Pt(ro,Mi),Tt&&tt.fog&&$.refreshFogUniforms(ro,Tt),$.refreshMaterialUniforms(ro,tt,T,B,rt),Bi.upload(st,jt.uniformsList,ro,X)),tt.isShaderMaterial&&tt.uniformsNeedUpdate===!0&&(Bi.upload(st,jt.uniformsList,ro,X),tt.uniformsNeedUpdate=!1),tt.isSpriteMaterial&&be.setValue(st,"center",lt.center),be.setValue(st,"modelViewMatrix",lt.modelViewMatrix),be.setValue(st,"normalMatrix",lt.normalMatrix),be.setValue(st,"modelMatrix",lt.matrixWorld),rr}function Pt(A,j){A.ambientLightColor.needsUpdate=j,A.lightProbe.needsUpdate=j,A.directionalLights.needsUpdate=j,A.directionalLightShadows.needsUpdate=j,A.pointLights.needsUpdate=j,A.pointLightShadows.needsUpdate=j,A.spotLights.needsUpdate=j,A.spotLightShadows.needsUpdate=j,A.rectAreaLights.needsUpdate=j,A.hemisphereLights.needsUpdate=j}function qt(A){return A.isMeshLambertMaterial||A.isMeshToonMaterial||A.isMeshPhongMaterial||A.isMeshStandardMaterial||A.isShadowMaterial||A.isShaderMaterial&&A.lights===!0}this.getActiveCubeFace=function(){return m},this.getActiveMipmapLevel=function(){return p},this.getRenderTarget=function(){return b},this.setRenderTarget=function(A,j=0,J=0){b=A,m=j,p=J,A&&V.get(A).__webglFramebuffer===void 0&&X.setupRenderTarget(A);let tt=null,lt=!1,Tt=!1;if(A){const Nt=A.texture;(Nt.isDataTexture3D||Nt.isDataTexture2DArray)&&(Tt=!0);const Dt=V.get(A).__webglFramebuffer;A.isWebGLCubeRenderTarget?(tt=Dt[j],lt=!0):A.isWebGLMultisampleRenderTarget?tt=V.get(A).__webglMultisampledFramebuffer:tt=Dt,E.copy(A.viewport),S.copy(A.scissor),R=A.scissorTest}else E.copy(N).multiplyScalar(T).floor(),S.copy(C).multiplyScalar(T).floor(),R=L;if(St.bindFramebuffer(36160,tt)&&yt.drawBuffers){let Nt=!1;if(A)if(A.isWebGLMultipleRenderTargets){const Dt=A.texture;if(F.length!==Dt.length||F[0]!==36064){for(let Xt=0,Bt=Dt.length;Xt<Bt;Xt++)F[Xt]=36064+Xt;F.length=Dt.length,Nt=!0}}else(F.length!==1||F[0]!==36064)&&(F[0]=36064,F.length=1,Nt=!0);else(F.length!==1||F[0]!==1029)&&(F[0]=1029,F.length=1,Nt=!0);Nt&&(yt.isWebGL2?st.drawBuffers(F):Lt.get("WEBGL_draw_buffers").drawBuffersWEBGL(F))}if(St.viewport(E),St.scissor(S),St.setScissorTest(R),lt){const Nt=V.get(A.texture);st.framebufferTexture2D(36160,36064,34069+j,Nt.__webglTexture,J)}else if(Tt){const Nt=V.get(A.texture),Dt=j||0;st.framebufferTextureLayer(36160,36064,Nt.__webglTexture,J||0,Dt)}_=-1},this.readRenderTargetPixels=function(A,j,J,tt,lt,Tt,It){if(!(A&&A.isWebGLRenderTarget)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let Nt=V.get(A).__webglFramebuffer;if(A.isWebGLCubeRenderTarget&&It!==void 0&&(Nt=Nt[It]),Nt){St.bindFramebuffer(36160,Nt);try{const Dt=A.texture,Xt=Dt.format,Bt=Dt.type;if(Xt!==Ye&&Z.convert(Xt)!==st.getParameter(35739)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}const Kt=Bt===Nr&&(Lt.has("EXT_color_buffer_half_float")||yt.isWebGL2&&Lt.has("EXT_color_buffer_float"));if(Bt!==Si&&Z.convert(Bt)!==st.getParameter(35738)&&!(Bt===Ei&&(yt.isWebGL2||Lt.has("OES_texture_float")||Lt.has("WEBGL_color_buffer_float")))&&!Kt){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}st.checkFramebufferStatus(36160)===36053?j>=0&&j<=A.width-tt&&J>=0&&J<=A.height-lt&&st.readPixels(j,J,tt,lt,Z.convert(Xt),Z.convert(Bt),Tt):console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.")}finally{const Dt=b!==null?V.get(b).__webglFramebuffer:null;St.bindFramebuffer(36160,Dt)}}},this.copyFramebufferToTexture=function(A,j,J=0){const tt=Math.pow(2,-J),lt=Math.floor(j.image.width*tt),Tt=Math.floor(j.image.height*tt);let It=Z.convert(j.format);yt.isWebGL2&&(It===6407&&(It=32849),It===6408&&(It=32856)),X.setTexture2D(j,0),st.copyTexImage2D(3553,J,It,A.x,A.y,lt,Tt,0),St.unbindTexture()},this.copyTextureToTexture=function(A,j,J,tt=0){const lt=j.image.width,Tt=j.image.height,It=Z.convert(J.format),Nt=Z.convert(J.type);X.setTexture2D(J,0),st.pixelStorei(37440,J.flipY),st.pixelStorei(37441,J.premultiplyAlpha),st.pixelStorei(3317,J.unpackAlignment),j.isDataTexture?st.texSubImage2D(3553,tt,A.x,A.y,lt,Tt,It,Nt,j.image.data):j.isCompressedTexture?st.compressedTexSubImage2D(3553,tt,A.x,A.y,j.mipmaps[0].width,j.mipmaps[0].height,It,j.mipmaps[0].data):st.texSubImage2D(3553,tt,A.x,A.y,It,Nt,j.image),tt===0&&J.generateMipmaps&&st.generateMipmap(3553),St.unbindTexture()},this.copyTextureToTexture3D=function(A,j,J,tt,lt=0){if(v.isWebGL1Renderer){console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");return}const Tt=A.max.x-A.min.x+1,It=A.max.y-A.min.y+1,Nt=A.max.z-A.min.z+1,Dt=Z.convert(tt.format),Xt=Z.convert(tt.type);let Bt;if(tt.isDataTexture3D)X.setTexture3D(tt,0),Bt=32879;else if(tt.isDataTexture2DArray)X.setTexture2DArray(tt,0),Bt=35866;else{console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");return}st.pixelStorei(37440,tt.flipY),st.pixelStorei(37441,tt.premultiplyAlpha),st.pixelStorei(3317,tt.unpackAlignment);const Kt=st.getParameter(3314),Yt=st.getParameter(32878),sn=st.getParameter(3316),jt=st.getParameter(3315),Sn=st.getParameter(32877),pe=J.isCompressedTexture?J.mipmaps[0]:J.image;st.pixelStorei(3314,pe.width),st.pixelStorei(32878,pe.height),st.pixelStorei(3316,A.min.x),st.pixelStorei(3315,A.min.y),st.pixelStorei(32877,A.min.z),J.isDataTexture||J.isDataTexture3D?st.texSubImage3D(Bt,lt,j.x,j.y,j.z,Tt,It,Nt,Dt,Xt,pe.data):J.isCompressedTexture?(console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture."),st.compressedTexSubImage3D(Bt,lt,j.x,j.y,j.z,Tt,It,Nt,Dt,pe.data)):st.texSubImage3D(Bt,lt,j.x,j.y,j.z,Tt,It,Nt,Dt,Xt,pe),st.pixelStorei(3314,Kt),st.pixelStorei(32878,Yt),st.pixelStorei(3316,sn),st.pixelStorei(3315,jt),st.pixelStorei(32877,Sn),lt===0&&tt.generateMipmaps&&st.generateMipmap(Bt),St.unbindTexture()},this.initTexture=function(A){X.setTexture2D(A,0),St.unbindTexture()},this.resetState=function(){m=0,p=0,b=null,St.reset(),xt.reset()},typeof __THREE_DEVTOOLS__!="undefined"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}se.prototype.isWebGLRenderer=!0;class _M extends se{}_M.prototype.isWebGL1Renderer=!0;class kf extends ne{constructor(){super();this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.overrideMaterial=null,this.autoUpdate=!0,typeof __THREE_DEVTOOLS__!="undefined"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(t,e){return super.copy(t,e),t.background!==null&&(this.background=t.background.clone()),t.environment!==null&&(this.environment=t.environment.clone()),t.fog!==null&&(this.fog=t.fog.clone()),t.overrideMaterial!==null&&(this.overrideMaterial=t.overrideMaterial.clone()),this.autoUpdate=t.autoUpdate,this.matrixAutoUpdate=t.matrixAutoUpdate,this}toJSON(t){const e=super.toJSON(t);return this.fog!==null&&(e.object.fog=this.fog.toJSON()),e}}kf.prototype.isScene=!0;class Mo{constructor(t,e){this.array=t,this.stride=e,this.count=t!==void 0?t.length/e:0,this.usage=fo,this.updateRange={offset:0,count:-1},this.version=0,this.uuid=Un()}onUploadCallback(){}set needsUpdate(t){t===!0&&this.version++}setUsage(t){return this.usage=t,this}copy(t){return this.array=new t.array.constructor(t.array),this.count=t.count,this.stride=t.stride,this.usage=t.usage,this}copyAt(t,e,i){t*=this.stride,i*=e.stride;for(let r=0,s=this.stride;r<s;r++)this.array[t+r]=e.array[i+r];return this}set(t,e=0){return this.array.set(t,e),this}clone(t){t.arrayBuffers===void 0&&(t.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=Un()),t.arrayBuffers[this.array.buffer._uuid]===void 0&&(t.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer);const e=new this.array.constructor(t.arrayBuffers[this.array.buffer._uuid]),i=new this.constructor(e,this.stride);return i.setUsage(this.usage),i}onUpload(t){return this.onUploadCallback=t,this}toJSON(t){return t.arrayBuffers===void 0&&(t.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=Un()),t.arrayBuffers[this.array.buffer._uuid]===void 0&&(t.arrayBuffers[this.array.buffer._uuid]=Array.prototype.slice.call(new Uint32Array(this.array.buffer))),{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}}Mo.prototype.isInterleavedBuffer=!0;const we=new O;class wo{constructor(t,e,i,r=!1){this.name="",this.data=t,this.itemSize=e,this.offset=i,this.normalized=r===!0}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(t){this.data.needsUpdate=t}applyMatrix4(t){for(let e=0,i=this.data.count;e<i;e++)we.x=this.getX(e),we.y=this.getY(e),we.z=this.getZ(e),we.applyMatrix4(t),this.setXYZ(e,we.x,we.y,we.z);return this}applyNormalMatrix(t){for(let e=0,i=this.count;e<i;e++)we.x=this.getX(e),we.y=this.getY(e),we.z=this.getZ(e),we.applyNormalMatrix(t),this.setXYZ(e,we.x,we.y,we.z);return this}transformDirection(t){for(let e=0,i=this.count;e<i;e++)we.x=this.getX(e),we.y=this.getY(e),we.z=this.getZ(e),we.transformDirection(t),this.setXYZ(e,we.x,we.y,we.z);return this}setX(t,e){return this.data.array[t*this.data.stride+this.offset]=e,this}setY(t,e){return this.data.array[t*this.data.stride+this.offset+1]=e,this}setZ(t,e){return this.data.array[t*this.data.stride+this.offset+2]=e,this}setW(t,e){return this.data.array[t*this.data.stride+this.offset+3]=e,this}getX(t){return this.data.array[t*this.data.stride+this.offset]}getY(t){return this.data.array[t*this.data.stride+this.offset+1]}getZ(t){return this.data.array[t*this.data.stride+this.offset+2]}getW(t){return this.data.array[t*this.data.stride+this.offset+3]}setXY(t,e,i){return t=t*this.data.stride+this.offset,this.data.array[t+0]=e,this.data.array[t+1]=i,this}setXYZ(t,e,i,r){return t=t*this.data.stride+this.offset,this.data.array[t+0]=e,this.data.array[t+1]=i,this.data.array[t+2]=r,this}setXYZW(t,e,i,r,s){return t=t*this.data.stride+this.offset,this.data.array[t+0]=e,this.data.array[t+1]=i,this.data.array[t+2]=r,this.data.array[t+3]=s,this}clone(t){if(t===void 0){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.");const e=[];for(let i=0;i<this.count;i++){const r=i*this.data.stride+this.offset;for(let s=0;s<this.itemSize;s++)e.push(this.data.array[r+s])}return new Me(new this.array.constructor(e),this.itemSize,this.normalized)}else return t.interleavedBuffers===void 0&&(t.interleavedBuffers={}),t.interleavedBuffers[this.data.uuid]===void 0&&(t.interleavedBuffers[this.data.uuid]=this.data.clone(t)),new wo(t.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}toJSON(t){if(t===void 0){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.");const e=[];for(let i=0;i<this.count;i++){const r=i*this.data.stride+this.offset;for(let s=0;s<this.itemSize;s++)e.push(this.data.array[r+s])}return{itemSize:this.itemSize,type:this.array.constructor.name,array:e,normalized:this.normalized}}else return t.interleavedBuffers===void 0&&(t.interleavedBuffers={}),t.interleavedBuffers[this.data.uuid]===void 0&&(t.interleavedBuffers[this.data.uuid]=this.data.toJSON(t)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}}wo.prototype.isInterleavedBufferAttribute=!0;class Vf extends He{constructor(t){super();this.type="SpriteMaterial",this.color=new Ft(16777215),this.map=null,this.alphaMap=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.alphaMap=t.alphaMap,this.rotation=t.rotation,this.sizeAttenuation=t.sizeAttenuation,this}}Vf.prototype.isSpriteMaterial=!0;let ls;const So=new O,cs=new O,hs=new O,us=new bt,Eo=new bt,Wf=new Ht,Ja=new O,To=new O,Qa=new O,$f=new bt,ph=new bt,qf=new bt;class bM extends ne{constructor(t){super();if(this.type="Sprite",ls===void 0){ls=new re;const e=new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]),i=new Mo(e,5);ls.setIndex([0,1,2,0,2,3]),ls.setAttribute("position",new wo(i,3,0,!1)),ls.setAttribute("uv",new wo(i,2,3,!1))}this.geometry=ls,this.material=t!==void 0?t:new Vf,this.center=new bt(.5,.5)}raycast(t,e){t.camera===null&&console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'),cs.setFromMatrixScale(this.matrixWorld),Wf.copy(t.camera.matrixWorld),this.modelViewMatrix.multiplyMatrices(t.camera.matrixWorldInverse,this.matrixWorld),hs.setFromMatrixPosition(this.modelViewMatrix),t.camera.isPerspectiveCamera&&this.material.sizeAttenuation===!1&&cs.multiplyScalar(-hs.z);const i=this.material.rotation;let r,s;i!==0&&(s=Math.cos(i),r=Math.sin(i));const o=this.center;Ka(Ja.set(-.5,-.5,0),hs,o,cs,r,s),Ka(To.set(.5,-.5,0),hs,o,cs,r,s),Ka(Qa.set(.5,.5,0),hs,o,cs,r,s),$f.set(0,0),ph.set(1,0),qf.set(1,1);let a=t.ray.intersectTriangle(Ja,To,Qa,!1,So);if(a===null&&(Ka(To.set(-.5,.5,0),hs,o,cs,r,s),ph.set(0,1),a=t.ray.intersectTriangle(Ja,Qa,To,!1,So),a===null))return;const l=t.ray.origin.distanceTo(So);l<t.near||l>t.far||e.push({distance:l,point:So.clone(),uv:Se.getUV(So,Ja,To,Qa,$f,ph,qf,new bt),face:null,object:this})}copy(t){return super.copy(t),t.center!==void 0&&this.center.copy(t.center),this.material=t.material,this}}bM.prototype.isSprite=!0;function Ka(n,t,e,i,r,s){us.subVectors(n,e).addScalar(.5).multiply(i),r!==void 0?(Eo.x=s*us.x-r*us.y,Eo.y=r*us.x+s*us.y):Eo.copy(us),n.copy(t),n.x+=Eo.x,n.y+=Eo.y,n.applyMatrix4(Wf)}const jf=new O,Xf=new oe,Yf=new oe,MM=new O,Zf=new Ht;class Jf extends tn{constructor(t,e){super(t,e);this.type="SkinnedMesh",this.bindMode="attached",this.bindMatrix=new Ht,this.bindMatrixInverse=new Ht}copy(t){return super.copy(t),this.bindMode=t.bindMode,this.bindMatrix.copy(t.bindMatrix),this.bindMatrixInverse.copy(t.bindMatrixInverse),this.skeleton=t.skeleton,this}bind(t,e){this.skeleton=t,e===void 0&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),e=this.matrixWorld),this.bindMatrix.copy(e),this.bindMatrixInverse.copy(e).invert()}pose(){this.skeleton.pose()}normalizeSkinWeights(){const t=new oe,e=this.geometry.attributes.skinWeight;for(let i=0,r=e.count;i<r;i++){t.x=e.getX(i),t.y=e.getY(i),t.z=e.getZ(i),t.w=e.getW(i);const s=1/t.manhattanLength();s!==1/0?t.multiplyScalar(s):t.set(1,0,0,0),e.setXYZW(i,t.x,t.y,t.z,t.w)}}updateMatrixWorld(t){super.updateMatrixWorld(t),this.bindMode==="attached"?this.bindMatrixInverse.copy(this.matrixWorld).invert():this.bindMode==="detached"?this.bindMatrixInverse.copy(this.bindMatrix).invert():console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)}boneTransform(t,e){const i=this.skeleton,r=this.geometry;Xf.fromBufferAttribute(r.attributes.skinIndex,t),Yf.fromBufferAttribute(r.attributes.skinWeight,t),jf.copy(e).applyMatrix4(this.bindMatrix),e.set(0,0,0);for(let s=0;s<4;s++){const o=Yf.getComponent(s);if(o!==0){const a=Xf.getComponent(s);Zf.multiplyMatrices(i.bones[a].matrixWorld,i.boneInverses[a]),e.addScaledVector(MM.copy(jf).applyMatrix4(Zf),o)}}return e.applyMatrix4(this.bindMatrixInverse)}}Jf.prototype.isSkinnedMesh=!0;class wM extends ne{constructor(){super();this.type="Bone"}}wM.prototype.isBone=!0;class SM extends De{constructor(t=null,e=1,i=1,r,s,o,a,l,c=Ae,h=Ae,u,d){super(null,o,a,l,c,h,r,s,u,d);this.image={data:t,width:e,height:i},this.magFilter=c,this.minFilter=h,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.needsUpdate=!0}}SM.prototype.isDataTexture=!0;class mh extends Me{constructor(t,e,i,r=1){typeof i=="number"&&(r=i,i=!1,console.error("THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument."));super(t,e,i);this.meshPerAttribute=r}copy(t){return super.copy(t),this.meshPerAttribute=t.meshPerAttribute,this}toJSON(){const t=super.toJSON();return t.meshPerAttribute=this.meshPerAttribute,t.isInstancedBufferAttribute=!0,t}}mh.prototype.isInstancedBufferAttribute=!0;const Qf=new Ht,Kf=new Ht,tl=[],Ao=new tn;class EM extends tn{constructor(t,e,i){super(t,e);this.instanceMatrix=new mh(new Float32Array(i*16),16),this.instanceColor=null,this.count=i,this.frustumCulled=!1}copy(t){return super.copy(t),this.instanceMatrix.copy(t.instanceMatrix),t.instanceColor!==null&&(this.instanceColor=t.instanceColor.clone()),this.count=t.count,this}getColorAt(t,e){e.fromArray(this.instanceColor.array,t*3)}getMatrixAt(t,e){e.fromArray(this.instanceMatrix.array,t*16)}raycast(t,e){const i=this.matrixWorld,r=this.count;if(Ao.geometry=this.geometry,Ao.material=this.material,Ao.material!==void 0)for(let s=0;s<r;s++){this.getMatrixAt(s,Qf),Kf.multiplyMatrices(i,Qf),Ao.matrixWorld=Kf,Ao.raycast(t,tl);for(let o=0,a=tl.length;o<a;o++){const l=tl[o];l.instanceId=s,l.object=this,e.push(l)}tl.length=0}}setColorAt(t,e){this.instanceColor===null&&(this.instanceColor=new mh(new Float32Array(this.instanceMatrix.count*3),3)),e.toArray(this.instanceColor.array,t*3)}setMatrixAt(t,e){e.toArray(this.instanceMatrix.array,t*16)}updateMorphTargets(){}dispose(){this.dispatchEvent({type:"dispose"})}}EM.prototype.isInstancedMesh=!0;class Lo extends He{constructor(t){super();this.type="LineBasicMaterial",this.color=new Ft(16777215),this.linewidth=1,this.linecap="round",this.linejoin="round",this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.linewidth=t.linewidth,this.linecap=t.linecap,this.linejoin=t.linejoin,this}}Lo.prototype.isLineBasicMaterial=!0;const tp=new O,ep=new O,np=new Ht,gh=new qr,el=new $r;class vh extends ne{constructor(t=new re,e=new Lo){super();this.type="Line",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t){return super.copy(t),this.material=t.material,this.geometry=t.geometry,this}computeLineDistances(){const t=this.geometry;if(t.isBufferGeometry)if(t.index===null){const e=t.attributes.position,i=[0];for(let r=1,s=e.count;r<s;r++)tp.fromBufferAttribute(e,r-1),ep.fromBufferAttribute(e,r),i[r]=i[r-1],i[r]+=tp.distanceTo(ep);t.setAttribute("lineDistance",new ue(i,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else t.isGeometry&&console.error("THREE.Line.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");return this}raycast(t,e){const i=this.geometry,r=this.matrixWorld,s=t.params.Line.threshold,o=i.drawRange;if(i.boundingSphere===null&&i.computeBoundingSphere(),el.copy(i.boundingSphere),el.applyMatrix4(r),el.radius+=s,t.ray.intersectsSphere(el)===!1)return;np.copy(r).invert(),gh.copy(t.ray).applyMatrix4(np);const a=s/((this.scale.x+this.scale.y+this.scale.z)/3),l=a*a,c=new O,h=new O,u=new O,d=new O,f=this.isLineSegments?2:1;if(i.isBufferGeometry){const g=i.index,x=i.attributes.position;if(g!==null){const m=Math.max(0,o.start),p=Math.min(g.count,o.start+o.count);for(let b=m,_=p-1;b<_;b+=f){const w=g.getX(b),E=g.getX(b+1);if(c.fromBufferAttribute(x,w),h.fromBufferAttribute(x,E),gh.distanceSqToSegment(c,h,d,u)>l)continue;d.applyMatrix4(this.matrixWorld);const R=t.ray.origin.distanceTo(d);R<t.near||R>t.far||e.push({distance:R,point:u.clone().applyMatrix4(this.matrixWorld),index:b,face:null,faceIndex:null,object:this})}}else{const m=Math.max(0,o.start),p=Math.min(x.count,o.start+o.count);for(let b=m,_=p-1;b<_;b+=f){if(c.fromBufferAttribute(x,b),h.fromBufferAttribute(x,b+1),gh.distanceSqToSegment(c,h,d,u)>l)continue;d.applyMatrix4(this.matrixWorld);const E=t.ray.origin.distanceTo(d);E<t.near||E>t.far||e.push({distance:E,point:u.clone().applyMatrix4(this.matrixWorld),index:b,face:null,faceIndex:null,object:this})}}}else i.isGeometry&&console.error("THREE.Line.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}updateMorphTargets(){const t=this.geometry;if(t.isBufferGeometry){const e=t.morphAttributes,i=Object.keys(e);if(i.length>0){const r=e[i[0]];if(r!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let s=0,o=r.length;s<o;s++){const a=r[s].name||String(s);this.morphTargetInfluences.push(0),this.morphTargetDictionary[a]=s}}}}else{const e=t.morphTargets;e!==void 0&&e.length>0&&console.error("THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")}}}vh.prototype.isLine=!0;const ip=new O,rp=new O;class xh extends vh{constructor(t,e){super(t,e);this.type="LineSegments"}computeLineDistances(){const t=this.geometry;if(t.isBufferGeometry)if(t.index===null){const e=t.attributes.position,i=[];for(let r=0,s=e.count;r<s;r+=2)ip.fromBufferAttribute(e,r),rp.fromBufferAttribute(e,r+1),i[r]=r===0?0:i[r-1],i[r+1]=i[r]+ip.distanceTo(rp);t.setAttribute("lineDistance",new ue(i,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else t.isGeometry&&console.error("THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");return this}}xh.prototype.isLineSegments=!0;class TM extends vh{constructor(t,e){super(t,e);this.type="LineLoop"}}TM.prototype.isLineLoop=!0;class sp extends He{constructor(t){super();this.type="PointsMaterial",this.color=new Ft(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.alphaMap=t.alphaMap,this.size=t.size,this.sizeAttenuation=t.sizeAttenuation,this}}sp.prototype.isPointsMaterial=!0;const op=new Ht,yh=new qr,nl=new $r,il=new O;class AM extends ne{constructor(t=new re,e=new sp){super();this.type="Points",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t){return super.copy(t),this.material=t.material,this.geometry=t.geometry,this}raycast(t,e){const i=this.geometry,r=this.matrixWorld,s=t.params.Points.threshold,o=i.drawRange;if(i.boundingSphere===null&&i.computeBoundingSphere(),nl.copy(i.boundingSphere),nl.applyMatrix4(r),nl.radius+=s,t.ray.intersectsSphere(nl)===!1)return;op.copy(r).invert(),yh.copy(t.ray).applyMatrix4(op);const a=s/((this.scale.x+this.scale.y+this.scale.z)/3),l=a*a;if(i.isBufferGeometry){const c=i.index,u=i.attributes.position;if(c!==null){const d=Math.max(0,o.start),f=Math.min(c.count,o.start+o.count);for(let g=d,v=f;g<v;g++){const x=c.getX(g);il.fromBufferAttribute(u,x),ap(il,x,l,r,t,e,this)}}else{const d=Math.max(0,o.start),f=Math.min(u.count,o.start+o.count);for(let g=d,v=f;g<v;g++)il.fromBufferAttribute(u,g),ap(il,g,l,r,t,e,this)}}else console.error("THREE.Points.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}updateMorphTargets(){const t=this.geometry;if(t.isBufferGeometry){const e=t.morphAttributes,i=Object.keys(e);if(i.length>0){const r=e[i[0]];if(r!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let s=0,o=r.length;s<o;s++){const a=r[s].name||String(s);this.morphTargetInfluences.push(0),this.morphTargetDictionary[a]=s}}}}else{const e=t.morphTargets;e!==void 0&&e.length>0&&console.error("THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")}}}AM.prototype.isPoints=!0;function ap(n,t,e,i,r,s,o){const a=yh.distanceSqToPoint(n);if(a<e){const l=new O;yh.closestPointToPoint(n,l),l.applyMatrix4(i);const c=r.ray.origin.distanceTo(l);if(c<r.near||c>r.far)return;s.push({distance:c,distanceToRay:Math.sqrt(a),point:l,index:t,face:null,object:o})}}class LM extends De{constructor(t,e,i,r,s,o,a,l,c){super(t,e,i,r,s,o,a,l,c);this.format=a!==void 0?a:Fr,this.minFilter=o!==void 0?o:gn,this.magFilter=s!==void 0?s:gn,this.generateMipmaps=!1;const h=this;function u(){h.needsUpdate=!0,t.requestVideoFrameCallback(u)}"requestVideoFrameCallback"in t&&t.requestVideoFrameCallback(u)}clone(){return new this.constructor(this.image).copy(this)}update(){const t=this.image;"requestVideoFrameCallback"in t===!1&&t.readyState>=t.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}}LM.prototype.isVideoTexture=!0;class CM extends De{constructor(t,e,i,r,s,o,a,l,c,h,u,d){super(null,o,a,l,c,h,r,s,u,d);this.image={width:e,height:i},this.mipmaps=t,this.flipY=!1,this.generateMipmaps=!1}}CM.prototype.isCompressedTexture=!0;class RM extends De{constructor(t,e,i,r,s,o,a,l,c){super(t,e,i,r,s,o,a,l,c);this.needsUpdate=!0}}RM.prototype.isCanvasTexture=!0;class PM extends De{constructor(t,e,i,r,s,o,a,l,c,h){if(h=h!==void 0?h:Br,h!==Br&&h!==uo)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");i===void 0&&h===Br&&(i=Ma),i===void 0&&h===uo&&(i=ho);super(null,r,s,o,a,l,h,i,c);this.image={width:t,height:e},this.magFilter=a!==void 0?a:Ae,this.minFilter=l!==void 0?l:Ae,this.flipY=!1,this.generateMipmaps=!1}}PM.prototype.isDepthTexture=!0;class _h extends re{constructor(t=[],e=[],i=1,r=0){super();this.type="PolyhedronGeometry",this.parameters={vertices:t,indices:e,radius:i,detail:r};const s=[],o=[];a(r),c(i),h(),this.setAttribute("position",new ue(s,3)),this.setAttribute("normal",new ue(s.slice(),3)),this.setAttribute("uv",new ue(o,2)),r===0?this.computeVertexNormals():this.normalizeNormals();function a(p){const b=new O,_=new O,w=new O;for(let E=0;E<e.length;E+=3)f(e[E+0],b),f(e[E+1],_),f(e[E+2],w),l(b,_,w,p)}function l(p,b,_,w){const E=w+1,S=[];for(let R=0;R<=E;R++){S[R]=[];const W=p.clone().lerp(_,R/E),B=b.clone().lerp(_,R/E),T=E-R;for(let k=0;k<=T;k++)k===0&&R===E?S[R][k]=W:S[R][k]=W.clone().lerp(B,k/T)}for(let R=0;R<E;R++)for(let W=0;W<2*(E-R)-1;W++){const B=Math.floor(W/2);W%2==0?(d(S[R][B+1]),d(S[R+1][B]),d(S[R][B])):(d(S[R][B+1]),d(S[R+1][B+1]),d(S[R+1][B]))}}function c(p){const b=new O;for(let _=0;_<s.length;_+=3)b.x=s[_+0],b.y=s[_+1],b.z=s[_+2],b.normalize().multiplyScalar(p),s[_+0]=b.x,s[_+1]=b.y,s[_+2]=b.z}function h(){const p=new O;for(let b=0;b<s.length;b+=3){p.x=s[b+0],p.y=s[b+1],p.z=s[b+2];const _=x(p)/2/Math.PI+.5,w=m(p)/Math.PI+.5;o.push(_,1-w)}g(),u()}function u(){for(let p=0;p<o.length;p+=6){const b=o[p+0],_=o[p+2],w=o[p+4],E=Math.max(b,_,w),S=Math.min(b,_,w);E>.9&&S<.1&&(b<.2&&(o[p+0]+=1),_<.2&&(o[p+2]+=1),w<.2&&(o[p+4]+=1))}}function d(p){s.push(p.x,p.y,p.z)}function f(p,b){const _=p*3;b.x=t[_+0],b.y=t[_+1],b.z=t[_+2]}function g(){const p=new O,b=new O,_=new O,w=new O,E=new bt,S=new bt,R=new bt;for(let W=0,B=0;W<s.length;W+=9,B+=6){p.set(s[W+0],s[W+1],s[W+2]),b.set(s[W+3],s[W+4],s[W+5]),_.set(s[W+6],s[W+7],s[W+8]),E.set(o[B+0],o[B+1]),S.set(o[B+2],o[B+3]),R.set(o[B+4],o[B+5]),w.copy(p).add(b).add(_).divideScalar(3);const T=x(w);v(E,B+0,p,T),v(S,B+2,b,T),v(R,B+4,_,T)}}function v(p,b,_,w){w<0&&p.x===1&&(o[b]=p.x-1),_.x===0&&_.z===0&&(o[b]=w/2/Math.PI+.5)}function x(p){return Math.atan2(p.z,-p.x)}function m(p){return Math.atan2(-p.y,Math.sqrt(p.x*p.x+p.z*p.z))}}static fromJSON(t){return new _h(t.vertices,t.indices,t.radius,t.details)}}class lp extends _h{constructor(t=1,e=0){const i=(1+Math.sqrt(5))/2,r=1/i,s=[-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-r,-i,0,-r,i,0,r,-i,0,r,i,-r,-i,0,-r,i,0,r,-i,0,r,i,0,-i,0,-r,i,0,-r,-i,0,r,i,0,r],o=[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9];super(s,o,t,e);this.type="DodecahedronGeometry",this.parameters={radius:t,detail:e}}static fromJSON(t){return new lp(t.radius,t.detail)}}new O;new O;new O;new Se;class xn{constructor(){this.type="Curve",this.arcLengthDivisions=200}getPoint(){return console.warn("THREE.Curve: .getPoint() not implemented."),null}getPointAt(t,e){const i=this.getUtoTmapping(t);return this.getPoint(i,e)}getPoints(t=5){const e=[];for(let i=0;i<=t;i++)e.push(this.getPoint(i/t));return e}getSpacedPoints(t=5){const e=[];for(let i=0;i<=t;i++)e.push(this.getPointAt(i/t));return e}getLength(){const t=this.getLengths();return t[t.length-1]}getLengths(t=this.arcLengthDivisions){if(this.cacheArcLengths&&this.cacheArcLengths.length===t+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;const e=[];let i,r=this.getPoint(0),s=0;e.push(0);for(let o=1;o<=t;o++)i=this.getPoint(o/t),s+=i.distanceTo(r),e.push(s),r=i;return this.cacheArcLengths=e,e}updateArcLengths(){this.needsUpdate=!0,this.getLengths()}getUtoTmapping(t,e){const i=this.getLengths();let r=0;const s=i.length;let o;e?o=e:o=t*i[s-1];let a=0,l=s-1,c;for(;a<=l;)if(r=Math.floor(a+(l-a)/2),c=i[r]-o,c<0)a=r+1;else if(c>0)l=r-1;else{l=r;break}if(r=l,i[r]===o)return r/(s-1);const h=i[r],d=i[r+1]-h,f=(o-h)/d;return(r+f)/(s-1)}getTangent(t,e){const i=1e-4;let r=t-i,s=t+i;r<0&&(r=0),s>1&&(s=1);const o=this.getPoint(r),a=this.getPoint(s),l=e||(o.isVector2?new bt:new O);return l.copy(a).sub(o).normalize(),l}getTangentAt(t,e){const i=this.getUtoTmapping(t);return this.getTangent(i,e)}computeFrenetFrames(t,e){const i=new O,r=[],s=[],o=[],a=new O,l=new Ht;for(let f=0;f<=t;f++){const g=f/t;r[f]=this.getTangentAt(g,new O)}s[0]=new O,o[0]=new O;let c=Number.MAX_VALUE;const h=Math.abs(r[0].x),u=Math.abs(r[0].y),d=Math.abs(r[0].z);h<=c&&(c=h,i.set(1,0,0)),u<=c&&(c=u,i.set(0,1,0)),d<=c&&i.set(0,0,1),a.crossVectors(r[0],i).normalize(),s[0].crossVectors(r[0],a),o[0].crossVectors(r[0],s[0]);for(let f=1;f<=t;f++){if(s[f]=s[f-1].clone(),o[f]=o[f-1].clone(),a.crossVectors(r[f-1],r[f]),a.length()>Number.EPSILON){a.normalize();const g=Math.acos(Ke(r[f-1].dot(r[f]),-1,1));s[f].applyMatrix4(l.makeRotationAxis(a,g))}o[f].crossVectors(r[f],s[f])}if(e===!0){let f=Math.acos(Ke(s[0].dot(s[t]),-1,1));f/=t,r[0].dot(a.crossVectors(s[0],s[t]))>0&&(f=-f);for(let g=1;g<=t;g++)s[g].applyMatrix4(l.makeRotationAxis(r[g],f*g)),o[g].crossVectors(r[g],s[g])}return{tangents:r,normals:s,binormals:o}}clone(){return new this.constructor().copy(this)}copy(t){return this.arcLengthDivisions=t.arcLengthDivisions,this}toJSON(){const t={metadata:{version:4.5,type:"Curve",generator:"Curve.toJSON"}};return t.arcLengthDivisions=this.arcLengthDivisions,t.type=this.type,t}fromJSON(t){return this.arcLengthDivisions=t.arcLengthDivisions,this}}class rl extends xn{constructor(t=0,e=0,i=1,r=1,s=0,o=Math.PI*2,a=!1,l=0){super();this.type="EllipseCurve",this.aX=t,this.aY=e,this.xRadius=i,this.yRadius=r,this.aStartAngle=s,this.aEndAngle=o,this.aClockwise=a,this.aRotation=l}getPoint(t,e){const i=e||new bt,r=Math.PI*2;let s=this.aEndAngle-this.aStartAngle;const o=Math.abs(s)<Number.EPSILON;for(;s<0;)s+=r;for(;s>r;)s-=r;s<Number.EPSILON&&(o?s=0:s=r),this.aClockwise===!0&&!o&&(s===r?s=-r:s=s-r);const a=this.aStartAngle+t*s;let l=this.aX+this.xRadius*Math.cos(a),c=this.aY+this.yRadius*Math.sin(a);if(this.aRotation!==0){const h=Math.cos(this.aRotation),u=Math.sin(this.aRotation),d=l-this.aX,f=c-this.aY;l=d*h-f*u+this.aX,c=d*u+f*h+this.aY}return i.set(l,c)}copy(t){return super.copy(t),this.aX=t.aX,this.aY=t.aY,this.xRadius=t.xRadius,this.yRadius=t.yRadius,this.aStartAngle=t.aStartAngle,this.aEndAngle=t.aEndAngle,this.aClockwise=t.aClockwise,this.aRotation=t.aRotation,this}toJSON(){const t=super.toJSON();return t.aX=this.aX,t.aY=this.aY,t.xRadius=this.xRadius,t.yRadius=this.yRadius,t.aStartAngle=this.aStartAngle,t.aEndAngle=this.aEndAngle,t.aClockwise=this.aClockwise,t.aRotation=this.aRotation,t}fromJSON(t){return super.fromJSON(t),this.aX=t.aX,this.aY=t.aY,this.xRadius=t.xRadius,this.yRadius=t.yRadius,this.aStartAngle=t.aStartAngle,this.aEndAngle=t.aEndAngle,this.aClockwise=t.aClockwise,this.aRotation=t.aRotation,this}}rl.prototype.isEllipseCurve=!0;class cp extends rl{constructor(t,e,i,r,s,o){super(t,e,i,i,r,s,o);this.type="ArcCurve"}}cp.prototype.isArcCurve=!0;function bh(){let n=0,t=0,e=0,i=0;function r(s,o,a,l){n=s,t=a,e=-3*s+3*o-2*a-l,i=2*s-2*o+a+l}return{initCatmullRom:function(s,o,a,l,c){r(o,a,c*(a-s),c*(l-o))},initNonuniformCatmullRom:function(s,o,a,l,c,h,u){let d=(o-s)/c-(a-s)/(c+h)+(a-o)/h,f=(a-o)/h-(l-o)/(h+u)+(l-a)/u;d*=h,f*=h,r(o,a,d,f)},calc:function(s){const o=s*s,a=o*s;return n+t*s+e*o+i*a}}}const sl=new O,Mh=new bh,wh=new bh,Sh=new bh;class hp extends xn{constructor(t=[],e=!1,i="centripetal",r=.5){super();this.type="CatmullRomCurve3",this.points=t,this.closed=e,this.curveType=i,this.tension=r}getPoint(t,e=new O){const i=e,r=this.points,s=r.length,o=(s-(this.closed?0:1))*t;let a=Math.floor(o),l=o-a;this.closed?a+=a>0?0:(Math.floor(Math.abs(a)/s)+1)*s:l===0&&a===s-1&&(a=s-2,l=1);let c,h;this.closed||a>0?c=r[(a-1)%s]:(sl.subVectors(r[0],r[1]).add(r[0]),c=sl);const u=r[a%s],d=r[(a+1)%s];if(this.closed||a+2<s?h=r[(a+2)%s]:(sl.subVectors(r[s-1],r[s-2]).add(r[s-1]),h=sl),this.curveType==="centripetal"||this.curveType==="chordal"){const f=this.curveType==="chordal"?.5:.25;let g=Math.pow(c.distanceToSquared(u),f),v=Math.pow(u.distanceToSquared(d),f),x=Math.pow(d.distanceToSquared(h),f);v<1e-4&&(v=1),g<1e-4&&(g=v),x<1e-4&&(x=v),Mh.initNonuniformCatmullRom(c.x,u.x,d.x,h.x,g,v,x),wh.initNonuniformCatmullRom(c.y,u.y,d.y,h.y,g,v,x),Sh.initNonuniformCatmullRom(c.z,u.z,d.z,h.z,g,v,x)}else this.curveType==="catmullrom"&&(Mh.initCatmullRom(c.x,u.x,d.x,h.x,this.tension),wh.initCatmullRom(c.y,u.y,d.y,h.y,this.tension),Sh.initCatmullRom(c.z,u.z,d.z,h.z,this.tension));return i.set(Mh.calc(l),wh.calc(l),Sh.calc(l)),i}copy(t){super.copy(t),this.points=[];for(let e=0,i=t.points.length;e<i;e++){const r=t.points[e];this.points.push(r.clone())}return this.closed=t.closed,this.curveType=t.curveType,this.tension=t.tension,this}toJSON(){const t=super.toJSON();t.points=[];for(let e=0,i=this.points.length;e<i;e++){const r=this.points[e];t.points.push(r.toArray())}return t.closed=this.closed,t.curveType=this.curveType,t.tension=this.tension,t}fromJSON(t){super.fromJSON(t),this.points=[];for(let e=0,i=t.points.length;e<i;e++){const r=t.points[e];this.points.push(new O().fromArray(r))}return this.closed=t.closed,this.curveType=t.curveType,this.tension=t.tension,this}}hp.prototype.isCatmullRomCurve3=!0;function up(n,t,e,i,r){const s=(i-t)*.5,o=(r-e)*.5,a=n*n,l=n*a;return(2*e-2*i+s+o)*l+(-3*e+3*i-2*s-o)*a+s*n+e}function IM(n,t){const e=1-n;return e*e*t}function DM(n,t){return 2*(1-n)*n*t}function NM(n,t){return n*n*t}function Co(n,t,e,i){return IM(n,t)+DM(n,e)+NM(n,i)}function FM(n,t){const e=1-n;return e*e*e*t}function BM(n,t){const e=1-n;return 3*e*e*n*t}function OM(n,t){return 3*(1-n)*n*n*t}function zM(n,t){return n*n*n*t}function Ro(n,t,e,i,r){return FM(n,t)+BM(n,e)+OM(n,i)+zM(n,r)}class Eh extends xn{constructor(t=new bt,e=new bt,i=new bt,r=new bt){super();this.type="CubicBezierCurve",this.v0=t,this.v1=e,this.v2=i,this.v3=r}getPoint(t,e=new bt){const i=e,r=this.v0,s=this.v1,o=this.v2,a=this.v3;return i.set(Ro(t,r.x,s.x,o.x,a.x),Ro(t,r.y,s.y,o.y,a.y)),i}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this.v3.copy(t.v3),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t.v3=this.v3.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this.v3.fromArray(t.v3),this}}Eh.prototype.isCubicBezierCurve=!0;class dp extends xn{constructor(t=new O,e=new O,i=new O,r=new O){super();this.type="CubicBezierCurve3",this.v0=t,this.v1=e,this.v2=i,this.v3=r}getPoint(t,e=new O){const i=e,r=this.v0,s=this.v1,o=this.v2,a=this.v3;return i.set(Ro(t,r.x,s.x,o.x,a.x),Ro(t,r.y,s.y,o.y,a.y),Ro(t,r.z,s.z,o.z,a.z)),i}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this.v3.copy(t.v3),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t.v3=this.v3.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this.v3.fromArray(t.v3),this}}dp.prototype.isCubicBezierCurve3=!0;class ol extends xn{constructor(t=new bt,e=new bt){super();this.type="LineCurve",this.v1=t,this.v2=e}getPoint(t,e=new bt){const i=e;return t===1?i.copy(this.v2):(i.copy(this.v2).sub(this.v1),i.multiplyScalar(t).add(this.v1)),i}getPointAt(t,e){return this.getPoint(t,e)}getTangent(t,e){const i=e||new bt;return i.copy(this.v2).sub(this.v1).normalize(),i}copy(t){return super.copy(t),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}ol.prototype.isLineCurve=!0;class UM extends xn{constructor(t=new O,e=new O){super();this.type="LineCurve3",this.isLineCurve3=!0,this.v1=t,this.v2=e}getPoint(t,e=new O){const i=e;return t===1?i.copy(this.v2):(i.copy(this.v2).sub(this.v1),i.multiplyScalar(t).add(this.v1)),i}getPointAt(t,e){return this.getPoint(t,e)}copy(t){return super.copy(t),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}class Th extends xn{constructor(t=new bt,e=new bt,i=new bt){super();this.type="QuadraticBezierCurve",this.v0=t,this.v1=e,this.v2=i}getPoint(t,e=new bt){const i=e,r=this.v0,s=this.v1,o=this.v2;return i.set(Co(t,r.x,s.x,o.x),Co(t,r.y,s.y,o.y)),i}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}Th.prototype.isQuadraticBezierCurve=!0;class fp extends xn{constructor(t=new O,e=new O,i=new O){super();this.type="QuadraticBezierCurve3",this.v0=t,this.v1=e,this.v2=i}getPoint(t,e=new O){const i=e,r=this.v0,s=this.v1,o=this.v2;return i.set(Co(t,r.x,s.x,o.x),Co(t,r.y,s.y,o.y),Co(t,r.z,s.z,o.z)),i}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}fp.prototype.isQuadraticBezierCurve3=!0;class Ah extends xn{constructor(t=[]){super();this.type="SplineCurve",this.points=t}getPoint(t,e=new bt){const i=e,r=this.points,s=(r.length-1)*t,o=Math.floor(s),a=s-o,l=r[o===0?o:o-1],c=r[o],h=r[o>r.length-2?r.length-1:o+1],u=r[o>r.length-3?r.length-1:o+2];return i.set(up(a,l.x,c.x,h.x,u.x),up(a,l.y,c.y,h.y,u.y)),i}copy(t){super.copy(t),this.points=[];for(let e=0,i=t.points.length;e<i;e++){const r=t.points[e];this.points.push(r.clone())}return this}toJSON(){const t=super.toJSON();t.points=[];for(let e=0,i=this.points.length;e<i;e++){const r=this.points[e];t.points.push(r.toArray())}return t}fromJSON(t){super.fromJSON(t),this.points=[];for(let e=0,i=t.points.length;e<i;e++){const r=t.points[e];this.points.push(new bt().fromArray(r))}return this}}Ah.prototype.isSplineCurve=!0;var pp=Object.freeze({__proto__:null,ArcCurve:cp,CatmullRomCurve3:hp,CubicBezierCurve:Eh,CubicBezierCurve3:dp,EllipseCurve:rl,LineCurve:ol,LineCurve3:UM,QuadraticBezierCurve:Th,QuadraticBezierCurve3:fp,SplineCurve:Ah});class HM extends xn{constructor(){super();this.type="CurvePath",this.curves=[],this.autoClose=!1}add(t){this.curves.push(t)}closePath(){const t=this.curves[0].getPoint(0),e=this.curves[this.curves.length-1].getPoint(1);t.equals(e)||this.curves.push(new ol(e,t))}getPoint(t,e){const i=t*this.getLength(),r=this.getCurveLengths();let s=0;for(;s<r.length;){if(r[s]>=i){const o=r[s]-i,a=this.curves[s],l=a.getLength(),c=l===0?0:1-o/l;return a.getPointAt(c,e)}s++}return null}getLength(){const t=this.getCurveLengths();return t[t.length-1]}updateArcLengths(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()}getCurveLengths(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;const t=[];let e=0;for(let i=0,r=this.curves.length;i<r;i++)e+=this.curves[i].getLength(),t.push(e);return this.cacheLengths=t,t}getSpacedPoints(t=40){const e=[];for(let i=0;i<=t;i++)e.push(this.getPoint(i/t));return this.autoClose&&e.push(e[0]),e}getPoints(t=12){const e=[];let i;for(let r=0,s=this.curves;r<s.length;r++){const o=s[r],a=o&&o.isEllipseCurve?t*2:o&&(o.isLineCurve||o.isLineCurve3)?1:o&&o.isSplineCurve?t*o.points.length:t,l=o.getPoints(a);for(let c=0;c<l.length;c++){const h=l[c];i&&i.equals(h)||(e.push(h),i=h)}}return this.autoClose&&e.length>1&&!e[e.length-1].equals(e[0])&&e.push(e[0]),e}copy(t){super.copy(t),this.curves=[];for(let e=0,i=t.curves.length;e<i;e++){const r=t.curves[e];this.curves.push(r.clone())}return this.autoClose=t.autoClose,this}toJSON(){const t=super.toJSON();t.autoClose=this.autoClose,t.curves=[];for(let e=0,i=this.curves.length;e<i;e++){const r=this.curves[e];t.curves.push(r.toJSON())}return t}fromJSON(t){super.fromJSON(t),this.autoClose=t.autoClose,this.curves=[];for(let e=0,i=t.curves.length;e<i;e++){const r=t.curves[e];this.curves.push(new pp[r.type]().fromJSON(r))}return this}}class Lh extends HM{constructor(t){super();this.type="Path",this.currentPoint=new bt,t&&this.setFromPoints(t)}setFromPoints(t){this.moveTo(t[0].x,t[0].y);for(let e=1,i=t.length;e<i;e++)this.lineTo(t[e].x,t[e].y);return this}moveTo(t,e){return this.currentPoint.set(t,e),this}lineTo(t,e){const i=new ol(this.currentPoint.clone(),new bt(t,e));return this.curves.push(i),this.currentPoint.set(t,e),this}quadraticCurveTo(t,e,i,r){const s=new Th(this.currentPoint.clone(),new bt(t,e),new bt(i,r));return this.curves.push(s),this.currentPoint.set(i,r),this}bezierCurveTo(t,e,i,r,s,o){const a=new Eh(this.currentPoint.clone(),new bt(t,e),new bt(i,r),new bt(s,o));return this.curves.push(a),this.currentPoint.set(s,o),this}splineThru(t){const e=[this.currentPoint.clone()].concat(t),i=new Ah(e);return this.curves.push(i),this.currentPoint.copy(t[t.length-1]),this}arc(t,e,i,r,s,o){const a=this.currentPoint.x,l=this.currentPoint.y;return this.absarc(t+a,e+l,i,r,s,o),this}absarc(t,e,i,r,s,o){return this.absellipse(t,e,i,i,r,s,o),this}ellipse(t,e,i,r,s,o,a,l){const c=this.currentPoint.x,h=this.currentPoint.y;return this.absellipse(t+c,e+h,i,r,s,o,a,l),this}absellipse(t,e,i,r,s,o,a,l){const c=new rl(t,e,i,r,s,o,a,l);if(this.curves.length>0){const u=c.getPoint(0);u.equals(this.currentPoint)||this.lineTo(u.x,u.y)}this.curves.push(c);const h=c.getPoint(1);return this.currentPoint.copy(h),this}copy(t){return super.copy(t),this.currentPoint.copy(t.currentPoint),this}toJSON(){const t=super.toJSON();return t.currentPoint=this.currentPoint.toArray(),t}fromJSON(t){return super.fromJSON(t),this.currentPoint.fromArray(t.currentPoint),this}}class Po extends Lh{constructor(t){super(t);this.uuid=Un(),this.type="Shape",this.holes=[]}getPointsHoles(t){const e=[];for(let i=0,r=this.holes.length;i<r;i++)e[i]=this.holes[i].getPoints(t);return e}extractPoints(t){return{shape:this.getPoints(t),holes:this.getPointsHoles(t)}}copy(t){super.copy(t),this.holes=[];for(let e=0,i=t.holes.length;e<i;e++){const r=t.holes[e];this.holes.push(r.clone())}return this}toJSON(){const t=super.toJSON();t.uuid=this.uuid,t.holes=[];for(let e=0,i=this.holes.length;e<i;e++){const r=this.holes[e];t.holes.push(r.toJSON())}return t}fromJSON(t){super.fromJSON(t),this.uuid=t.uuid,this.holes=[];for(let e=0,i=t.holes.length;e<i;e++){const r=t.holes[e];this.holes.push(new Lh().fromJSON(r))}return this}}const GM={triangulate:function(n,t,e=2){const i=t&&t.length,r=i?t[0]*e:n.length;let s=mp(n,0,r,e,!0);const o=[];if(!s||s.next===s.prev)return o;let a,l,c,h,u,d,f;if(i&&(s=qM(n,t,s,e)),n.length>80*e){a=c=n[0],l=h=n[1];for(let g=e;g<r;g+=e)u=n[g],d=n[g+1],u<a&&(a=u),d<l&&(l=d),u>c&&(c=u),d>h&&(h=d);f=Math.max(c-a,h-l),f=f!==0?1/f:0}return Io(s,o,e,a,l,f),o}};function mp(n,t,e,i,r){let s,o;if(r===iw(n,t,e,i)>0)for(s=t;s<e;s+=i)o=xp(s,n[s],n[s+1],o);else for(s=e-i;s>=t;s-=i)o=xp(s,n[s],n[s+1],o);return o&&al(o,o.next)&&(No(o),o=o.next),o}function Oi(n,t){if(!n)return n;t||(t=n);let e=n,i;do if(i=!1,!e.steiner&&(al(e,e.next)||ye(e.prev,e,e.next)===0)){if(No(e),e=t=e.prev,e===e.next)break;i=!0}else e=e.next;while(i||e!==t);return t}function Io(n,t,e,i,r,s,o){if(!n)return;!o&&s&&JM(n,i,r,s);let a=n,l,c;for(;n.prev!==n.next;){if(l=n.prev,c=n.next,s?VM(n,i,r,s):kM(n)){t.push(l.i/e),t.push(n.i/e),t.push(c.i/e),No(n),n=c.next,a=c.next;continue}if(n=c,n===a){o?o===1?(n=WM(Oi(n),t,e),Io(n,t,e,i,r,s,2)):o===2&&$M(n,t,e,i,r,s):Io(Oi(n),t,e,i,r,s,1);break}}}function kM(n){const t=n.prev,e=n,i=n.next;if(ye(t,e,i)>=0)return!1;let r=n.next.next;for(;r!==n.prev;){if(ds(t.x,t.y,e.x,e.y,i.x,i.y,r.x,r.y)&&ye(r.prev,r,r.next)>=0)return!1;r=r.next}return!0}function VM(n,t,e,i){const r=n.prev,s=n,o=n.next;if(ye(r,s,o)>=0)return!1;const a=r.x<s.x?r.x<o.x?r.x:o.x:s.x<o.x?s.x:o.x,l=r.y<s.y?r.y<o.y?r.y:o.y:s.y<o.y?s.y:o.y,c=r.x>s.x?r.x>o.x?r.x:o.x:s.x>o.x?s.x:o.x,h=r.y>s.y?r.y>o.y?r.y:o.y:s.y>o.y?s.y:o.y,u=Ch(a,l,t,e,i),d=Ch(c,h,t,e,i);let f=n.prevZ,g=n.nextZ;for(;f&&f.z>=u&&g&&g.z<=d;){if(f!==n.prev&&f!==n.next&&ds(r.x,r.y,s.x,s.y,o.x,o.y,f.x,f.y)&&ye(f.prev,f,f.next)>=0||(f=f.prevZ,g!==n.prev&&g!==n.next&&ds(r.x,r.y,s.x,s.y,o.x,o.y,g.x,g.y)&&ye(g.prev,g,g.next)>=0))return!1;g=g.nextZ}for(;f&&f.z>=u;){if(f!==n.prev&&f!==n.next&&ds(r.x,r.y,s.x,s.y,o.x,o.y,f.x,f.y)&&ye(f.prev,f,f.next)>=0)return!1;f=f.prevZ}for(;g&&g.z<=d;){if(g!==n.prev&&g!==n.next&&ds(r.x,r.y,s.x,s.y,o.x,o.y,g.x,g.y)&&ye(g.prev,g,g.next)>=0)return!1;g=g.nextZ}return!0}function WM(n,t,e){let i=n;do{const r=i.prev,s=i.next.next;!al(r,s)&&gp(r,i,i.next,s)&&Do(r,s)&&Do(s,r)&&(t.push(r.i/e),t.push(i.i/e),t.push(s.i/e),No(i),No(i.next),i=n=s),i=i.next}while(i!==n);return Oi(i)}function $M(n,t,e,i,r,s){let o=n;do{let a=o.next.next;for(;a!==o.prev;){if(o.i!==a.i&&tw(o,a)){let l=vp(o,a);o=Oi(o,o.next),l=Oi(l,l.next),Io(o,t,e,i,r,s),Io(l,t,e,i,r,s);return}a=a.next}o=o.next}while(o!==n)}function qM(n,t,e,i){const r=[];let s,o,a,l,c;for(s=0,o=t.length;s<o;s++)a=t[s]*i,l=s<o-1?t[s+1]*i:n.length,c=mp(n,a,l,i,!1),c===c.next&&(c.steiner=!0),r.push(KM(c));for(r.sort(jM),s=0;s<r.length;s++)XM(r[s],e),e=Oi(e,e.next);return e}function jM(n,t){return n.x-t.x}function XM(n,t){if(t=YM(n,t),t){const e=vp(t,n);Oi(t,t.next),Oi(e,e.next)}}function YM(n,t){let e=t;const i=n.x,r=n.y;let s=-1/0,o;do{if(r<=e.y&&r>=e.next.y&&e.next.y!==e.y){const d=e.x+(r-e.y)*(e.next.x-e.x)/(e.next.y-e.y);if(d<=i&&d>s){if(s=d,d===i){if(r===e.y)return e;if(r===e.next.y)return e.next}o=e.x<e.next.x?e:e.next}}e=e.next}while(e!==t);if(!o)return null;if(i===s)return o;const a=o,l=o.x,c=o.y;let h=1/0,u;e=o;do i>=e.x&&e.x>=l&&i!==e.x&&ds(r<c?i:s,r,l,c,r<c?s:i,r,e.x,e.y)&&(u=Math.abs(r-e.y)/(i-e.x),Do(e,n)&&(u<h||u===h&&(e.x>o.x||e.x===o.x&&ZM(o,e)))&&(o=e,h=u)),e=e.next;while(e!==a);return o}function ZM(n,t){return ye(n.prev,n,t.prev)<0&&ye(t.next,n,n.next)<0}function JM(n,t,e,i){let r=n;do r.z===null&&(r.z=Ch(r.x,r.y,t,e,i)),r.prevZ=r.prev,r.nextZ=r.next,r=r.next;while(r!==n);r.prevZ.nextZ=null,r.prevZ=null,QM(r)}function QM(n){let t,e,i,r,s,o,a,l,c=1;do{for(e=n,n=null,s=null,o=0;e;){for(o++,i=e,a=0,t=0;t<c&&(a++,i=i.nextZ,!!i);t++);for(l=c;a>0||l>0&&i;)a!==0&&(l===0||!i||e.z<=i.z)?(r=e,e=e.nextZ,a--):(r=i,i=i.nextZ,l--),s?s.nextZ=r:n=r,r.prevZ=s,s=r;e=i}s.nextZ=null,c*=2}while(o>1);return n}function Ch(n,t,e,i,r){return n=32767*(n-e)*r,t=32767*(t-i)*r,n=(n|n<<8)&16711935,n=(n|n<<4)&252645135,n=(n|n<<2)&858993459,n=(n|n<<1)&1431655765,t=(t|t<<8)&16711935,t=(t|t<<4)&252645135,t=(t|t<<2)&858993459,t=(t|t<<1)&1431655765,n|t<<1}function KM(n){let t=n,e=n;do(t.x<e.x||t.x===e.x&&t.y<e.y)&&(e=t),t=t.next;while(t!==n);return e}function ds(n,t,e,i,r,s,o,a){return(r-o)*(t-a)-(n-o)*(s-a)>=0&&(n-o)*(i-a)-(e-o)*(t-a)>=0&&(e-o)*(s-a)-(r-o)*(i-a)>=0}function tw(n,t){return n.next.i!==t.i&&n.prev.i!==t.i&&!ew(n,t)&&(Do(n,t)&&Do(t,n)&&nw(n,t)&&(ye(n.prev,n,t.prev)||ye(n,t.prev,t))||al(n,t)&&ye(n.prev,n,n.next)>0&&ye(t.prev,t,t.next)>0)}function ye(n,t,e){return(t.y-n.y)*(e.x-t.x)-(t.x-n.x)*(e.y-t.y)}function al(n,t){return n.x===t.x&&n.y===t.y}function gp(n,t,e,i){const r=cl(ye(n,t,e)),s=cl(ye(n,t,i)),o=cl(ye(e,i,n)),a=cl(ye(e,i,t));return!!(r!==s&&o!==a||r===0&&ll(n,e,t)||s===0&&ll(n,i,t)||o===0&&ll(e,n,i)||a===0&&ll(e,t,i))}function ll(n,t,e){return t.x<=Math.max(n.x,e.x)&&t.x>=Math.min(n.x,e.x)&&t.y<=Math.max(n.y,e.y)&&t.y>=Math.min(n.y,e.y)}function cl(n){return n>0?1:n<0?-1:0}function ew(n,t){let e=n;do{if(e.i!==n.i&&e.next.i!==n.i&&e.i!==t.i&&e.next.i!==t.i&&gp(e,e.next,n,t))return!0;e=e.next}while(e!==n);return!1}function Do(n,t){return ye(n.prev,n,n.next)<0?ye(n,t,n.next)>=0&&ye(n,n.prev,t)>=0:ye(n,t,n.prev)<0||ye(n,n.next,t)<0}function nw(n,t){let e=n,i=!1;const r=(n.x+t.x)/2,s=(n.y+t.y)/2;do e.y>s!=e.next.y>s&&e.next.y!==e.y&&r<(e.next.x-e.x)*(s-e.y)/(e.next.y-e.y)+e.x&&(i=!i),e=e.next;while(e!==n);return i}function vp(n,t){const e=new Rh(n.i,n.x,n.y),i=new Rh(t.i,t.x,t.y),r=n.next,s=t.prev;return n.next=t,t.prev=n,e.next=r,r.prev=e,i.next=e,e.prev=i,s.next=i,i.prev=s,i}function xp(n,t,e,i){const r=new Rh(n,t,e);return i?(r.next=i.next,r.prev=i,i.next.prev=r,i.next=r):(r.prev=r,r.next=r),r}function No(n){n.next.prev=n.prev,n.prev.next=n.next,n.prevZ&&(n.prevZ.nextZ=n.nextZ),n.nextZ&&(n.nextZ.prevZ=n.prevZ)}function Rh(n,t,e){this.i=n,this.x=t,this.y=e,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}function iw(n,t,e,i){let r=0;for(let s=t,o=e-i;s<e;s+=i)r+=(n[o]-n[s])*(n[s+1]+n[o+1]),o=s;return r}class zi{static area(t){const e=t.length;let i=0;for(let r=e-1,s=0;s<e;r=s++)i+=t[r].x*t[s].y-t[s].x*t[r].y;return i*.5}static isClockWise(t){return zi.area(t)<0}static triangulateShape(t,e){const i=[],r=[],s=[];yp(t),_p(i,t);let o=t.length;e.forEach(yp);for(let l=0;l<e.length;l++)r.push(o),o+=e[l].length,_p(i,e[l]);const a=GM.triangulate(i,r);for(let l=0;l<a.length;l+=3)s.push(a.slice(l,l+3));return s}}function yp(n){const t=n.length;t>2&&n[t-1].equals(n[0])&&n.pop()}function _p(n,t){for(let e=0;e<t.length;e++)n.push(t[e].x),n.push(t[e].y)}class fs extends re{constructor(t=new Po([new bt(.5,.5),new bt(-.5,.5),new bt(-.5,-.5),new bt(.5,-.5)]),e={}){super();this.type="ExtrudeGeometry",this.parameters={shapes:t,options:e},t=Array.isArray(t)?t:[t];const i=this,r=[],s=[];for(let a=0,l=t.length;a<l;a++){const c=t[a];o(c)}this.setAttribute("position",new ue(r,3)),this.setAttribute("uv",new ue(s,2)),this.computeVertexNormals();function o(a){const l=[],c=e.curveSegments!==void 0?e.curveSegments:12,h=e.steps!==void 0?e.steps:1;let u=e.depth!==void 0?e.depth:1,d=e.bevelEnabled!==void 0?e.bevelEnabled:!0,f=e.bevelThickness!==void 0?e.bevelThickness:.2,g=e.bevelSize!==void 0?e.bevelSize:f-.1,v=e.bevelOffset!==void 0?e.bevelOffset:0,x=e.bevelSegments!==void 0?e.bevelSegments:3;const m=e.extrudePath,p=e.UVGenerator!==void 0?e.UVGenerator:rw;e.amount!==void 0&&(console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth."),u=e.amount);let b,_=!1,w,E,S,R;m&&(b=m.getSpacedPoints(h),_=!0,d=!1,w=m.computeFrenetFrames(h,!1),E=new O,S=new O,R=new O),d||(x=0,f=0,g=0,v=0);const W=a.extractPoints(c);let B=W.shape;const T=W.holes;if(!zi.isClockWise(B)){B=B.reverse();for(let V=0,X=T.length;V<X;V++){const Q=T[V];zi.isClockWise(Q)&&(T[V]=Q.reverse())}}const I=zi.triangulateShape(B,T),N=B;for(let V=0,X=T.length;V<X;V++){const Q=T[V];B=B.concat(Q)}function C(V,X,Q){return X||console.error("THREE.ExtrudeGeometry: vec does not exist"),X.clone().multiplyScalar(Q).add(V)}const L=B.length,F=I.length;function q(V,X,Q){let mt,et,M;const y=V.x-X.x,G=V.y-X.y,$=Q.x-V.x,P=Q.y-V.y,K=y*y+G*G,ht=y*P-G*$;if(Math.abs(ht)>Number.EPSILON){const gt=Math.sqrt(K),ct=Math.sqrt($*$+P*P),ut=X.x-G/gt,U=X.y+y/gt,dt=Q.x-P/ct,Z=Q.y+$/ct,xt=((dt-ut)*P-(Z-U)*$)/(y*P-G*$);mt=ut+y*xt-V.x,et=U+G*xt-V.y;const z=mt*mt+et*et;if(z<=2)return new bt(mt,et);M=Math.sqrt(z/2)}else{let gt=!1;y>Number.EPSILON?$>Number.EPSILON&&(gt=!0):y<-Number.EPSILON?$<-Number.EPSILON&&(gt=!0):Math.sign(G)===Math.sign(P)&&(gt=!0),gt?(mt=-G,et=y,M=Math.sqrt(K)):(mt=y,et=G,M=Math.sqrt(K/2))}return new bt(mt/M,et/M)}const ot=[];for(let V=0,X=N.length,Q=X-1,mt=V+1;V<X;V++,Q++,mt++)Q===X&&(Q=0),mt===X&&(mt=0),ot[V]=q(N[V],N[Q],N[mt]);const pt=[];let rt,Et=ot.concat();for(let V=0,X=T.length;V<X;V++){const Q=T[V];rt=[];for(let mt=0,et=Q.length,M=et-1,y=mt+1;mt<et;mt++,M++,y++)M===et&&(M=0),y===et&&(y=0),rt[mt]=q(Q[mt],Q[M],Q[y]);pt.push(rt),Et=Et.concat(rt)}for(let V=0;V<x;V++){const X=V/x,Q=f*Math.cos(X*Math.PI/2),mt=g*Math.sin(X*Math.PI/2)+v;for(let et=0,M=N.length;et<M;et++){const y=C(N[et],ot[et],mt);_t(y.x,y.y,-Q)}for(let et=0,M=T.length;et<M;et++){const y=T[et];rt=pt[et];for(let G=0,$=y.length;G<$;G++){const P=C(y[G],rt[G],mt);_t(P.x,P.y,-Q)}}}const it=g+v;for(let V=0;V<L;V++){const X=d?C(B[V],Et[V],it):B[V];_?(S.copy(w.normals[0]).multiplyScalar(X.x),E.copy(w.binormals[0]).multiplyScalar(X.y),R.copy(b[0]).add(S).add(E),_t(R.x,R.y,R.z)):_t(X.x,X.y,0)}for(let V=1;V<=h;V++)for(let X=0;X<L;X++){const Q=d?C(B[X],Et[X],it):B[X];_?(S.copy(w.normals[V]).multiplyScalar(Q.x),E.copy(w.binormals[V]).multiplyScalar(Q.y),R.copy(b[V]).add(S).add(E),_t(R.x,R.y,R.z)):_t(Q.x,Q.y,u/h*V)}for(let V=x-1;V>=0;V--){const X=V/x,Q=f*Math.cos(X*Math.PI/2),mt=g*Math.sin(X*Math.PI/2)+v;for(let et=0,M=N.length;et<M;et++){const y=C(N[et],ot[et],mt);_t(y.x,y.y,u+Q)}for(let et=0,M=T.length;et<M;et++){const y=T[et];rt=pt[et];for(let G=0,$=y.length;G<$;G++){const P=C(y[G],rt[G],mt);_?_t(P.x,P.y+b[h-1].y,b[h-1].x+Q):_t(P.x,P.y,u+Q)}}}vt(),Y();function vt(){const V=r.length/3;if(d){let X=0,Q=L*X;for(let mt=0;mt<F;mt++){const et=I[mt];Lt(et[2]+Q,et[1]+Q,et[0]+Q)}X=h+x*2,Q=L*X;for(let mt=0;mt<F;mt++){const et=I[mt];Lt(et[0]+Q,et[1]+Q,et[2]+Q)}}else{for(let X=0;X<F;X++){const Q=I[X];Lt(Q[2],Q[1],Q[0])}for(let X=0;X<F;X++){const Q=I[X];Lt(Q[0]+L*h,Q[1]+L*h,Q[2]+L*h)}}i.addGroup(V,r.length/3-V,0)}function Y(){const V=r.length/3;let X=0;st(N,X),X+=N.length;for(let Q=0,mt=T.length;Q<mt;Q++){const et=T[Q];st(et,X),X+=et.length}i.addGroup(V,r.length/3-V,1)}function st(V,X){let Q=V.length;for(;--Q>=0;){const mt=Q;let et=Q-1;et<0&&(et=V.length-1);for(let M=0,y=h+x*2;M<y;M++){const G=L*M,$=L*(M+1),P=X+mt+G,K=X+et+G,ht=X+et+$,gt=X+mt+$;yt(P,K,ht,gt)}}}function _t(V,X,Q){l.push(V),l.push(X),l.push(Q)}function Lt(V,X,Q){St(V),St(X),St(Q);const mt=r.length/3,et=p.generateTopUV(i,r,mt-3,mt-2,mt-1);At(et[0]),At(et[1]),At(et[2])}function yt(V,X,Q,mt){St(V),St(X),St(mt),St(X),St(Q),St(mt);const et=r.length/3,M=p.generateSideWallUV(i,r,et-6,et-3,et-2,et-1);At(M[0]),At(M[1]),At(M[3]),At(M[1]),At(M[2]),At(M[3])}function St(V){r.push(l[V*3+0]),r.push(l[V*3+1]),r.push(l[V*3+2])}function At(V){s.push(V.x),s.push(V.y)}}}toJSON(){const t=super.toJSON(),e=this.parameters.shapes,i=this.parameters.options;return sw(e,i,t)}static fromJSON(t,e){const i=[];for(let s=0,o=t.shapes.length;s<o;s++){const a=e[t.shapes[s]];i.push(a)}const r=t.options.extrudePath;return r!==void 0&&(t.options.extrudePath=new pp[r.type]().fromJSON(r)),new fs(i,t.options)}}const rw={generateTopUV:function(n,t,e,i,r){const s=t[e*3],o=t[e*3+1],a=t[i*3],l=t[i*3+1],c=t[r*3],h=t[r*3+1];return[new bt(s,o),new bt(a,l),new bt(c,h)]},generateSideWallUV:function(n,t,e,i,r,s){const o=t[e*3],a=t[e*3+1],l=t[e*3+2],c=t[i*3],h=t[i*3+1],u=t[i*3+2],d=t[r*3],f=t[r*3+1],g=t[r*3+2],v=t[s*3],x=t[s*3+1],m=t[s*3+2];return Math.abs(a-h)<Math.abs(o-c)?[new bt(o,1-l),new bt(c,1-u),new bt(d,1-g),new bt(v,1-m)]:[new bt(a,1-l),new bt(h,1-u),new bt(f,1-g),new bt(x,1-m)]}};function sw(n,t,e){if(e.shapes=[],Array.isArray(n))for(let i=0,r=n.length;i<r;i++){const s=n[i];e.shapes.push(s.uuid)}else e.shapes.push(n.uuid);return t.extrudePath!==void 0&&(e.options.extrudePath=t.extrudePath.toJSON()),e}class Ph extends re{constructor(t=new Po([new bt(0,.5),new bt(-.5,-.5),new bt(.5,-.5)]),e=12){super();this.type="ShapeGeometry",this.parameters={shapes:t,curveSegments:e};const i=[],r=[],s=[],o=[];let a=0,l=0;if(Array.isArray(t)===!1)c(t);else for(let h=0;h<t.length;h++)c(t[h]),this.addGroup(a,l,h),a+=l,l=0;this.setIndex(i),this.setAttribute("position",new ue(r,3)),this.setAttribute("normal",new ue(s,3)),this.setAttribute("uv",new ue(o,2));function c(h){const u=r.length/3,d=h.extractPoints(e);let f=d.shape;const g=d.holes;zi.isClockWise(f)===!1&&(f=f.reverse());for(let x=0,m=g.length;x<m;x++){const p=g[x];zi.isClockWise(p)===!0&&(g[x]=p.reverse())}const v=zi.triangulateShape(f,g);for(let x=0,m=g.length;x<m;x++){const p=g[x];f=f.concat(p)}for(let x=0,m=f.length;x<m;x++){const p=f[x];r.push(p.x,p.y,0),s.push(0,0,1),o.push(p.x,p.y)}for(let x=0,m=v.length;x<m;x++){const p=v[x],b=p[0]+u,_=p[1]+u,w=p[2]+u;i.push(b,_,w),l+=3}}}toJSON(){const t=super.toJSON(),e=this.parameters.shapes;return ow(e,t)}static fromJSON(t,e){const i=[];for(let r=0,s=t.shapes.length;r<s;r++){const o=e[t.shapes[r]];i.push(o)}return new Ph(i,t.curveSegments)}}function ow(n,t){if(t.shapes=[],Array.isArray(n))for(let e=0,i=n.length;e<i;e++){const r=n[e];t.shapes.push(r.uuid)}else t.shapes.push(n.uuid);return t}class bp extends re{constructor(t=1,e=32,i=16,r=0,s=Math.PI*2,o=0,a=Math.PI){super();this.type="SphereGeometry",this.parameters={radius:t,widthSegments:e,heightSegments:i,phiStart:r,phiLength:s,thetaStart:o,thetaLength:a},e=Math.max(3,Math.floor(e)),i=Math.max(2,Math.floor(i));const l=Math.min(o+a,Math.PI);let c=0;const h=[],u=new O,d=new O,f=[],g=[],v=[],x=[];for(let m=0;m<=i;m++){const p=[],b=m/i;let _=0;m==0&&o==0?_=.5/e:m==i&&l==Math.PI&&(_=-.5/e);for(let w=0;w<=e;w++){const E=w/e;u.x=-t*Math.cos(r+E*s)*Math.sin(o+b*a),u.y=t*Math.cos(o+b*a),u.z=t*Math.sin(r+E*s)*Math.sin(o+b*a),g.push(u.x,u.y,u.z),d.copy(u).normalize(),v.push(d.x,d.y,d.z),x.push(E+_,1-b),p.push(c++)}h.push(p)}for(let m=0;m<i;m++)for(let p=0;p<e;p++){const b=h[m][p+1],_=h[m][p],w=h[m+1][p],E=h[m+1][p+1];(m!==0||o>0)&&f.push(b,_,E),(m!==i-1||l<Math.PI)&&f.push(_,w,E)}this.setIndex(f),this.setAttribute("position",new ue(g,3)),this.setAttribute("normal",new ue(v,3)),this.setAttribute("uv",new ue(x,2))}static fromJSON(t){return new bp(t.radius,t.widthSegments,t.heightSegments,t.phiStart,t.phiLength,t.thetaStart,t.thetaLength)}}class aw extends He{constructor(t){super();this.type="ShadowMaterial",this.color=new Ft(0),this.transparent=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this}}aw.prototype.isShadowMaterial=!0;class Mp extends He{constructor(t){super();this.defines={STANDARD:""},this.type="MeshStandardMaterial",this.color=new Ft(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Ft(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Ur,this.normalScale=new bt(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapIntensity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.setValues(t)}copy(t){return super.copy(t),this.defines={STANDARD:""},this.color.copy(t.color),this.roughness=t.roughness,this.metalness=t.metalness,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.roughnessMap=t.roughnessMap,this.metalnessMap=t.metalnessMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapIntensity=t.envMapIntensity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.flatShading=t.flatShading,this}}Mp.prototype.isMeshStandardMaterial=!0;class lw extends Mp{constructor(t){super();this.defines={STANDARD:"",PHYSICAL:""},this.type="MeshPhysicalMaterial",this.clearcoatMap=null,this.clearcoatRoughness=0,this.clearcoatRoughnessMap=null,this.clearcoatNormalScale=new bt(1,1),this.clearcoatNormalMap=null,this.ior=1.5,Object.defineProperty(this,"reflectivity",{get:function(){return Ke(2.5*(this.ior-1)/(this.ior+1),0,1)},set:function(e){this.ior=(1+.4*e)/(1-.4*e)}}),this.sheenColor=new Ft(0),this.sheenColorMap=null,this.sheenRoughness=1,this.sheenRoughnessMap=null,this.transmissionMap=null,this.thickness=.01,this.thicknessMap=null,this.attenuationDistance=0,this.attenuationColor=new Ft(1,1,1),this.specularIntensity=1,this.specularIntensityMap=null,this.specularColor=new Ft(1,1,1),this.specularColorMap=null,this._sheen=0,this._clearcoat=0,this._transmission=0,this.setValues(t)}get sheen(){return this._sheen}set sheen(t){this._sheen>0!=t>0&&this.version++,this._sheen=t}get clearcoat(){return this._clearcoat}set clearcoat(t){this._clearcoat>0!=t>0&&this.version++,this._clearcoat=t}get transmission(){return this._transmission}set transmission(t){this._transmission>0!=t>0&&this.version++,this._transmission=t}copy(t){return super.copy(t),this.defines={STANDARD:"",PHYSICAL:""},this.clearcoat=t.clearcoat,this.clearcoatMap=t.clearcoatMap,this.clearcoatRoughness=t.clearcoatRoughness,this.clearcoatRoughnessMap=t.clearcoatRoughnessMap,this.clearcoatNormalMap=t.clearcoatNormalMap,this.clearcoatNormalScale.copy(t.clearcoatNormalScale),this.ior=t.ior,this.sheen=t.sheen,this.sheenColor.copy(t.sheenColor),this.sheenColorMap=t.sheenColorMap,this.sheenRoughness=t.sheenRoughness,this.sheenRoughnessMap=t.sheenRoughnessMap,this.transmission=t.transmission,this.transmissionMap=t.transmissionMap,this.thickness=t.thickness,this.thicknessMap=t.thicknessMap,this.attenuationDistance=t.attenuationDistance,this.attenuationColor.copy(t.attenuationColor),this.specularIntensity=t.specularIntensity,this.specularIntensityMap=t.specularIntensityMap,this.specularColor.copy(t.specularColor),this.specularColorMap=t.specularColorMap,this}}lw.prototype.isMeshPhysicalMaterial=!0;class cw extends He{constructor(t){super();this.type="MeshPhongMaterial",this.color=new Ft(16777215),this.specular=new Ft(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Ft(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Ur,this.normalScale=new bt(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=ya,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.specular.copy(t.specular),this.shininess=t.shininess,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.flatShading=t.flatShading,this}}cw.prototype.isMeshPhongMaterial=!0;class hw extends He{constructor(t){super();this.defines={TOON:""},this.type="MeshToonMaterial",this.color=new Ft(16777215),this.map=null,this.gradientMap=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Ft(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Ur,this.normalScale=new bt(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.gradientMap=t.gradientMap,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.alphaMap=t.alphaMap,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this}}hw.prototype.isMeshToonMaterial=!0;class uw extends He{constructor(t){super();this.type="MeshNormalMaterial",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Ur,this.normalScale=new bt(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.flatShading=!1,this.setValues(t)}copy(t){return super.copy(t),this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.flatShading=t.flatShading,this}}uw.prototype.isMeshNormalMaterial=!0;class dw extends He{constructor(t){super();this.type="MeshLambertMaterial",this.color=new Ft(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Ft(0),this.emissiveIntensity=1,this.emissiveMap=null,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=ya,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this}}dw.prototype.isMeshLambertMaterial=!0;class fw extends He{constructor(t){super();this.defines={MATCAP:""},this.type="MeshMatcapMaterial",this.color=new Ft(16777215),this.matcap=null,this.map=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=Ur,this.normalScale=new bt(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.flatShading=!1,this.setValues(t)}copy(t){return super.copy(t),this.defines={MATCAP:""},this.color.copy(t.color),this.matcap=t.matcap,this.map=t.map,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.alphaMap=t.alphaMap,this.flatShading=t.flatShading,this}}fw.prototype.isMeshMatcapMaterial=!0;class pw extends Lo{constructor(t){super();this.type="LineDashedMaterial",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(t)}copy(t){return super.copy(t),this.scale=t.scale,this.dashSize=t.dashSize,this.gapSize=t.gapSize,this}}pw.prototype.isLineDashedMaterial=!0;const ge={arraySlice:function(n,t,e){return ge.isTypedArray(n)?new n.constructor(n.subarray(t,e!==void 0?e:n.length)):n.slice(t,e)},convertArray:function(n,t,e){return!n||!e&&n.constructor===t?n:typeof t.BYTES_PER_ELEMENT=="number"?new t(n):Array.prototype.slice.call(n)},isTypedArray:function(n){return ArrayBuffer.isView(n)&&!(n instanceof DataView)},getKeyframeOrder:function(n){function t(r,s){return n[r]-n[s]}const e=n.length,i=new Array(e);for(let r=0;r!==e;++r)i[r]=r;return i.sort(t),i},sortedArray:function(n,t,e){const i=n.length,r=new n.constructor(i);for(let s=0,o=0;o!==i;++s){const a=e[s]*t;for(let l=0;l!==t;++l)r[o++]=n[a+l]}return r},flattenJSON:function(n,t,e,i){let r=1,s=n[0];for(;s!==void 0&&s[i]===void 0;)s=n[r++];if(s===void 0)return;let o=s[i];if(o!==void 0)if(Array.isArray(o))do o=s[i],o!==void 0&&(t.push(s.time),e.push.apply(e,o)),s=n[r++];while(s!==void 0);else if(o.toArray!==void 0)do o=s[i],o!==void 0&&(t.push(s.time),o.toArray(e,e.length)),s=n[r++];while(s!==void 0);else do o=s[i],o!==void 0&&(t.push(s.time),e.push(o)),s=n[r++];while(s!==void 0)},subclip:function(n,t,e,i,r=30){const s=n.clone();s.name=t;const o=[];for(let l=0;l<s.tracks.length;++l){const c=s.tracks[l],h=c.getValueSize(),u=[],d=[];for(let f=0;f<c.times.length;++f){const g=c.times[f]*r;if(!(g<e||g>=i)){u.push(c.times[f]);for(let v=0;v<h;++v)d.push(c.values[f*h+v])}}u.length!==0&&(c.times=ge.convertArray(u,c.times.constructor),c.values=ge.convertArray(d,c.values.constructor),o.push(c))}s.tracks=o;let a=1/0;for(let l=0;l<s.tracks.length;++l)a>s.tracks[l].times[0]&&(a=s.tracks[l].times[0]);for(let l=0;l<s.tracks.length;++l)s.tracks[l].shift(-1*a);return s.resetDuration(),s},makeClipAdditive:function(n,t=0,e=n,i=30){i<=0&&(i=30);const r=e.tracks.length,s=t/i;for(let o=0;o<r;++o){const a=e.tracks[o],l=a.ValueTypeName;if(l==="bool"||l==="string")continue;const c=n.tracks.find(function(m){return m.name===a.name&&m.ValueTypeName===l});if(c===void 0)continue;let h=0;const u=a.getValueSize();a.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(h=u/3);let d=0;const f=c.getValueSize();c.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(d=f/3);const g=a.times.length-1;let v;if(s<=a.times[0]){const m=h,p=u-h;v=ge.arraySlice(a.values,m,p)}else if(s>=a.times[g]){const m=g*u+h,p=m+u-h;v=ge.arraySlice(a.values,m,p)}else{const m=a.createInterpolant(),p=h,b=u-h;m.evaluate(s),v=ge.arraySlice(m.resultBuffer,p,b)}l==="quaternion"&&new Ue().fromArray(v).normalize().conjugate().toArray(v);const x=c.times.length;for(let m=0;m<x;++m){const p=m*f+d;if(l==="quaternion")Ue.multiplyQuaternionsFlat(c.values,p,v,0,c.values,p);else{const b=f-d*2;for(let _=0;_<b;++_)c.values[p+_]-=v[_]}}}return n.blendMode=Nd,n}};class Ui{constructor(t,e,i,r){this.parameterPositions=t,this._cachedIndex=0,this.resultBuffer=r!==void 0?r:new e.constructor(i),this.sampleValues=e,this.valueSize=i,this.settings=null,this.DefaultSettings_={}}evaluate(t){const e=this.parameterPositions;let i=this._cachedIndex,r=e[i],s=e[i-1];t:{e:{let o;n:{i:if(!(t<r)){for(let a=i+2;;){if(r===void 0){if(t<s)break i;return i=e.length,this._cachedIndex=i,this.afterEnd_(i-1,t,s)}if(i===a)break;if(s=r,r=e[++i],t<r)break e}o=e.length;break n}if(!(t>=s)){const a=e[1];t<a&&(i=2,s=a);for(let l=i-2;;){if(s===void 0)return this._cachedIndex=0,this.beforeStart_(0,t,r);if(i===l)break;if(r=s,s=e[--i-1],t>=s)break e}o=i,i=0;break n}break t}for(;i<o;){const a=i+o>>>1;t<e[a]?o=a:i=a+1}if(r=e[i],s=e[i-1],s===void 0)return this._cachedIndex=0,this.beforeStart_(0,t,r);if(r===void 0)return i=e.length,this._cachedIndex=i,this.afterEnd_(i-1,s,t)}this._cachedIndex=i,this.intervalChanged_(i,s,r)}return this.interpolate_(i,s,t,r)}getSettings_(){return this.settings||this.DefaultSettings_}copySampleValue_(t){const e=this.resultBuffer,i=this.sampleValues,r=this.valueSize,s=t*r;for(let o=0;o!==r;++o)e[o]=i[s+o];return e}interpolate_(){throw new Error("call to abstract method")}intervalChanged_(){}}Ui.prototype.beforeStart_=Ui.prototype.copySampleValue_;Ui.prototype.afterEnd_=Ui.prototype.copySampleValue_;class mw extends Ui{constructor(t,e,i,r){super(t,e,i,r);this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0,this.DefaultSettings_={endingStart:Or,endingEnd:Or}}intervalChanged_(t,e,i){const r=this.parameterPositions;let s=t-2,o=t+1,a=r[s],l=r[o];if(a===void 0)switch(this.getSettings_().endingStart){case zr:s=t,a=2*e-i;break;case Ta:s=r.length-2,a=e+r[s]-r[s+1];break;default:s=t,a=i}if(l===void 0)switch(this.getSettings_().endingEnd){case zr:o=t,l=2*i-e;break;case Ta:o=1,l=i+r[1]-r[0];break;default:o=t-1,l=e}const c=(i-e)*.5,h=this.valueSize;this._weightPrev=c/(e-a),this._weightNext=c/(l-i),this._offsetPrev=s*h,this._offsetNext=o*h}interpolate_(t,e,i,r){const s=this.resultBuffer,o=this.sampleValues,a=this.valueSize,l=t*a,c=l-a,h=this._offsetPrev,u=this._offsetNext,d=this._weightPrev,f=this._weightNext,g=(i-e)/(r-e),v=g*g,x=v*g,m=-d*x+2*d*v-d*g,p=(1+d)*x+(-1.5-2*d)*v+(-.5+d)*g+1,b=(-1-f)*x+(1.5+f)*v+.5*g,_=f*x-f*v;for(let w=0;w!==a;++w)s[w]=m*o[h+w]+p*o[c+w]+b*o[l+w]+_*o[u+w];return s}}class wp extends Ui{constructor(t,e,i,r){super(t,e,i,r)}interpolate_(t,e,i,r){const s=this.resultBuffer,o=this.sampleValues,a=this.valueSize,l=t*a,c=l-a,h=(i-e)/(r-e),u=1-h;for(let d=0;d!==a;++d)s[d]=o[c+d]*u+o[l+d]*h;return s}}class gw extends Ui{constructor(t,e,i,r){super(t,e,i,r)}interpolate_(t){return this.copySampleValue_(t-1)}}class Vn{constructor(t,e,i,r){if(t===void 0)throw new Error("THREE.KeyframeTrack: track name is undefined");if(e===void 0||e.length===0)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+t);this.name=t,this.times=ge.convertArray(e,this.TimeBufferType),this.values=ge.convertArray(i,this.ValueBufferType),this.setInterpolation(r||this.DefaultInterpolation)}static toJSON(t){const e=t.constructor;let i;if(e.toJSON!==this.toJSON)i=e.toJSON(t);else{i={name:t.name,times:ge.convertArray(t.times,Array),values:ge.convertArray(t.values,Array)};const r=t.getInterpolation();r!==t.DefaultInterpolation&&(i.interpolation=r)}return i.type=t.ValueTypeName,i}InterpolantFactoryMethodDiscrete(t){return new gw(this.times,this.values,this.getValueSize(),t)}InterpolantFactoryMethodLinear(t){return new wp(this.times,this.values,this.getValueSize(),t)}InterpolantFactoryMethodSmooth(t){return new mw(this.times,this.values,this.getValueSize(),t)}setInterpolation(t){let e;switch(t){case Sa:e=this.InterpolantFactoryMethodDiscrete;break;case Ea:e=this.InterpolantFactoryMethodLinear;break;case Sc:e=this.InterpolantFactoryMethodSmooth;break}if(e===void 0){const i="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(this.createInterpolant===void 0)if(t!==this.DefaultInterpolation)this.setInterpolation(this.DefaultInterpolation);else throw new Error(i);return console.warn("THREE.KeyframeTrack:",i),this}return this.createInterpolant=e,this}getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return Sa;case this.InterpolantFactoryMethodLinear:return Ea;case this.InterpolantFactoryMethodSmooth:return Sc}}getValueSize(){return this.values.length/this.times.length}shift(t){if(t!==0){const e=this.times;for(let i=0,r=e.length;i!==r;++i)e[i]+=t}return this}scale(t){if(t!==1){const e=this.times;for(let i=0,r=e.length;i!==r;++i)e[i]*=t}return this}trim(t,e){const i=this.times,r=i.length;let s=0,o=r-1;for(;s!==r&&i[s]<t;)++s;for(;o!==-1&&i[o]>e;)--o;if(++o,s!==0||o!==r){s>=o&&(o=Math.max(o,1),s=o-1);const a=this.getValueSize();this.times=ge.arraySlice(i,s,o),this.values=ge.arraySlice(this.values,s*a,o*a)}return this}validate(){let t=!0;const e=this.getValueSize();e-Math.floor(e)!=0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),t=!1);const i=this.times,r=this.values,s=i.length;s===0&&(console.error("THREE.KeyframeTrack: Track is empty.",this),t=!1);let o=null;for(let a=0;a!==s;a++){const l=i[a];if(typeof l=="number"&&isNaN(l)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,a,l),t=!1;break}if(o!==null&&o>l){console.error("THREE.KeyframeTrack: Out of order keys.",this,a,l,o),t=!1;break}o=l}if(r!==void 0&&ge.isTypedArray(r))for(let a=0,l=r.length;a!==l;++a){const c=r[a];if(isNaN(c)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,a,c),t=!1;break}}return t}optimize(){const t=ge.arraySlice(this.times),e=ge.arraySlice(this.values),i=this.getValueSize(),r=this.getInterpolation()===Sc,s=t.length-1;let o=1;for(let a=1;a<s;++a){let l=!1;const c=t[a],h=t[a+1];if(c!==h&&(a!==1||c!==t[0]))if(r)l=!0;else{const u=a*i,d=u-i,f=u+i;for(let g=0;g!==i;++g){const v=e[u+g];if(v!==e[d+g]||v!==e[f+g]){l=!0;break}}}if(l){if(a!==o){t[o]=t[a];const u=a*i,d=o*i;for(let f=0;f!==i;++f)e[d+f]=e[u+f]}++o}}if(s>0){t[o]=t[s];for(let a=s*i,l=o*i,c=0;c!==i;++c)e[l+c]=e[a+c];++o}return o!==t.length?(this.times=ge.arraySlice(t,0,o),this.values=ge.arraySlice(e,0,o*i)):(this.times=t,this.values=e),this}clone(){const t=ge.arraySlice(this.times,0),e=ge.arraySlice(this.values,0),i=this.constructor,r=new i(this.name,t,e);return r.createInterpolant=this.createInterpolant,r}}Vn.prototype.TimeBufferType=Float32Array;Vn.prototype.ValueBufferType=Float32Array;Vn.prototype.DefaultInterpolation=Ea;class ps extends Vn{}ps.prototype.ValueTypeName="bool";ps.prototype.ValueBufferType=Array;ps.prototype.DefaultInterpolation=Sa;ps.prototype.InterpolantFactoryMethodLinear=void 0;ps.prototype.InterpolantFactoryMethodSmooth=void 0;class Sp extends Vn{}Sp.prototype.ValueTypeName="color";class hl extends Vn{}hl.prototype.ValueTypeName="number";class vw extends Ui{constructor(t,e,i,r){super(t,e,i,r)}interpolate_(t,e,i,r){const s=this.resultBuffer,o=this.sampleValues,a=this.valueSize,l=(i-e)/(r-e);let c=t*a;for(let h=c+a;c!==h;c+=4)Ue.slerpFlat(s,0,o,c-a,o,c,l);return s}}class Fo extends Vn{InterpolantFactoryMethodLinear(t){return new vw(this.times,this.values,this.getValueSize(),t)}}Fo.prototype.ValueTypeName="quaternion";Fo.prototype.DefaultInterpolation=Ea;Fo.prototype.InterpolantFactoryMethodSmooth=void 0;class ms extends Vn{}ms.prototype.ValueTypeName="string";ms.prototype.ValueBufferType=Array;ms.prototype.DefaultInterpolation=Sa;ms.prototype.InterpolantFactoryMethodLinear=void 0;ms.prototype.InterpolantFactoryMethodSmooth=void 0;class ul extends Vn{}ul.prototype.ValueTypeName="vector";class Ep{constructor(t,e=-1,i,r=Ec){this.name=t,this.tracks=i,this.duration=e,this.blendMode=r,this.uuid=Un(),this.duration<0&&this.resetDuration()}static parse(t){const e=[],i=t.tracks,r=1/(t.fps||1);for(let o=0,a=i.length;o!==a;++o)e.push(yw(i[o]).scale(r));const s=new this(t.name,t.duration,e,t.blendMode);return s.uuid=t.uuid,s}static toJSON(t){const e=[],i=t.tracks,r={name:t.name,duration:t.duration,tracks:e,uuid:t.uuid,blendMode:t.blendMode};for(let s=0,o=i.length;s!==o;++s)e.push(Vn.toJSON(i[s]));return r}static CreateFromMorphTargetSequence(t,e,i,r){const s=e.length,o=[];for(let a=0;a<s;a++){let l=[],c=[];l.push((a+s-1)%s,a,(a+1)%s),c.push(0,1,0);const h=ge.getKeyframeOrder(l);l=ge.sortedArray(l,1,h),c=ge.sortedArray(c,1,h),!r&&l[0]===0&&(l.push(s),c.push(c[0])),o.push(new hl(".morphTargetInfluences["+e[a].name+"]",l,c).scale(1/i))}return new this(t,-1,o)}static findByName(t,e){let i=t;if(!Array.isArray(t)){const r=t;i=r.geometry&&r.geometry.animations||r.animations}for(let r=0;r<i.length;r++)if(i[r].name===e)return i[r];return null}static CreateClipsFromMorphTargetSequences(t,e,i){const r={},s=/^([\w-]*?)([\d]+)$/;for(let a=0,l=t.length;a<l;a++){const c=t[a],h=c.name.match(s);if(h&&h.length>1){const u=h[1];let d=r[u];d||(r[u]=d=[]),d.push(c)}}const o=[];for(const a in r)o.push(this.CreateFromMorphTargetSequence(a,r[a],e,i));return o}static parseAnimation(t,e){if(!t)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;const i=function(u,d,f,g,v){if(f.length!==0){const x=[],m=[];ge.flattenJSON(f,x,m,g),x.length!==0&&v.push(new u(d,x,m))}},r=[],s=t.name||"default",o=t.fps||30,a=t.blendMode;let l=t.length||-1;const c=t.hierarchy||[];for(let u=0;u<c.length;u++){const d=c[u].keys;if(!(!d||d.length===0))if(d[0].morphTargets){const f={};let g;for(g=0;g<d.length;g++)if(d[g].morphTargets)for(let v=0;v<d[g].morphTargets.length;v++)f[d[g].morphTargets[v]]=-1;for(const v in f){const x=[],m=[];for(let p=0;p!==d[g].morphTargets.length;++p){const b=d[g];x.push(b.time),m.push(b.morphTarget===v?1:0)}r.push(new hl(".morphTargetInfluence["+v+"]",x,m))}l=f.length*(o||1)}else{const f=".bones["+e[u].name+"]";i(ul,f+".position",d,"pos",r),i(Fo,f+".quaternion",d,"rot",r),i(ul,f+".scale",d,"scl",r)}}return r.length===0?null:new this(s,l,r,a)}resetDuration(){const t=this.tracks;let e=0;for(let i=0,r=t.length;i!==r;++i){const s=this.tracks[i];e=Math.max(e,s.times[s.times.length-1])}return this.duration=e,this}trim(){for(let t=0;t<this.tracks.length;t++)this.tracks[t].trim(0,this.duration);return this}validate(){let t=!0;for(let e=0;e<this.tracks.length;e++)t=t&&this.tracks[e].validate();return t}optimize(){for(let t=0;t<this.tracks.length;t++)this.tracks[t].optimize();return this}clone(){const t=[];for(let e=0;e<this.tracks.length;e++)t.push(this.tracks[e].clone());return new this.constructor(this.name,this.duration,t,this.blendMode)}toJSON(){return this.constructor.toJSON(this)}}function xw(n){switch(n.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return hl;case"vector":case"vector2":case"vector3":case"vector4":return ul;case"color":return Sp;case"quaternion":return Fo;case"bool":case"boolean":return ps;case"string":return ms}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+n)}function yw(n){if(n.type===void 0)throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");const t=xw(n.type);if(n.times===void 0){const e=[],i=[];ge.flattenJSON(n.keys,e,i,"value"),n.times=e,n.values=i}return t.parse!==void 0?t.parse(n):new t(n.name,n.times,n.values,n.interpolation)}const gs={enabled:!1,files:{},add:function(n,t){this.enabled!==!1&&(this.files[n]=t)},get:function(n){if(this.enabled!==!1)return this.files[n]},remove:function(n){delete this.files[n]},clear:function(){this.files={}}};class _w{constructor(t,e,i){const r=this;let s=!1,o=0,a=0,l;const c=[];this.onStart=void 0,this.onLoad=t,this.onProgress=e,this.onError=i,this.itemStart=function(h){a++,s===!1&&r.onStart!==void 0&&r.onStart(h,o,a),s=!0},this.itemEnd=function(h){o++,r.onProgress!==void 0&&r.onProgress(h,o,a),o===a&&(s=!1,r.onLoad!==void 0&&r.onLoad())},this.itemError=function(h){r.onError!==void 0&&r.onError(h)},this.resolveURL=function(h){return l?l(h):h},this.setURLModifier=function(h){return l=h,this},this.addHandler=function(h,u){return c.push(h,u),this},this.removeHandler=function(h){const u=c.indexOf(h);return u!==-1&&c.splice(u,2),this},this.getHandler=function(h){for(let u=0,d=c.length;u<d;u+=2){const f=c[u],g=c[u+1];if(f.global&&(f.lastIndex=0),f.test(h))return g}return null}}}const bw=new _w;class ai{constructor(t){this.manager=t!==void 0?t:bw,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={}}load(){}loadAsync(t,e){const i=this;return new Promise(function(r,s){i.load(t,r,e,s)})}parse(){}setCrossOrigin(t){return this.crossOrigin=t,this}setWithCredentials(t){return this.withCredentials=t,this}setPath(t){return this.path=t,this}setResourcePath(t){return this.resourcePath=t,this}setRequestHeader(t){return this.requestHeader=t,this}}const li={};class Tp extends ai{constructor(t){super(t)}load(t,e,i,r){t===void 0&&(t=""),this.path!==void 0&&(t=this.path+t),t=this.manager.resolveURL(t);const s=gs.get(t);if(s!==void 0)return this.manager.itemStart(t),setTimeout(()=>{e&&e(s),this.manager.itemEnd(t)},0),s;if(li[t]!==void 0){li[t].push({onLoad:e,onProgress:i,onError:r});return}li[t]=[],li[t].push({onLoad:e,onProgress:i,onError:r});const o=new Request(t,{headers:new Headers(this.requestHeader),credentials:this.withCredentials?"include":"same-origin"});fetch(o).then(a=>{if(a.status===200||a.status===0){a.status===0&&console.warn("THREE.FileLoader: HTTP Status 0 received.");const l=li[t],c=a.body.getReader(),h=a.headers.get("Content-Length"),u=h?parseInt(h):0,d=u!==0;let f=0;return new ReadableStream({start(g){v();function v(){c.read().then(({done:x,value:m})=>{if(x)g.close();else{f+=m.byteLength;const p=new ProgressEvent("progress",{lengthComputable:d,loaded:f,total:u});for(let b=0,_=l.length;b<_;b++){const w=l[b];w.onProgress&&w.onProgress(p)}g.enqueue(m),v()}})}}})}else throw Error(`fetch for "${a.url}" responded with ${a.status}: ${a.statusText}`)}).then(a=>{const l=new Response(a);switch(this.responseType){case"arraybuffer":return l.arrayBuffer();case"blob":return l.blob();case"document":return l.text().then(c=>new DOMParser().parseFromString(c,this.mimeType));case"json":return l.json();default:return l.text()}}).then(a=>{gs.add(t,a);const l=li[t];delete li[t];for(let c=0,h=l.length;c<h;c++){const u=l[c];u.onLoad&&u.onLoad(a)}this.manager.itemEnd(t)}).catch(a=>{const l=li[t];delete li[t];for(let c=0,h=l.length;c<h;c++){const u=l[c];u.onError&&u.onError(a)}this.manager.itemError(t),this.manager.itemEnd(t)}),this.manager.itemStart(t)}setResponseType(t){return this.responseType=t,this}setMimeType(t){return this.mimeType=t,this}}class Ap extends ai{constructor(t){super(t)}load(t,e,i,r){this.path!==void 0&&(t=this.path+t),t=this.manager.resolveURL(t);const s=this,o=gs.get(t);if(o!==void 0)return s.manager.itemStart(t),setTimeout(function(){e&&e(o),s.manager.itemEnd(t)},0),o;const a=La("img");function l(){h(),gs.add(t,this),e&&e(this),s.manager.itemEnd(t)}function c(u){h(),r&&r(u),s.manager.itemError(t),s.manager.itemEnd(t)}function h(){a.removeEventListener("load",l,!1),a.removeEventListener("error",c,!1)}return a.addEventListener("load",l,!1),a.addEventListener("error",c,!1),t.substr(0,5)!=="data:"&&this.crossOrigin!==void 0&&(a.crossOrigin=this.crossOrigin),s.manager.itemStart(t),a.src=t,a}}class Mw extends ai{constructor(t){super(t)}load(t,e,i,r){const s=new $a,o=new Ap(this.manager);o.setCrossOrigin(this.crossOrigin),o.setPath(this.path);let a=0;function l(c){o.load(t[c],function(h){s.images[c]=h,a++,a===6&&(s.needsUpdate=!0,e&&e(s))},void 0,r)}for(let c=0;c<t.length;++c)l(c);return s}}class ww extends ai{constructor(t){super(t)}load(t,e,i,r){const s=new De,o=new Ap(this.manager);return o.setCrossOrigin(this.crossOrigin),o.setPath(this.path),o.load(t,function(a){s.image=a,s.needsUpdate=!0,e!==void 0&&e(s)},i,r),s}}class Wn extends ne{constructor(t,e=1){super();this.type="Light",this.color=new Ft(t),this.intensity=e}dispose(){}copy(t){return super.copy(t),this.color.copy(t.color),this.intensity=t.intensity,this}toJSON(t){const e=super.toJSON(t);return e.object.color=this.color.getHex(),e.object.intensity=this.intensity,this.groundColor!==void 0&&(e.object.groundColor=this.groundColor.getHex()),this.distance!==void 0&&(e.object.distance=this.distance),this.angle!==void 0&&(e.object.angle=this.angle),this.decay!==void 0&&(e.object.decay=this.decay),this.penumbra!==void 0&&(e.object.penumbra=this.penumbra),this.shadow!==void 0&&(e.object.shadow=this.shadow.toJSON()),e}}Wn.prototype.isLight=!0;class Sw extends Wn{constructor(t,e,i){super(t,i);this.type="HemisphereLight",this.position.copy(ne.DefaultUp),this.updateMatrix(),this.groundColor=new Ft(e)}copy(t){return Wn.prototype.copy.call(this,t),this.groundColor.copy(t.groundColor),this}}Sw.prototype.isHemisphereLight=!0;const Lp=new Ht,Cp=new O,Rp=new O;class Ih{constructor(t){this.camera=t,this.bias=0,this.normalBias=0,this.radius=1,this.blurSamples=8,this.mapSize=new bt(512,512),this.map=null,this.mapPass=null,this.matrix=new Ht,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new ja,this._frameExtents=new bt(1,1),this._viewportCount=1,this._viewports=[new oe(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(t){const e=this.camera,i=this.matrix;Cp.setFromMatrixPosition(t.matrixWorld),e.position.copy(Cp),Rp.setFromMatrixPosition(t.target.matrixWorld),e.lookAt(Rp),e.updateMatrixWorld(),Lp.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),this._frustum.setFromProjectionMatrix(Lp),i.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),i.multiply(e.projectionMatrix),i.multiply(e.matrixWorldInverse)}getViewport(t){return this._viewports[t]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(t){return this.camera=t.camera.clone(),this.bias=t.bias,this.radius=t.radius,this.mapSize.copy(t.mapSize),this}clone(){return new this.constructor().copy(this)}toJSON(){const t={};return this.bias!==0&&(t.bias=this.bias),this.normalBias!==0&&(t.normalBias=this.normalBias),this.radius!==1&&(t.radius=this.radius),(this.mapSize.x!==512||this.mapSize.y!==512)&&(t.mapSize=this.mapSize.toArray()),t.camera=this.camera.toJSON(!1).object,delete t.camera.matrix,t}}class Pp extends Ih{constructor(){super(new en(50,1,.5,500));this.focus=1}updateMatrices(t){const e=this.camera,i=Rc*2*t.angle*this.focus,r=this.mapSize.width/this.mapSize.height,s=t.distance||e.far;(i!==e.fov||r!==e.aspect||s!==e.far)&&(e.fov=i,e.aspect=r,e.far=s,e.updateProjectionMatrix()),super.updateMatrices(t)}copy(t){return super.copy(t),this.focus=t.focus,this}}Pp.prototype.isSpotLightShadow=!0;class Ew extends Wn{constructor(t,e,i=0,r=Math.PI/3,s=0,o=1){super(t,e);this.type="SpotLight",this.position.copy(ne.DefaultUp),this.updateMatrix(),this.target=new ne,this.distance=i,this.angle=r,this.penumbra=s,this.decay=o,this.shadow=new Pp}get power(){return this.intensity*Math.PI}set power(t){this.intensity=t/Math.PI}dispose(){this.shadow.dispose()}copy(t){return super.copy(t),this.distance=t.distance,this.angle=t.angle,this.penumbra=t.penumbra,this.decay=t.decay,this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}Ew.prototype.isSpotLight=!0;const Ip=new Ht,Bo=new O,Dh=new O;class Dp extends Ih{constructor(){super(new en(90,1,.5,500));this._frameExtents=new bt(4,2),this._viewportCount=6,this._viewports=[new oe(2,1,1,1),new oe(0,1,1,1),new oe(3,1,1,1),new oe(1,1,1,1),new oe(3,0,1,1),new oe(1,0,1,1)],this._cubeDirections=[new O(1,0,0),new O(-1,0,0),new O(0,0,1),new O(0,0,-1),new O(0,1,0),new O(0,-1,0)],this._cubeUps=[new O(0,1,0),new O(0,1,0),new O(0,1,0),new O(0,1,0),new O(0,0,1),new O(0,0,-1)]}updateMatrices(t,e=0){const i=this.camera,r=this.matrix,s=t.distance||i.far;s!==i.far&&(i.far=s,i.updateProjectionMatrix()),Bo.setFromMatrixPosition(t.matrixWorld),i.position.copy(Bo),Dh.copy(i.position),Dh.add(this._cubeDirections[e]),i.up.copy(this._cubeUps[e]),i.lookAt(Dh),i.updateMatrixWorld(),r.makeTranslation(-Bo.x,-Bo.y,-Bo.z),Ip.multiplyMatrices(i.projectionMatrix,i.matrixWorldInverse),this._frustum.setFromProjectionMatrix(Ip)}}Dp.prototype.isPointLightShadow=!0;class Tw extends Wn{constructor(t,e,i=0,r=1){super(t,e);this.type="PointLight",this.distance=i,this.decay=r,this.shadow=new Dp}get power(){return this.intensity*4*Math.PI}set power(t){this.intensity=t/(4*Math.PI)}dispose(){this.shadow.dispose()}copy(t){return super.copy(t),this.distance=t.distance,this.decay=t.decay,this.shadow=t.shadow.clone(),this}}Tw.prototype.isPointLight=!0;class Np extends Ih{constructor(){super(new sh(-5,5,5,-5,.5,500))}}Np.prototype.isDirectionalLightShadow=!0;class Aw extends Wn{constructor(t,e){super(t,e);this.type="DirectionalLight",this.position.copy(ne.DefaultUp),this.updateMatrix(),this.target=new ne,this.shadow=new Np}dispose(){this.shadow.dispose()}copy(t){return super.copy(t),this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}Aw.prototype.isDirectionalLight=!0;class Lw extends Wn{constructor(t,e){super(t,e);this.type="AmbientLight"}}Lw.prototype.isAmbientLight=!0;class Cw extends Wn{constructor(t,e,i=10,r=10){super(t,e);this.type="RectAreaLight",this.width=i,this.height=r}get power(){return this.intensity*this.width*this.height*Math.PI}set power(t){this.intensity=t/(this.width*this.height*Math.PI)}copy(t){return super.copy(t),this.width=t.width,this.height=t.height,this}toJSON(t){const e=super.toJSON(t);return e.object.width=this.width,e.object.height=this.height,e}}Cw.prototype.isRectAreaLight=!0;class Fp{constructor(){this.coefficients=[];for(let t=0;t<9;t++)this.coefficients.push(new O)}set(t){for(let e=0;e<9;e++)this.coefficients[e].copy(t[e]);return this}zero(){for(let t=0;t<9;t++)this.coefficients[t].set(0,0,0);return this}getAt(t,e){const i=t.x,r=t.y,s=t.z,o=this.coefficients;return e.copy(o[0]).multiplyScalar(.282095),e.addScaledVector(o[1],.488603*r),e.addScaledVector(o[2],.488603*s),e.addScaledVector(o[3],.488603*i),e.addScaledVector(o[4],1.092548*(i*r)),e.addScaledVector(o[5],1.092548*(r*s)),e.addScaledVector(o[6],.315392*(3*s*s-1)),e.addScaledVector(o[7],1.092548*(i*s)),e.addScaledVector(o[8],.546274*(i*i-r*r)),e}getIrradianceAt(t,e){const i=t.x,r=t.y,s=t.z,o=this.coefficients;return e.copy(o[0]).multiplyScalar(.886227),e.addScaledVector(o[1],2*.511664*r),e.addScaledVector(o[2],2*.511664*s),e.addScaledVector(o[3],2*.511664*i),e.addScaledVector(o[4],2*.429043*i*r),e.addScaledVector(o[5],2*.429043*r*s),e.addScaledVector(o[6],.743125*s*s-.247708),e.addScaledVector(o[7],2*.429043*i*s),e.addScaledVector(o[8],.429043*(i*i-r*r)),e}add(t){for(let e=0;e<9;e++)this.coefficients[e].add(t.coefficients[e]);return this}addScaledSH(t,e){for(let i=0;i<9;i++)this.coefficients[i].addScaledVector(t.coefficients[i],e);return this}scale(t){for(let e=0;e<9;e++)this.coefficients[e].multiplyScalar(t);return this}lerp(t,e){for(let i=0;i<9;i++)this.coefficients[i].lerp(t.coefficients[i],e);return this}equals(t){for(let e=0;e<9;e++)if(!this.coefficients[e].equals(t.coefficients[e]))return!1;return!0}copy(t){return this.set(t.coefficients)}clone(){return new this.constructor().copy(this)}fromArray(t,e=0){const i=this.coefficients;for(let r=0;r<9;r++)i[r].fromArray(t,e+r*3);return this}toArray(t=[],e=0){const i=this.coefficients;for(let r=0;r<9;r++)i[r].toArray(t,e+r*3);return t}static getBasisAt(t,e){const i=t.x,r=t.y,s=t.z;e[0]=.282095,e[1]=.488603*r,e[2]=.488603*s,e[3]=.488603*i,e[4]=1.092548*i*r,e[5]=1.092548*r*s,e[6]=.315392*(3*s*s-1),e[7]=1.092548*i*s,e[8]=.546274*(i*i-r*r)}}Fp.prototype.isSphericalHarmonics3=!0;class Nh extends Wn{constructor(t=new Fp,e=1){super(void 0,e);this.sh=t}copy(t){return super.copy(t),this.sh.copy(t.sh),this}fromJSON(t){return this.intensity=t.intensity,this.sh.fromArray(t.sh),this}toJSON(t){const e=super.toJSON(t);return e.object.sh=this.sh.toArray(),e}}Nh.prototype.isLightProbe=!0;class Bp{static decodeText(t){if(typeof TextDecoder!="undefined")return new TextDecoder().decode(t);let e="";for(let i=0,r=t.length;i<r;i++)e+=String.fromCharCode(t[i]);try{return decodeURIComponent(escape(e))}catch{return e}}static extractUrlBase(t){const e=t.lastIndexOf("/");return e===-1?"./":t.substr(0,e+1)}static resolveURL(t,e){return typeof t!="string"||t===""?"":(/^https?:\/\//i.test(e)&&/^\//.test(t)&&(e=e.replace(/(^https?:\/\/[^\/]+).*/i,"$1")),/^(https?:)?\/\//i.test(t)||/^data:.*,.*$/i.test(t)||/^blob:.*$/i.test(t)?t:e+t)}}class Rw extends re{constructor(){super();this.type="InstancedBufferGeometry",this.instanceCount=1/0}copy(t){return super.copy(t),this.instanceCount=t.instanceCount,this}clone(){return new this.constructor().copy(this)}toJSON(){const t=super.toJSON(this);return t.instanceCount=this.instanceCount,t.isInstancedBufferGeometry=!0,t}}Rw.prototype.isInstancedBufferGeometry=!0;class Pw extends ai{constructor(t){super(t);typeof createImageBitmap=="undefined"&&console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),typeof fetch=="undefined"&&console.warn("THREE.ImageBitmapLoader: fetch() not supported."),this.options={premultiplyAlpha:"none"}}setOptions(t){return this.options=t,this}load(t,e,i,r){t===void 0&&(t=""),this.path!==void 0&&(t=this.path+t),t=this.manager.resolveURL(t);const s=this,o=gs.get(t);if(o!==void 0)return s.manager.itemStart(t),setTimeout(function(){e&&e(o),s.manager.itemEnd(t)},0),o;const a={};a.credentials=this.crossOrigin==="anonymous"?"same-origin":"include",a.headers=this.requestHeader,fetch(t,a).then(function(l){return l.blob()}).then(function(l){return createImageBitmap(l,Object.assign(s.options,{colorSpaceConversion:"none"}))}).then(function(l){gs.add(t,l),e&&e(l),s.manager.itemEnd(t)}).catch(function(l){r&&r(l),s.manager.itemError(t),s.manager.itemEnd(t)}),s.manager.itemStart(t)}}Pw.prototype.isImageBitmapLoader=!0;let dl;const Iw={getContext:function(){return dl===void 0&&(dl=new(window.AudioContext||window.webkitAudioContext)),dl},setContext:function(n){dl=n}};class Dw extends ai{constructor(t){super(t)}load(t,e,i,r){const s=this,o=new Tp(this.manager);o.setResponseType("arraybuffer"),o.setPath(this.path),o.setRequestHeader(this.requestHeader),o.setWithCredentials(this.withCredentials),o.load(t,function(a){try{const l=a.slice(0);Iw.getContext().decodeAudioData(l,function(h){e(h)})}catch(l){r?r(l):console.error(l),s.manager.itemError(t)}},i,r)}}class Nw extends Nh{constructor(t,e,i=1){super(void 0,i);const r=new Ft().set(t),s=new Ft().set(e),o=new O(r.r,r.g,r.b),a=new O(s.r,s.g,s.b),l=Math.sqrt(Math.PI),c=l*Math.sqrt(.75);this.sh.coefficients[0].copy(o).add(a).multiplyScalar(l),this.sh.coefficients[1].copy(o).sub(a).multiplyScalar(c)}}Nw.prototype.isHemisphereLightProbe=!0;class Fw extends Nh{constructor(t,e=1){super(void 0,e);const i=new Ft().set(t);this.sh.coefficients[0].set(i.r,i.g,i.b).multiplyScalar(2*Math.sqrt(Math.PI))}}Fw.prototype.isAmbientLightProbe=!0;class Bw extends ne{constructor(t){super();this.type="Audio",this.listener=t,this.context=t.context,this.gain=this.context.createGain(),this.gain.connect(t.getInput()),this.autoplay=!1,this.buffer=null,this.detune=0,this.loop=!1,this.loopStart=0,this.loopEnd=0,this.offset=0,this.duration=void 0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.source=null,this.sourceType="empty",this._startedAt=0,this._progress=0,this._connected=!1,this.filters=[]}getOutput(){return this.gain}setNodeSource(t){return this.hasPlaybackControl=!1,this.sourceType="audioNode",this.source=t,this.connect(),this}setMediaElementSource(t){return this.hasPlaybackControl=!1,this.sourceType="mediaNode",this.source=this.context.createMediaElementSource(t),this.connect(),this}setMediaStreamSource(t){return this.hasPlaybackControl=!1,this.sourceType="mediaStreamNode",this.source=this.context.createMediaStreamSource(t),this.connect(),this}setBuffer(t){return this.buffer=t,this.sourceType="buffer",this.autoplay&&this.play(),this}play(t=0){if(this.isPlaying===!0){console.warn("THREE.Audio: Audio is already playing.");return}if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}this._startedAt=this.context.currentTime+t;const e=this.context.createBufferSource();return e.buffer=this.buffer,e.loop=this.loop,e.loopStart=this.loopStart,e.loopEnd=this.loopEnd,e.onended=this.onEnded.bind(this),e.start(this._startedAt,this._progress+this.offset,this.duration),this.isPlaying=!0,this.source=e,this.setDetune(this.detune),this.setPlaybackRate(this.playbackRate),this.connect()}pause(){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.isPlaying===!0&&(this._progress+=Math.max(this.context.currentTime-this._startedAt,0)*this.playbackRate,this.loop===!0&&(this._progress=this._progress%(this.duration||this.buffer.duration)),this.source.stop(),this.source.onended=null,this.isPlaying=!1),this}stop(){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this._progress=0,this.source.stop(),this.source.onended=null,this.isPlaying=!1,this}connect(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(let t=1,e=this.filters.length;t<e;t++)this.filters[t-1].connect(this.filters[t]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this._connected=!0,this}disconnect(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(let t=1,e=this.filters.length;t<e;t++)this.filters[t-1].disconnect(this.filters[t]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this._connected=!1,this}getFilters(){return this.filters}setFilters(t){return t||(t=[]),this._connected===!0?(this.disconnect(),this.filters=t.slice(),this.connect()):this.filters=t.slice(),this}setDetune(t){if(this.detune=t,this.source.detune!==void 0)return this.isPlaying===!0&&this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,.01),this}getDetune(){return this.detune}getFilter(){return this.getFilters()[0]}setFilter(t){return this.setFilters(t?[t]:[])}setPlaybackRate(t){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.playbackRate=t,this.isPlaying===!0&&this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,.01),this}getPlaybackRate(){return this.playbackRate}onEnded(){this.isPlaying=!1}getLoop(){return this.hasPlaybackControl===!1?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.loop}setLoop(t){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.loop=t,this.isPlaying===!0&&(this.source.loop=this.loop),this}setLoopStart(t){return this.loopStart=t,this}setLoopEnd(t){return this.loopEnd=t,this}getVolume(){return this.gain.gain.value}setVolume(t){return this.gain.gain.setTargetAtTime(t,this.context.currentTime,.01),this}}class Ow{constructor(t,e,i){this.binding=t,this.valueSize=i;let r,s,o;switch(e){case"quaternion":r=this._slerp,s=this._slerpAdditive,o=this._setAdditiveIdentityQuaternion,this.buffer=new Float64Array(i*6),this._workIndex=5;break;case"string":case"bool":r=this._select,s=this._select,o=this._setAdditiveIdentityOther,this.buffer=new Array(i*5);break;default:r=this._lerp,s=this._lerpAdditive,o=this._setAdditiveIdentityNumeric,this.buffer=new Float64Array(i*5)}this._mixBufferRegion=r,this._mixBufferRegionAdditive=s,this._setIdentity=o,this._origIndex=3,this._addIndex=4,this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,this.useCount=0,this.referenceCount=0}accumulate(t,e){const i=this.buffer,r=this.valueSize,s=t*r+r;let o=this.cumulativeWeight;if(o===0){for(let a=0;a!==r;++a)i[s+a]=i[a];o=e}else{o+=e;const a=e/o;this._mixBufferRegion(i,s,0,a,r)}this.cumulativeWeight=o}accumulateAdditive(t){const e=this.buffer,i=this.valueSize,r=i*this._addIndex;this.cumulativeWeightAdditive===0&&this._setIdentity(),this._mixBufferRegionAdditive(e,r,0,t,i),this.cumulativeWeightAdditive+=t}apply(t){const e=this.valueSize,i=this.buffer,r=t*e+e,s=this.cumulativeWeight,o=this.cumulativeWeightAdditive,a=this.binding;if(this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,s<1){const l=e*this._origIndex;this._mixBufferRegion(i,r,l,1-s,e)}o>0&&this._mixBufferRegionAdditive(i,r,this._addIndex*e,1,e);for(let l=e,c=e+e;l!==c;++l)if(i[l]!==i[l+e]){a.setValue(i,r);break}}saveOriginalState(){const t=this.binding,e=this.buffer,i=this.valueSize,r=i*this._origIndex;t.getValue(e,r);for(let s=i,o=r;s!==o;++s)e[s]=e[r+s%i];this._setIdentity(),this.cumulativeWeight=0,this.cumulativeWeightAdditive=0}restoreOriginalState(){const t=this.valueSize*3;this.binding.setValue(this.buffer,t)}_setAdditiveIdentityNumeric(){const t=this._addIndex*this.valueSize,e=t+this.valueSize;for(let i=t;i<e;i++)this.buffer[i]=0}_setAdditiveIdentityQuaternion(){this._setAdditiveIdentityNumeric(),this.buffer[this._addIndex*this.valueSize+3]=1}_setAdditiveIdentityOther(){const t=this._origIndex*this.valueSize,e=this._addIndex*this.valueSize;for(let i=0;i<this.valueSize;i++)this.buffer[e+i]=this.buffer[t+i]}_select(t,e,i,r,s){if(r>=.5)for(let o=0;o!==s;++o)t[e+o]=t[i+o]}_slerp(t,e,i,r){Ue.slerpFlat(t,e,t,e,t,i,r)}_slerpAdditive(t,e,i,r,s){const o=this._workIndex*s;Ue.multiplyQuaternionsFlat(t,o,t,e,t,i),Ue.slerpFlat(t,e,t,e,t,o,r)}_lerp(t,e,i,r,s){const o=1-r;for(let a=0;a!==s;++a){const l=e+a;t[l]=t[l]*o+t[i+a]*r}}_lerpAdditive(t,e,i,r,s){for(let o=0;o!==s;++o){const a=e+o;t[a]=t[a]+t[i+o]*r}}}const Fh="\\[\\]\\.:\\/",zw=new RegExp("["+Fh+"]","g"),Bh="[^"+Fh+"]",Uw="[^"+Fh.replace("\\.","")+"]",Hw=/((?:WC+[\/:])*)/.source.replace("WC",Bh),Gw=/(WCOD+)?/.source.replace("WCOD",Uw),kw=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",Bh),Vw=/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",Bh),Ww=new RegExp("^"+Hw+Gw+kw+Vw+"$"),$w=["material","materials","bones"];class qw{constructor(t,e,i){const r=i||ie.parseTrackName(e);this._targetGroup=t,this._bindings=t.subscribe_(e,r)}getValue(t,e){this.bind();const i=this._targetGroup.nCachedObjects_,r=this._bindings[i];r!==void 0&&r.getValue(t,e)}setValue(t,e){const i=this._bindings;for(let r=this._targetGroup.nCachedObjects_,s=i.length;r!==s;++r)i[r].setValue(t,e)}bind(){const t=this._bindings;for(let e=this._targetGroup.nCachedObjects_,i=t.length;e!==i;++e)t[e].bind()}unbind(){const t=this._bindings;for(let e=this._targetGroup.nCachedObjects_,i=t.length;e!==i;++e)t[e].unbind()}}class ie{constructor(t,e,i){this.path=e,this.parsedPath=i||ie.parseTrackName(e),this.node=ie.findNode(t,this.parsedPath.nodeName)||t,this.rootNode=t,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}static create(t,e,i){return t&&t.isAnimationObjectGroup?new ie.Composite(t,e,i):new ie(t,e,i)}static sanitizeNodeName(t){return t.replace(/\s/g,"_").replace(zw,"")}static parseTrackName(t){const e=Ww.exec(t);if(!e)throw new Error("PropertyBinding: Cannot parse trackName: "+t);const i={nodeName:e[2],objectName:e[3],objectIndex:e[4],propertyName:e[5],propertyIndex:e[6]},r=i.nodeName&&i.nodeName.lastIndexOf(".");if(r!==void 0&&r!==-1){const s=i.nodeName.substring(r+1);$w.indexOf(s)!==-1&&(i.nodeName=i.nodeName.substring(0,r),i.objectName=s)}if(i.propertyName===null||i.propertyName.length===0)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+t);return i}static findNode(t,e){if(!e||e===""||e==="."||e===-1||e===t.name||e===t.uuid)return t;if(t.skeleton){const i=t.skeleton.getBoneByName(e);if(i!==void 0)return i}if(t.children){const i=function(s){for(let o=0;o<s.length;o++){const a=s[o];if(a.name===e||a.uuid===e)return a;const l=i(a.children);if(l)return l}return null},r=i(t.children);if(r)return r}return null}_getValue_unavailable(){}_setValue_unavailable(){}_getValue_direct(t,e){t[e]=this.targetObject[this.propertyName]}_getValue_array(t,e){const i=this.resolvedProperty;for(let r=0,s=i.length;r!==s;++r)t[e++]=i[r]}_getValue_arrayElement(t,e){t[e]=this.resolvedProperty[this.propertyIndex]}_getValue_toArray(t,e){this.resolvedProperty.toArray(t,e)}_setValue_direct(t,e){this.targetObject[this.propertyName]=t[e]}_setValue_direct_setNeedsUpdate(t,e){this.targetObject[this.propertyName]=t[e],this.targetObject.needsUpdate=!0}_setValue_direct_setMatrixWorldNeedsUpdate(t,e){this.targetObject[this.propertyName]=t[e],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_array(t,e){const i=this.resolvedProperty;for(let r=0,s=i.length;r!==s;++r)i[r]=t[e++]}_setValue_array_setNeedsUpdate(t,e){const i=this.resolvedProperty;for(let r=0,s=i.length;r!==s;++r)i[r]=t[e++];this.targetObject.needsUpdate=!0}_setValue_array_setMatrixWorldNeedsUpdate(t,e){const i=this.resolvedProperty;for(let r=0,s=i.length;r!==s;++r)i[r]=t[e++];this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_arrayElement(t,e){this.resolvedProperty[this.propertyIndex]=t[e]}_setValue_arrayElement_setNeedsUpdate(t,e){this.resolvedProperty[this.propertyIndex]=t[e],this.targetObject.needsUpdate=!0}_setValue_arrayElement_setMatrixWorldNeedsUpdate(t,e){this.resolvedProperty[this.propertyIndex]=t[e],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_fromArray(t,e){this.resolvedProperty.fromArray(t,e)}_setValue_fromArray_setNeedsUpdate(t,e){this.resolvedProperty.fromArray(t,e),this.targetObject.needsUpdate=!0}_setValue_fromArray_setMatrixWorldNeedsUpdate(t,e){this.resolvedProperty.fromArray(t,e),this.targetObject.matrixWorldNeedsUpdate=!0}_getValue_unbound(t,e){this.bind(),this.getValue(t,e)}_setValue_unbound(t,e){this.bind(),this.setValue(t,e)}bind(){let t=this.node;const e=this.parsedPath,i=e.objectName,r=e.propertyName;let s=e.propertyIndex;if(t||(t=ie.findNode(this.rootNode,e.nodeName)||this.rootNode,this.node=t),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!t){console.error("THREE.PropertyBinding: Trying to update node for track: "+this.path+" but it wasn't found.");return}if(i){let c=e.objectIndex;switch(i){case"materials":if(!t.material){console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);return}if(!t.material.materials){console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);return}t=t.material.materials;break;case"bones":if(!t.skeleton){console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);return}t=t.skeleton.bones;for(let h=0;h<t.length;h++)if(t[h].name===c){c=h;break}break;default:if(t[i]===void 0){console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);return}t=t[i]}if(c!==void 0){if(t[c]===void 0){console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,t);return}t=t[c]}}const o=t[r];if(o===void 0){const c=e.nodeName;console.error("THREE.PropertyBinding: Trying to update property for track: "+c+"."+r+" but it wasn't found.",t);return}let a=this.Versioning.None;this.targetObject=t,t.needsUpdate!==void 0?a=this.Versioning.NeedsUpdate:t.matrixWorldNeedsUpdate!==void 0&&(a=this.Versioning.MatrixWorldNeedsUpdate);let l=this.BindingType.Direct;if(s!==void 0){if(r==="morphTargetInfluences"){if(!t.geometry){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);return}if(t.geometry.isBufferGeometry){if(!t.geometry.morphAttributes){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);return}t.morphTargetDictionary[s]!==void 0&&(s=t.morphTargetDictionary[s])}else{console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.",this);return}}l=this.BindingType.ArrayElement,this.resolvedProperty=o,this.propertyIndex=s}else o.fromArray!==void 0&&o.toArray!==void 0?(l=this.BindingType.HasFromToArray,this.resolvedProperty=o):Array.isArray(o)?(l=this.BindingType.EntireArray,this.resolvedProperty=o):this.propertyName=r;this.getValue=this.GetterByBindingType[l],this.setValue=this.SetterByBindingTypeAndVersioning[l][a]}unbind(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}ie.Composite=qw;ie.prototype.BindingType={Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3};ie.prototype.Versioning={None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2};ie.prototype.GetterByBindingType=[ie.prototype._getValue_direct,ie.prototype._getValue_array,ie.prototype._getValue_arrayElement,ie.prototype._getValue_toArray];ie.prototype.SetterByBindingTypeAndVersioning=[[ie.prototype._setValue_direct,ie.prototype._setValue_direct_setNeedsUpdate,ie.prototype._setValue_direct_setMatrixWorldNeedsUpdate],[ie.prototype._setValue_array,ie.prototype._setValue_array_setNeedsUpdate,ie.prototype._setValue_array_setMatrixWorldNeedsUpdate],[ie.prototype._setValue_arrayElement,ie.prototype._setValue_arrayElement_setNeedsUpdate,ie.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate],[ie.prototype._setValue_fromArray,ie.prototype._setValue_fromArray_setNeedsUpdate,ie.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];class jw{constructor(t,e,i=null,r=e.blendMode){this._mixer=t,this._clip=e,this._localRoot=i,this.blendMode=r;const s=e.tracks,o=s.length,a=new Array(o),l={endingStart:Or,endingEnd:Or};for(let c=0;c!==o;++c){const h=s[c].createInterpolant(null);a[c]=h,h.settings=l}this._interpolantSettings=l,this._interpolants=a,this._propertyBindings=new Array(o),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=Lx,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0}play(){return this._mixer._activateAction(this),this}stop(){return this._mixer._deactivateAction(this),this.reset()}reset(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()}isRunning(){return this.enabled&&!this.paused&&this.timeScale!==0&&this._startTime===null&&this._mixer._isActiveAction(this)}isScheduled(){return this._mixer._isActiveAction(this)}startAt(t){return this._startTime=t,this}setLoop(t,e){return this.loop=t,this.repetitions=e,this}setEffectiveWeight(t){return this.weight=t,this._effectiveWeight=this.enabled?t:0,this.stopFading()}getEffectiveWeight(){return this._effectiveWeight}fadeIn(t){return this._scheduleFading(t,0,1)}fadeOut(t){return this._scheduleFading(t,1,0)}crossFadeFrom(t,e,i){if(t.fadeOut(e),this.fadeIn(e),i){const r=this._clip.duration,s=t._clip.duration,o=s/r,a=r/s;t.warp(1,o,e),this.warp(a,1,e)}return this}crossFadeTo(t,e,i){return t.crossFadeFrom(this,e,i)}stopFading(){const t=this._weightInterpolant;return t!==null&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(t)),this}setEffectiveTimeScale(t){return this.timeScale=t,this._effectiveTimeScale=this.paused?0:t,this.stopWarping()}getEffectiveTimeScale(){return this._effectiveTimeScale}setDuration(t){return this.timeScale=this._clip.duration/t,this.stopWarping()}syncWith(t){return this.time=t.time,this.timeScale=t.timeScale,this.stopWarping()}halt(t){return this.warp(this._effectiveTimeScale,0,t)}warp(t,e,i){const r=this._mixer,s=r.time,o=this.timeScale;let a=this._timeScaleInterpolant;a===null&&(a=r._lendControlInterpolant(),this._timeScaleInterpolant=a);const l=a.parameterPositions,c=a.sampleValues;return l[0]=s,l[1]=s+i,c[0]=t/o,c[1]=e/o,this}stopWarping(){const t=this._timeScaleInterpolant;return t!==null&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(t)),this}getMixer(){return this._mixer}getClip(){return this._clip}getRoot(){return this._localRoot||this._mixer._root}_update(t,e,i,r){if(!this.enabled){this._updateWeight(t);return}const s=this._startTime;if(s!==null){const l=(t-s)*i;if(l<0||i===0)return;this._startTime=null,e=i*l}e*=this._updateTimeScale(t);const o=this._updateTime(e),a=this._updateWeight(t);if(a>0){const l=this._interpolants,c=this._propertyBindings;switch(this.blendMode){case Nd:for(let h=0,u=l.length;h!==u;++h)l[h].evaluate(o),c[h].accumulateAdditive(a);break;case Ec:default:for(let h=0,u=l.length;h!==u;++h)l[h].evaluate(o),c[h].accumulate(r,a)}}}_updateWeight(t){let e=0;if(this.enabled){e=this.weight;const i=this._weightInterpolant;if(i!==null){const r=i.evaluate(t)[0];e*=r,t>i.parameterPositions[1]&&(this.stopFading(),r===0&&(this.enabled=!1))}}return this._effectiveWeight=e,e}_updateTimeScale(t){let e=0;if(!this.paused){e=this.timeScale;const i=this._timeScaleInterpolant;i!==null&&(e*=i.evaluate(t)[0],t>i.parameterPositions[1]&&(this.stopWarping(),e===0?this.paused=!0:this.timeScale=e))}return this._effectiveTimeScale=e,e}_updateTime(t){const e=this._clip.duration,i=this.loop;let r=this.time+t,s=this._loopCount;const o=i===Cx;if(t===0)return s===-1?r:o&&(s&1)==1?e-r:r;if(i===Ax){s===-1&&(this._loopCount=0,this._setEndings(!0,!0,!1));t:{if(r>=e)r=e;else if(r<0)r=0;else{this.time=r;break t}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this.time=r,this._mixer.dispatchEvent({type:"finished",action:this,direction:t<0?-1:1})}}else{if(s===-1&&(t>=0?(s=0,this._setEndings(!0,this.repetitions===0,o)):this._setEndings(this.repetitions===0,!0,o)),r>=e||r<0){const a=Math.floor(r/e);r-=e*a,s+=Math.abs(a);const l=this.repetitions-s;if(l<=0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,r=t>0?e:0,this.time=r,this._mixer.dispatchEvent({type:"finished",action:this,direction:t>0?1:-1});else{if(l===1){const c=t<0;this._setEndings(c,!c,o)}else this._setEndings(!1,!1,o);this._loopCount=s,this.time=r,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:a})}}else this.time=r;if(o&&(s&1)==1)return e-r}return r}_setEndings(t,e,i){const r=this._interpolantSettings;i?(r.endingStart=zr,r.endingEnd=zr):(t?r.endingStart=this.zeroSlopeAtStart?zr:Or:r.endingStart=Ta,e?r.endingEnd=this.zeroSlopeAtEnd?zr:Or:r.endingEnd=Ta)}_scheduleFading(t,e,i){const r=this._mixer,s=r.time;let o=this._weightInterpolant;o===null&&(o=r._lendControlInterpolant(),this._weightInterpolant=o);const a=o.parameterPositions,l=o.sampleValues;return a[0]=s,l[0]=e,a[1]=s+t,l[1]=i,this}}class Xw extends Ti{constructor(t){super();this._root=t,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1}_bindAction(t,e){const i=t._localRoot||this._root,r=t._clip.tracks,s=r.length,o=t._propertyBindings,a=t._interpolants,l=i.uuid,c=this._bindingsByRootAndName;let h=c[l];h===void 0&&(h={},c[l]=h);for(let u=0;u!==s;++u){const d=r[u],f=d.name;let g=h[f];if(g!==void 0)o[u]=g;else{if(g=o[u],g!==void 0){g._cacheIndex===null&&(++g.referenceCount,this._addInactiveBinding(g,l,f));continue}const v=e&&e._propertyBindings[u].binding.parsedPath;g=new Ow(ie.create(i,f,v),d.ValueTypeName,d.getValueSize()),++g.referenceCount,this._addInactiveBinding(g,l,f),o[u]=g}a[u].resultBuffer=g.buffer}}_activateAction(t){if(!this._isActiveAction(t)){if(t._cacheIndex===null){const i=(t._localRoot||this._root).uuid,r=t._clip.uuid,s=this._actionsByClip[r];this._bindAction(t,s&&s.knownActions[0]),this._addInactiveAction(t,r,i)}const e=t._propertyBindings;for(let i=0,r=e.length;i!==r;++i){const s=e[i];s.useCount++==0&&(this._lendBinding(s),s.saveOriginalState())}this._lendAction(t)}}_deactivateAction(t){if(this._isActiveAction(t)){const e=t._propertyBindings;for(let i=0,r=e.length;i!==r;++i){const s=e[i];--s.useCount==0&&(s.restoreOriginalState(),this._takeBackBinding(s))}this._takeBackAction(t)}}_initMemoryManager(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;const t=this;this.stats={actions:{get total(){return t._actions.length},get inUse(){return t._nActiveActions}},bindings:{get total(){return t._bindings.length},get inUse(){return t._nActiveBindings}},controlInterpolants:{get total(){return t._controlInterpolants.length},get inUse(){return t._nActiveControlInterpolants}}}}_isActiveAction(t){const e=t._cacheIndex;return e!==null&&e<this._nActiveActions}_addInactiveAction(t,e,i){const r=this._actions,s=this._actionsByClip;let o=s[e];if(o===void 0)o={knownActions:[t],actionByRoot:{}},t._byClipCacheIndex=0,s[e]=o;else{const a=o.knownActions;t._byClipCacheIndex=a.length,a.push(t)}t._cacheIndex=r.length,r.push(t),o.actionByRoot[i]=t}_removeInactiveAction(t){const e=this._actions,i=e[e.length-1],r=t._cacheIndex;i._cacheIndex=r,e[r]=i,e.pop(),t._cacheIndex=null;const s=t._clip.uuid,o=this._actionsByClip,a=o[s],l=a.knownActions,c=l[l.length-1],h=t._byClipCacheIndex;c._byClipCacheIndex=h,l[h]=c,l.pop(),t._byClipCacheIndex=null;const u=a.actionByRoot,d=(t._localRoot||this._root).uuid;delete u[d],l.length===0&&delete o[s],this._removeInactiveBindingsForAction(t)}_removeInactiveBindingsForAction(t){const e=t._propertyBindings;for(let i=0,r=e.length;i!==r;++i){const s=e[i];--s.referenceCount==0&&this._removeInactiveBinding(s)}}_lendAction(t){const e=this._actions,i=t._cacheIndex,r=this._nActiveActions++,s=e[r];t._cacheIndex=r,e[r]=t,s._cacheIndex=i,e[i]=s}_takeBackAction(t){const e=this._actions,i=t._cacheIndex,r=--this._nActiveActions,s=e[r];t._cacheIndex=r,e[r]=t,s._cacheIndex=i,e[i]=s}_addInactiveBinding(t,e,i){const r=this._bindingsByRootAndName,s=this._bindings;let o=r[e];o===void 0&&(o={},r[e]=o),o[i]=t,t._cacheIndex=s.length,s.push(t)}_removeInactiveBinding(t){const e=this._bindings,i=t.binding,r=i.rootNode.uuid,s=i.path,o=this._bindingsByRootAndName,a=o[r],l=e[e.length-1],c=t._cacheIndex;l._cacheIndex=c,e[c]=l,e.pop(),delete a[s],Object.keys(a).length===0&&delete o[r]}_lendBinding(t){const e=this._bindings,i=t._cacheIndex,r=this._nActiveBindings++,s=e[r];t._cacheIndex=r,e[r]=t,s._cacheIndex=i,e[i]=s}_takeBackBinding(t){const e=this._bindings,i=t._cacheIndex,r=--this._nActiveBindings,s=e[r];t._cacheIndex=r,e[r]=t,s._cacheIndex=i,e[i]=s}_lendControlInterpolant(){const t=this._controlInterpolants,e=this._nActiveControlInterpolants++;let i=t[e];return i===void 0&&(i=new wp(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer),i.__cacheIndex=e,t[e]=i),i}_takeBackControlInterpolant(t){const e=this._controlInterpolants,i=t.__cacheIndex,r=--this._nActiveControlInterpolants,s=e[r];t.__cacheIndex=r,e[r]=t,s.__cacheIndex=i,e[i]=s}clipAction(t,e,i){const r=e||this._root,s=r.uuid;let o=typeof t=="string"?Ep.findByName(r,t):t;const a=o!==null?o.uuid:t,l=this._actionsByClip[a];let c=null;if(i===void 0&&(o!==null?i=o.blendMode:i=Ec),l!==void 0){const u=l.actionByRoot[s];if(u!==void 0&&u.blendMode===i)return u;c=l.knownActions[0],o===null&&(o=c._clip)}if(o===null)return null;const h=new jw(this,o,e,i);return this._bindAction(h,c),this._addInactiveAction(h,a,s),h}existingAction(t,e){const i=e||this._root,r=i.uuid,s=typeof t=="string"?Ep.findByName(i,t):t,o=s?s.uuid:t,a=this._actionsByClip[o];return a!==void 0&&a.actionByRoot[r]||null}stopAllAction(){const t=this._actions,e=this._nActiveActions;for(let i=e-1;i>=0;--i)t[i].stop();return this}update(t){t*=this.timeScale;const e=this._actions,i=this._nActiveActions,r=this.time+=t,s=Math.sign(t),o=this._accuIndex^=1;for(let c=0;c!==i;++c)e[c]._update(r,t,s,o);const a=this._bindings,l=this._nActiveBindings;for(let c=0;c!==l;++c)a[c].apply(o);return this}setTime(t){this.time=0;for(let e=0;e<this._actions.length;e++)this._actions[e].time=0;return this.update(t)}getRoot(){return this._root}uncacheClip(t){const e=this._actions,i=t.uuid,r=this._actionsByClip,s=r[i];if(s!==void 0){const o=s.knownActions;for(let a=0,l=o.length;a!==l;++a){const c=o[a];this._deactivateAction(c);const h=c._cacheIndex,u=e[e.length-1];c._cacheIndex=null,c._byClipCacheIndex=null,u._cacheIndex=h,e[h]=u,e.pop(),this._removeInactiveBindingsForAction(c)}delete r[i]}}uncacheRoot(t){const e=t.uuid,i=this._actionsByClip;for(const o in i){const a=i[o].actionByRoot,l=a[e];l!==void 0&&(this._deactivateAction(l),this._removeInactiveAction(l))}const r=this._bindingsByRootAndName,s=r[e];if(s!==void 0)for(const o in s){const a=s[o];a.restoreOriginalState(),this._removeInactiveBinding(a)}}uncacheAction(t,e){const i=this.existingAction(t,e);i!==null&&(this._deactivateAction(i),this._removeInactiveAction(i))}}Xw.prototype._controlInterpolantsResultBuffer=new Float32Array(1);class Yw extends Mo{constructor(t,e,i=1){super(t,e);this.meshPerAttribute=i}copy(t){return super.copy(t),this.meshPerAttribute=t.meshPerAttribute,this}clone(t){const e=super.clone(t);return e.meshPerAttribute=this.meshPerAttribute,e}toJSON(t){const e=super.toJSON(t);return e.isInstancedInterleavedBuffer=!0,e.meshPerAttribute=this.meshPerAttribute,e}}Yw.prototype.isInstancedInterleavedBuffer=!0;class Op{constructor(t=1,e=0,i=0){return this.radius=t,this.phi=e,this.theta=i,this}set(t,e,i){return this.radius=t,this.phi=e,this.theta=i,this}copy(t){return this.radius=t.radius,this.phi=t.phi,this.theta=t.theta,this}makeSafe(){const t=1e-6;return this.phi=Math.max(t,Math.min(Math.PI-t,this.phi)),this}setFromVector3(t){return this.setFromCartesianCoords(t.x,t.y,t.z)}setFromCartesianCoords(t,e,i){return this.radius=Math.sqrt(t*t+e*e+i*i),this.radius===0?(this.theta=0,this.phi=0):(this.theta=Math.atan2(t,i),this.phi=Math.acos(Ke(e/this.radius,-1,1))),this}clone(){return new this.constructor().copy(this)}}const Hi=new O,fl=new Ht,Oh=new Ht;class Zw extends xh{constructor(t){const e=zp(t),i=new re,r=[],s=[],o=new Ft(0,0,1),a=new Ft(0,1,0);for(let c=0;c<e.length;c++){const h=e[c];h.parent&&h.parent.isBone&&(r.push(0,0,0),r.push(0,0,0),s.push(o.r,o.g,o.b),s.push(a.r,a.g,a.b))}i.setAttribute("position",new ue(r,3)),i.setAttribute("color",new ue(s,3));const l=new Lo({vertexColors:!0,depthTest:!1,depthWrite:!1,toneMapped:!1,transparent:!0});super(i,l);this.type="SkeletonHelper",this.isSkeletonHelper=!0,this.root=t,this.bones=e,this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1}updateMatrixWorld(t){const e=this.bones,i=this.geometry,r=i.getAttribute("position");Oh.copy(this.root.matrixWorld).invert();for(let s=0,o=0;s<e.length;s++){const a=e[s];a.parent&&a.parent.isBone&&(fl.multiplyMatrices(Oh,a.matrixWorld),Hi.setFromMatrixPosition(fl),r.setXYZ(o,Hi.x,Hi.y,Hi.z),fl.multiplyMatrices(Oh,a.parent.matrixWorld),Hi.setFromMatrixPosition(fl),r.setXYZ(o+1,Hi.x,Hi.y,Hi.z),o+=2)}i.getAttribute("position").needsUpdate=!0,super.updateMatrixWorld(t)}}function zp(n){const t=[];n&&n.isBone&&t.push(n);for(let e=0;e<n.children.length;e++)t.push.apply(t,zp(n.children[e]));return t}class Jw extends xh{constructor(t=10,e=10,i=4473924,r=8947848){i=new Ft(i),r=new Ft(r);const s=e/2,o=t/e,a=t/2,l=[],c=[];for(let d=0,f=0,g=-a;d<=e;d++,g+=o){l.push(-a,0,g,a,0,g),l.push(g,0,-a,g,0,a);const v=d===s?i:r;v.toArray(c,f),f+=3,v.toArray(c,f),f+=3,v.toArray(c,f),f+=3,v.toArray(c,f),f+=3}const h=new re;h.setAttribute("position",new ue(l,3)),h.setAttribute("color",new ue(c,3));const u=new Lo({vertexColors:!0,toneMapped:!1});super(h,u);this.type="GridHelper"}}const Qw=new Float32Array(1);new Int32Array(Qw.buffer);xn.create=function(n,t){return console.log("THREE.Curve.create() has been deprecated"),n.prototype=Object.create(xn.prototype),n.prototype.constructor=n,n.prototype.getPoint=t,n};Lh.prototype.fromPoints=function(n){return console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints()."),this.setFromPoints(n)};Jw.prototype.setColors=function(){console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.")};Zw.prototype.update=function(){console.error("THREE.SkeletonHelper: update() no longer needs to be called.")};ai.prototype.extractUrlBase=function(n){return console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead."),Bp.extractUrlBase(n)};ai.Handlers={add:function(){console.error("THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.")},get:function(){console.error("THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.")}};Tn.prototype.center=function(n){return console.warn("THREE.Box3: .center() has been renamed to .getCenter()."),this.getCenter(n)};Tn.prototype.empty=function(){return console.warn("THREE.Box3: .empty() has been renamed to .isEmpty()."),this.isEmpty()};Tn.prototype.isIntersectionBox=function(n){return console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(n)};Tn.prototype.isIntersectionSphere=function(n){return console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(n)};Tn.prototype.size=function(n){return console.warn("THREE.Box3: .size() has been renamed to .getSize()."),this.getSize(n)};$r.prototype.empty=function(){return console.warn("THREE.Sphere: .empty() has been renamed to .isEmpty()."),this.isEmpty()};ja.prototype.setFromMatrix=function(n){return console.warn("THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix()."),this.setFromProjectionMatrix(n)};Ie.prototype.flattenToArrayOffset=function(n,t){return console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(n,t)};Ie.prototype.multiplyVector3=function(n){return console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead."),n.applyMatrix3(this)};Ie.prototype.multiplyVector3Array=function(){console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.")};Ie.prototype.applyToBufferAttribute=function(n){return console.warn("THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead."),n.applyMatrix3(this)};Ie.prototype.applyToVector3Array=function(){console.error("THREE.Matrix3: .applyToVector3Array() has been removed.")};Ie.prototype.getInverse=function(n){return console.warn("THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead."),this.copy(n).invert()};Ht.prototype.extractPosition=function(n){return console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition()."),this.copyPosition(n)};Ht.prototype.flattenToArrayOffset=function(n,t){return console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(n,t)};Ht.prototype.getPosition=function(){return console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead."),new O().setFromMatrixColumn(this,3)};Ht.prototype.setRotationFromQuaternion=function(n){return console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion()."),this.makeRotationFromQuaternion(n)};Ht.prototype.multiplyToArray=function(){console.warn("THREE.Matrix4: .multiplyToArray() has been removed.")};Ht.prototype.multiplyVector3=function(n){return console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead."),n.applyMatrix4(this)};Ht.prototype.multiplyVector4=function(n){return console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead."),n.applyMatrix4(this)};Ht.prototype.multiplyVector3Array=function(){console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.")};Ht.prototype.rotateAxis=function(n){console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead."),n.transformDirection(this)};Ht.prototype.crossVector=function(n){return console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead."),n.applyMatrix4(this)};Ht.prototype.translate=function(){console.error("THREE.Matrix4: .translate() has been removed.")};Ht.prototype.rotateX=function(){console.error("THREE.Matrix4: .rotateX() has been removed.")};Ht.prototype.rotateY=function(){console.error("THREE.Matrix4: .rotateY() has been removed.")};Ht.prototype.rotateZ=function(){console.error("THREE.Matrix4: .rotateZ() has been removed.")};Ht.prototype.rotateByAxis=function(){console.error("THREE.Matrix4: .rotateByAxis() has been removed.")};Ht.prototype.applyToBufferAttribute=function(n){return console.warn("THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead."),n.applyMatrix4(this)};Ht.prototype.applyToVector3Array=function(){console.error("THREE.Matrix4: .applyToVector3Array() has been removed.")};Ht.prototype.makeFrustum=function(n,t,e,i,r,s){return console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead."),this.makePerspective(n,t,i,e,r,s)};Ht.prototype.getInverse=function(n){return console.warn("THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead."),this.copy(n).invert()};oi.prototype.isIntersectionLine=function(n){return console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine()."),this.intersectsLine(n)};Ue.prototype.multiplyVector3=function(n){return console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead."),n.applyQuaternion(this)};Ue.prototype.inverse=function(){return console.warn("THREE.Quaternion: .inverse() has been renamed to invert()."),this.invert()};qr.prototype.isIntersectionBox=function(n){return console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(n)};qr.prototype.isIntersectionPlane=function(n){return console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane()."),this.intersectsPlane(n)};qr.prototype.isIntersectionSphere=function(n){return console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(n)};Se.prototype.area=function(){return console.warn("THREE.Triangle: .area() has been renamed to .getArea()."),this.getArea()};Se.prototype.barycoordFromPoint=function(n,t){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),this.getBarycoord(n,t)};Se.prototype.midpoint=function(n){return console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint()."),this.getMidpoint(n)};Se.prototypenormal=function(n){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),this.getNormal(n)};Se.prototype.plane=function(n){return console.warn("THREE.Triangle: .plane() has been renamed to .getPlane()."),this.getPlane(n)};Se.barycoordFromPoint=function(n,t,e,i,r){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),Se.getBarycoord(n,t,e,i,r)};Se.normal=function(n,t,e,i){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),Se.getNormal(n,t,e,i)};Po.prototype.extractAllPoints=function(n){return console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead."),this.extractPoints(n)};Po.prototype.extrude=function(n){return console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead."),new fs(this,n)};Po.prototype.makeGeometry=function(n){return console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead."),new Ph(this,n)};bt.prototype.fromAttribute=function(n,t,e){return console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(n,t,e)};bt.prototype.distanceToManhattan=function(n){return console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(n)};bt.prototype.lengthManhattan=function(){return console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()};O.prototype.setEulerFromRotationMatrix=function(){console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.")};O.prototype.setEulerFromQuaternion=function(){console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.")};O.prototype.getPositionFromMatrix=function(n){return console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition()."),this.setFromMatrixPosition(n)};O.prototype.getScaleFromMatrix=function(n){return console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale()."),this.setFromMatrixScale(n)};O.prototype.getColumnFromMatrix=function(n,t){return console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn()."),this.setFromMatrixColumn(t,n)};O.prototype.applyProjection=function(n){return console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead."),this.applyMatrix4(n)};O.prototype.fromAttribute=function(n,t,e){return console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(n,t,e)};O.prototype.distanceToManhattan=function(n){return console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(n)};O.prototype.lengthManhattan=function(){return console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()};oe.prototype.fromAttribute=function(n,t,e){return console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(n,t,e)};oe.prototype.lengthManhattan=function(){return console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()};ne.prototype.getChildByName=function(n){return console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName()."),this.getObjectByName(n)};ne.prototype.renderDepth=function(){console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.")};ne.prototype.translate=function(n,t){return console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead."),this.translateOnAxis(t,n)};ne.prototype.getWorldRotation=function(){console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.")};ne.prototype.applyMatrix=function(n){return console.warn("THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4()."),this.applyMatrix4(n)};Object.defineProperties(ne.prototype,{eulerOrder:{get:function(){return console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order},set:function(n){console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order=n}},useQuaternion:{get:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")},set:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")}}});tn.prototype.setDrawMode=function(){console.error("THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.")};Object.defineProperties(tn.prototype,{drawMode:{get:function(){return console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode."),Rx},set:function(){console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.")}}});Jf.prototype.initBones=function(){console.error("THREE.SkinnedMesh: initBones() has been removed.")};en.prototype.setLens=function(n,t){console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup."),t!==void 0&&(this.filmGauge=t),this.setFocalLength(n)};Object.defineProperties(Wn.prototype,{onlyShadow:{set:function(){console.warn("THREE.Light: .onlyShadow has been removed.")}},shadowCameraFov:{set:function(n){console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov."),this.shadow.camera.fov=n}},shadowCameraLeft:{set:function(n){console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left."),this.shadow.camera.left=n}},shadowCameraRight:{set:function(n){console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right."),this.shadow.camera.right=n}},shadowCameraTop:{set:function(n){console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top."),this.shadow.camera.top=n}},shadowCameraBottom:{set:function(n){console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom."),this.shadow.camera.bottom=n}},shadowCameraNear:{set:function(n){console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near."),this.shadow.camera.near=n}},shadowCameraFar:{set:function(n){console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far."),this.shadow.camera.far=n}},shadowCameraVisible:{set:function(){console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.")}},shadowBias:{set:function(n){console.warn("THREE.Light: .shadowBias is now .shadow.bias."),this.shadow.bias=n}},shadowDarkness:{set:function(){console.warn("THREE.Light: .shadowDarkness has been removed.")}},shadowMapWidth:{set:function(n){console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width."),this.shadow.mapSize.width=n}},shadowMapHeight:{set:function(n){console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height."),this.shadow.mapSize.height=n}}});Object.defineProperties(Me.prototype,{length:{get:function(){return console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead."),this.array.length}},dynamic:{get:function(){return console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."),this.usage===Aa},set:function(){console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."),this.setUsage(Aa)}}});Me.prototype.setDynamic=function(n){return console.warn("THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead."),this.setUsage(n===!0?Aa:fo),this};Me.prototype.copyIndicesArray=function(){console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.")},Me.prototype.setArray=function(){console.error("THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")};re.prototype.addIndex=function(n){console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex()."),this.setIndex(n)};re.prototype.addAttribute=function(n,t){return console.warn("THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute()."),!(t&&t.isBufferAttribute)&&!(t&&t.isInterleavedBufferAttribute)?(console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."),this.setAttribute(n,new Me(arguments[1],arguments[2]))):n==="index"?(console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."),this.setIndex(t),this):this.setAttribute(n,t)};re.prototype.addDrawCall=function(n,t,e){e!==void 0&&console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset."),console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup()."),this.addGroup(n,t)};re.prototype.clearDrawCalls=function(){console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups()."),this.clearGroups()};re.prototype.computeOffsets=function(){console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.")};re.prototype.removeAttribute=function(n){return console.warn("THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute()."),this.deleteAttribute(n)};re.prototype.applyMatrix=function(n){return console.warn("THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4()."),this.applyMatrix4(n)};Object.defineProperties(re.prototype,{drawcalls:{get:function(){return console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups."),this.groups}},offsets:{get:function(){return console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups."),this.groups}}});Mo.prototype.setDynamic=function(n){return console.warn("THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead."),this.setUsage(n===!0?Aa:fo),this};Mo.prototype.setArray=function(){console.error("THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")};fs.prototype.getArrays=function(){console.error("THREE.ExtrudeGeometry: .getArrays() has been removed.")};fs.prototype.addShapeList=function(){console.error("THREE.ExtrudeGeometry: .addShapeList() has been removed.")};fs.prototype.addShape=function(){console.error("THREE.ExtrudeGeometry: .addShape() has been removed.")};kf.prototype.dispose=function(){console.error("THREE.Scene: .dispose() has been removed.")};Object.defineProperties(He.prototype,{wrapAround:{get:function(){console.warn("THREE.Material: .wrapAround has been removed.")},set:function(){console.warn("THREE.Material: .wrapAround has been removed.")}},overdraw:{get:function(){console.warn("THREE.Material: .overdraw has been removed.")},set:function(){console.warn("THREE.Material: .overdraw has been removed.")}},wrapRGB:{get:function(){return console.warn("THREE.Material: .wrapRGB has been removed."),new Ft}},shading:{get:function(){console.error("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead.")},set:function(n){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=n===fd}},stencilMask:{get:function(){return console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead."),this.stencilFuncMask},set:function(n){console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead."),this.stencilFuncMask=n}},vertexTangents:{get:function(){console.warn("THREE."+this.type+": .vertexTangents has been removed.")},set:function(){console.warn("THREE."+this.type+": .vertexTangents has been removed.")}}});Object.defineProperties(ur.prototype,{derivatives:{get:function(){return console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives},set:function(n){console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives=n}}});se.prototype.clearTarget=function(n,t,e,i){console.warn("THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead."),this.setRenderTarget(n),this.clear(t,e,i)};se.prototype.animate=function(n){console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop()."),this.setAnimationLoop(n)};se.prototype.getCurrentRenderTarget=function(){return console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget()."),this.getRenderTarget()};se.prototype.getMaxAnisotropy=function(){return console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy()."),this.capabilities.getMaxAnisotropy()};se.prototype.getPrecision=function(){return console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision."),this.capabilities.precision};se.prototype.resetGLState=function(){return console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset()."),this.state.reset()};se.prototype.supportsFloatTextures=function(){return console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' )."),this.extensions.get("OES_texture_float")};se.prototype.supportsHalfFloatTextures=function(){return console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' )."),this.extensions.get("OES_texture_half_float")};se.prototype.supportsStandardDerivatives=function(){return console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' )."),this.extensions.get("OES_standard_derivatives")};se.prototype.supportsCompressedTextureS3TC=function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' )."),this.extensions.get("WEBGL_compressed_texture_s3tc")};se.prototype.supportsCompressedTexturePVRTC=function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' )."),this.extensions.get("WEBGL_compressed_texture_pvrtc")};se.prototype.supportsBlendMinMax=function(){return console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' )."),this.extensions.get("EXT_blend_minmax")};se.prototype.supportsVertexTextures=function(){return console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures."),this.capabilities.vertexTextures};se.prototype.supportsInstancedArrays=function(){return console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' )."),this.extensions.get("ANGLE_instanced_arrays")};se.prototype.enableScissorTest=function(n){console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest()."),this.setScissorTest(n)};se.prototype.initMaterial=function(){console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.")};se.prototype.addPrePlugin=function(){console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.")};se.prototype.addPostPlugin=function(){console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.")};se.prototype.updateShadowMap=function(){console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.")};se.prototype.setFaceCulling=function(){console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.")};se.prototype.allocTextureUnit=function(){console.warn("THREE.WebGLRenderer: .allocTextureUnit() has been removed.")};se.prototype.setTexture=function(){console.warn("THREE.WebGLRenderer: .setTexture() has been removed.")};se.prototype.setTexture2D=function(){console.warn("THREE.WebGLRenderer: .setTexture2D() has been removed.")};se.prototype.setTextureCube=function(){console.warn("THREE.WebGLRenderer: .setTextureCube() has been removed.")};se.prototype.getActiveMipMapLevel=function(){return console.warn("THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel()."),this.getActiveMipmapLevel()};Object.defineProperties(se.prototype,{shadowMapEnabled:{get:function(){return this.shadowMap.enabled},set:function(n){console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled."),this.shadowMap.enabled=n}},shadowMapType:{get:function(){return this.shadowMap.type},set:function(n){console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type."),this.shadowMap.type=n}},shadowMapCullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")}},context:{get:function(){return console.warn("THREE.WebGLRenderer: .context has been removed. Use .getContext() instead."),this.getContext()}},vr:{get:function(){return console.warn("THREE.WebGLRenderer: .vr has been renamed to .xr"),this.xr}},gammaInput:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead."),!1},set:function(){console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.")}},gammaOutput:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."),!1},set:function(n){console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."),this.outputEncoding=n===!0?lr:ze}},toneMappingWhitePoint:{get:function(){return console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed."),1},set:function(){console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.")}}});Object.defineProperties(Hf.prototype,{cullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")}},renderReverseSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")}},renderSingleSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")}}});Object.defineProperties(Hn.prototype,{wrapS:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS},set:function(n){console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS=n}},wrapT:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT},set:function(n){console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT=n}},magFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter},set:function(n){console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter=n}},minFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter},set:function(n){console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter=n}},anisotropy:{get:function(){return console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy},set:function(n){console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy=n}},offset:{get:function(){return console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset},set:function(n){console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset=n}},repeat:{get:function(){return console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat},set:function(n){console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat=n}},format:{get:function(){return console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format},set:function(n){console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format=n}},type:{get:function(){return console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type},set:function(n){console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type=n}},generateMipmaps:{get:function(){return console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps},set:function(n){console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps=n}}});Bw.prototype.load=function(n){console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");const t=this;return new Dw().load(n,function(i){t.setBuffer(i)}),this};nh.prototype.updateCubeMap=function(n,t){return console.warn("THREE.CubeCamera: .updateCubeMap() is now .update()."),this.update(n,t)};nh.prototype.clear=function(n,t,e,i){return console.warn("THREE.CubeCamera: .clear() is now .renderTarget.clear()."),this.renderTarget.clear(n,t,e,i)};Gr.crossOrigin=void 0;Gr.loadTexture=function(n,t,e,i){console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");const r=new ww;r.setCrossOrigin(this.crossOrigin);const s=r.load(n,e,void 0,i);return t&&(s.mapping=t),s};Gr.loadTextureCube=function(n,t,e,i){console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");const r=new Mw;r.setCrossOrigin(this.crossOrigin);const s=r.load(n,e,void 0,i);return t&&(s.mapping=t),s};Gr.loadCompressedTexture=function(){console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.")};Gr.loadCompressedTextureCube=function(){console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.")};typeof __THREE_DEVTOOLS__!="undefined"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:hd}}));typeof window!="undefined"&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=hd);const Up={type:"change"},zh={type:"start"},Uh={type:"end"};class rC extends Ti{constructor(t,e){super();e===void 0&&console.warn('THREE.OrbitControls: The second parameter "domElement" is now mandatory.'),e===document&&console.error('THREE.OrbitControls: "document" should not be used as the target "domElement". Please use "renderer.domElement" instead.'),this.object=t,this.domElement=e,this.domElement.style.touchAction="none",this.enabled=!0,this.target=new O,this.minDistance=0,this.maxDistance=1/0,this.minZoom=0,this.maxZoom=1/0,this.minPolarAngle=0,this.maxPolarAngle=Math.PI,this.minAzimuthAngle=-1/0,this.maxAzimuthAngle=1/0,this.enableDamping=!1,this.dampingFactor=.05,this.enableZoom=!0,this.zoomSpeed=1,this.enableRotate=!0,this.rotateSpeed=1,this.enablePan=!0,this.panSpeed=1,this.screenSpacePanning=!0,this.keyPanSpeed=7,this.autoRotate=!1,this.autoRotateSpeed=2,this.keys={LEFT:"ArrowLeft",UP:"ArrowUp",RIGHT:"ArrowRight",BOTTOM:"ArrowDown"},this.mouseButtons={LEFT:Rr.ROTATE,MIDDLE:Rr.DOLLY,RIGHT:Rr.PAN},this.touches={ONE:Pr.ROTATE,TWO:Pr.DOLLY_PAN},this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object.zoom,this._domElementKeyEvents=null,this.getPolarAngle=function(){return a.phi},this.getAzimuthalAngle=function(){return a.theta},this.getDistance=function(){return this.object.position.distanceTo(this.target)},this.listenToKeyEvents=function(z){z.addEventListener("keydown",K),this._domElementKeyEvents=z},this.saveState=function(){i.target0.copy(i.target),i.position0.copy(i.object.position),i.zoom0=i.object.zoom},this.reset=function(){i.target.copy(i.target0),i.object.position.copy(i.position0),i.object.zoom=i.zoom0,i.object.updateProjectionMatrix(),i.dispatchEvent(Up),i.update(),s=r.NONE},this.update=function(){const z=new O,Mt=new Ue().setFromUnitVectors(t.up,new O(0,1,0)),$t=Mt.clone().invert(),Qt=new O,xe=new Ue,te=2*Math.PI;return function(){const Oe=i.object.position;z.copy(Oe).sub(i.target),z.applyQuaternion(Mt),a.setFromVector3(z),i.autoRotate&&s===r.NONE&&W(S()),i.enableDamping?(a.theta+=l.theta*i.dampingFactor,a.phi+=l.phi*i.dampingFactor):(a.theta+=l.theta,a.phi+=l.phi);let Re=i.minAzimuthAngle,Xe=i.maxAzimuthAngle;return isFinite(Re)&&isFinite(Xe)&&(Re<-Math.PI?Re+=te:Re>Math.PI&&(Re-=te),Xe<-Math.PI?Xe+=te:Xe>Math.PI&&(Xe-=te),Re<=Xe?a.theta=Math.max(Re,Math.min(Xe,a.theta)):a.theta=a.theta>(Re+Xe)/2?Math.max(Re,a.theta):Math.min(Xe,a.theta)),a.phi=Math.max(i.minPolarAngle,Math.min(i.maxPolarAngle,a.phi)),a.makeSafe(),a.radius*=c,a.radius=Math.max(i.minDistance,Math.min(i.maxDistance,a.radius)),i.enableDamping===!0?i.target.addScaledVector(h,i.dampingFactor):i.target.add(h),z.setFromSpherical(a),z.applyQuaternion($t),Oe.copy(i.target).add(z),i.object.lookAt(i.target),i.enableDamping===!0?(l.theta*=1-i.dampingFactor,l.phi*=1-i.dampingFactor,h.multiplyScalar(1-i.dampingFactor)):(l.set(0,0,0),h.set(0,0,0)),c=1,u||Qt.distanceToSquared(i.object.position)>o||8*(1-xe.dot(i.object.quaternion))>o?(i.dispatchEvent(Up),Qt.copy(i.object.position),xe.copy(i.object.quaternion),u=!1,!0):!1}}(),this.dispose=function(){i.domElement.removeEventListener("contextmenu",ut),i.domElement.removeEventListener("pointerdown",Q),i.domElement.removeEventListener("pointercancel",M),i.domElement.removeEventListener("wheel",P),i.domElement.removeEventListener("pointermove",mt),i.domElement.removeEventListener("pointerup",et),i._domElementKeyEvents!==null&&i._domElementKeyEvents.removeEventListener("keydown",K)};const i=this,r={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_PAN:4,TOUCH_DOLLY_PAN:5,TOUCH_DOLLY_ROTATE:6};let s=r.NONE;const o=1e-6,a=new Op,l=new Op;let c=1;const h=new O;let u=!1;const d=new bt,f=new bt,g=new bt,v=new bt,x=new bt,m=new bt,p=new bt,b=new bt,_=new bt,w=[],E={};function S(){return 2*Math.PI/60/60*i.autoRotateSpeed}function R(){return Math.pow(.95,i.zoomSpeed)}function W(z){l.theta-=z}function B(z){l.phi-=z}const T=function(){const z=new O;return function($t,Qt){z.setFromMatrixColumn(Qt,0),z.multiplyScalar(-$t),h.add(z)}}(),k=function(){const z=new O;return function($t,Qt){i.screenSpacePanning===!0?z.setFromMatrixColumn(Qt,1):(z.setFromMatrixColumn(Qt,0),z.crossVectors(i.object.up,z)),z.multiplyScalar($t),h.add(z)}}(),I=function(){const z=new O;return function($t,Qt){const xe=i.domElement;if(i.object.isPerspectiveCamera){const te=i.object.position;z.copy(te).sub(i.target);let Te=z.length();Te*=Math.tan(i.object.fov/2*Math.PI/180),T(2*$t*Te/xe.clientHeight,i.object.matrix),k(2*Qt*Te/xe.clientHeight,i.object.matrix)}else i.object.isOrthographicCamera?(T($t*(i.object.right-i.object.left)/i.object.zoom/xe.clientWidth,i.object.matrix),k(Qt*(i.object.top-i.object.bottom)/i.object.zoom/xe.clientHeight,i.object.matrix)):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),i.enablePan=!1)}}();function N(z){i.object.isPerspectiveCamera?c/=z:i.object.isOrthographicCamera?(i.object.zoom=Math.max(i.minZoom,Math.min(i.maxZoom,i.object.zoom*z)),i.object.updateProjectionMatrix(),u=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),i.enableZoom=!1)}function C(z){i.object.isPerspectiveCamera?c*=z:i.object.isOrthographicCamera?(i.object.zoom=Math.max(i.minZoom,Math.min(i.maxZoom,i.object.zoom/z)),i.object.updateProjectionMatrix(),u=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),i.enableZoom=!1)}function L(z){d.set(z.clientX,z.clientY)}function F(z){p.set(z.clientX,z.clientY)}function q(z){v.set(z.clientX,z.clientY)}function ot(z){f.set(z.clientX,z.clientY),g.subVectors(f,d).multiplyScalar(i.rotateSpeed);const Mt=i.domElement;W(2*Math.PI*g.x/Mt.clientHeight),B(2*Math.PI*g.y/Mt.clientHeight),d.copy(f),i.update()}function pt(z){b.set(z.clientX,z.clientY),_.subVectors(b,p),_.y>0?N(R()):_.y<0&&C(R()),p.copy(b),i.update()}function rt(z){x.set(z.clientX,z.clientY),m.subVectors(x,v).multiplyScalar(i.panSpeed),I(m.x,m.y),v.copy(x),i.update()}function Et(z){z.deltaY<0?C(R()):z.deltaY>0&&N(R()),i.update()}function it(z){let Mt=!1;switch(z.code){case i.keys.UP:I(0,i.keyPanSpeed),Mt=!0;break;case i.keys.BOTTOM:I(0,-i.keyPanSpeed),Mt=!0;break;case i.keys.LEFT:I(i.keyPanSpeed,0),Mt=!0;break;case i.keys.RIGHT:I(-i.keyPanSpeed,0),Mt=!0;break}Mt&&(z.preventDefault(),i.update())}function vt(){if(w.length===1)d.set(w[0].pageX,w[0].pageY);else{const z=.5*(w[0].pageX+w[1].pageX),Mt=.5*(w[0].pageY+w[1].pageY);d.set(z,Mt)}}function Y(){if(w.length===1)v.set(w[0].pageX,w[0].pageY);else{const z=.5*(w[0].pageX+w[1].pageX),Mt=.5*(w[0].pageY+w[1].pageY);v.set(z,Mt)}}function st(){const z=w[0].pageX-w[1].pageX,Mt=w[0].pageY-w[1].pageY,$t=Math.sqrt(z*z+Mt*Mt);p.set(0,$t)}function _t(){i.enableZoom&&st(),i.enablePan&&Y()}function Lt(){i.enableZoom&&st(),i.enableRotate&&vt()}function yt(z){if(w.length==1)f.set(z.pageX,z.pageY);else{const $t=xt(z),Qt=.5*(z.pageX+$t.x),xe=.5*(z.pageY+$t.y);f.set(Qt,xe)}g.subVectors(f,d).multiplyScalar(i.rotateSpeed);const Mt=i.domElement;W(2*Math.PI*g.x/Mt.clientHeight),B(2*Math.PI*g.y/Mt.clientHeight),d.copy(f)}function St(z){if(w.length===1)x.set(z.pageX,z.pageY);else{const Mt=xt(z),$t=.5*(z.pageX+Mt.x),Qt=.5*(z.pageY+Mt.y);x.set($t,Qt)}m.subVectors(x,v).multiplyScalar(i.panSpeed),I(m.x,m.y),v.copy(x)}function At(z){const Mt=xt(z),$t=z.pageX-Mt.x,Qt=z.pageY-Mt.y,xe=Math.sqrt($t*$t+Qt*Qt);b.set(0,xe),_.set(0,Math.pow(b.y/p.y,i.zoomSpeed)),N(_.y),p.copy(b)}function V(z){i.enableZoom&&At(z),i.enablePan&&St(z)}function X(z){i.enableZoom&&At(z),i.enableRotate&&yt(z)}function Q(z){i.enabled!==!1&&(w.length===0&&(i.domElement.setPointerCapture(z.pointerId),i.domElement.addEventListener("pointermove",mt),i.domElement.addEventListener("pointerup",et)),U(z),z.pointerType==="touch"?ht(z):y(z))}function mt(z){i.enabled!==!1&&(z.pointerType==="touch"?gt(z):G(z))}function et(z){i.enabled!==!1&&(z.pointerType==="touch"?ct():$(),dt(z),w.length===0&&(i.domElement.releasePointerCapture(z.pointerId),i.domElement.removeEventListener("pointermove",mt),i.domElement.removeEventListener("pointerup",et)))}function M(z){dt(z)}function y(z){let Mt;switch(z.button){case 0:Mt=i.mouseButtons.LEFT;break;case 1:Mt=i.mouseButtons.MIDDLE;break;case 2:Mt=i.mouseButtons.RIGHT;break;default:Mt=-1}switch(Mt){case Rr.DOLLY:if(i.enableZoom===!1)return;F(z),s=r.DOLLY;break;case Rr.ROTATE:if(z.ctrlKey||z.metaKey||z.shiftKey){if(i.enablePan===!1)return;q(z),s=r.PAN}else{if(i.enableRotate===!1)return;L(z),s=r.ROTATE}break;case Rr.PAN:if(z.ctrlKey||z.metaKey||z.shiftKey){if(i.enableRotate===!1)return;L(z),s=r.ROTATE}else{if(i.enablePan===!1)return;q(z),s=r.PAN}break;default:s=r.NONE}s!==r.NONE&&i.dispatchEvent(zh)}function G(z){if(i.enabled!==!1)switch(s){case r.ROTATE:if(i.enableRotate===!1)return;ot(z);break;case r.DOLLY:if(i.enableZoom===!1)return;pt(z);break;case r.PAN:if(i.enablePan===!1)return;rt(z);break}}function $(z){i.dispatchEvent(Uh),s=r.NONE}function P(z){i.enabled===!1||i.enableZoom===!1||s!==r.NONE||(z.preventDefault(),i.dispatchEvent(zh),Et(z),i.dispatchEvent(Uh))}function K(z){i.enabled===!1||i.enablePan===!1||it(z)}function ht(z){switch(Z(z),w.length){case 1:switch(i.touches.ONE){case Pr.ROTATE:if(i.enableRotate===!1)return;vt(),s=r.TOUCH_ROTATE;break;case Pr.PAN:if(i.enablePan===!1)return;Y(),s=r.TOUCH_PAN;break;default:s=r.NONE}break;case 2:switch(i.touches.TWO){case Pr.DOLLY_PAN:if(i.enableZoom===!1&&i.enablePan===!1)return;_t(),s=r.TOUCH_DOLLY_PAN;break;case Pr.DOLLY_ROTATE:if(i.enableZoom===!1&&i.enableRotate===!1)return;Lt(),s=r.TOUCH_DOLLY_ROTATE;break;default:s=r.NONE}break;default:s=r.NONE}s!==r.NONE&&i.dispatchEvent(zh)}function gt(z){switch(Z(z),s){case r.TOUCH_ROTATE:if(i.enableRotate===!1)return;yt(z),i.update();break;case r.TOUCH_PAN:if(i.enablePan===!1)return;St(z),i.update();break;case r.TOUCH_DOLLY_PAN:if(i.enableZoom===!1&&i.enablePan===!1)return;V(z),i.update();break;case r.TOUCH_DOLLY_ROTATE:if(i.enableZoom===!1&&i.enableRotate===!1)return;X(z),i.update();break;default:s=r.NONE}}function ct(z){i.dispatchEvent(Uh),s=r.NONE}function ut(z){i.enabled!==!1&&z.preventDefault()}function U(z){w.push(z)}function dt(z){delete E[z.pointerId];for(let Mt=0;Mt<w.length;Mt++)if(w[Mt].pointerId==z.pointerId){w.splice(Mt,1);return}}function Z(z){let Mt=E[z.pointerId];Mt===void 0&&(Mt=new bt,E[z.pointerId]=Mt),Mt.set(z.pageX,z.pageY)}function xt(z){const Mt=z.pointerId===w[0].pointerId?w[1]:w[0];return E[Mt.pointerId]}i.domElement.addEventListener("contextmenu",ut),i.domElement.addEventListener("pointerdown",Q),i.domElement.addEventListener("pointercancel",M),i.domElement.addEventListener("wheel",P,{passive:!1}),this.update()}}const Kw="122",tS=0,Hp=1,eS=2,Gp=1,nS=2,Oo=3,pl=0,Ne=1,ml=2,kp=1,zo=0,Uo=1,Vp=2,Wp=3,$p=4,iS=5,vs=100,rS=101,sS=102,qp=103,jp=104,oS=200,aS=201,lS=202,cS=203,Xp=204,Yp=205,hS=206,uS=207,dS=208,fS=209,pS=210,mS=0,gS=1,vS=2,Hh=3,xS=4,yS=5,_S=6,bS=7,gl=0,MS=1,wS=2,Ho=0,SS=1,ES=2,TS=3,AS=4,LS=5,Zp=300,Gh=301,kh=302,Jp=303,Qp=304,Vh=306,Wh=307,$h=1e3,cn=1001,qh=1002,Je=1003,Kp=1004,tm=1005,Ve=1006,CS=1007,vl=1008,jh=1009,RS=1010,PS=1011,xl=1012,IS=1013,yl=1014,Gi=1015,_l=1016,DS=1017,NS=1018,FS=1019,Go=1020,BS=1021,pr=1022,Rn=1023,OS=1024,zS=1025,xs=1026,ko=1027,US=1028,HS=1029,GS=1030,kS=1031,VS=1032,WS=1033,em=33776,nm=33777,im=33778,rm=33779,sm=35840,om=35841,am=35842,lm=35843,$S=36196,cm=37492,hm=37496,qS=37808,jS=37809,XS=37810,YS=37811,ZS=37812,JS=37813,QS=37814,KS=37815,t1=37816,e1=37817,n1=37818,i1=37819,r1=37820,s1=37821,o1=36492,a1=37840,l1=37841,c1=37842,h1=37843,u1=37844,d1=37845,f1=37846,p1=37847,m1=37848,g1=37849,v1=37850,x1=37851,y1=37852,_1=37853,b1=2200,M1=2201,w1=2202,bl=2300,Ml=2301,Xh=2302,ys=2400,_s=2401,wl=2402,Yh=2500,um=2501,S1=0,Vo=3e3,dm=3001,E1=3007,T1=3002,A1=3003,L1=3004,C1=3005,R1=3006,P1=3200,I1=3201,bs=0,D1=1,Zh=7680,N1=519,Sl=35044,Wo=35048,fm="300 es";function ci(){}Object.assign(ci.prototype,{addEventListener:function(n,t){this._listeners===void 0&&(this._listeners={});const e=this._listeners;e[n]===void 0&&(e[n]=[]),e[n].indexOf(t)===-1&&e[n].push(t)},hasEventListener:function(n,t){if(this._listeners===void 0)return!1;const e=this._listeners;return e[n]!==void 0&&e[n].indexOf(t)!==-1},removeEventListener:function(n,t){if(this._listeners===void 0)return;const i=this._listeners[n];if(i!==void 0){const r=i.indexOf(t);r!==-1&&i.splice(r,1)}},dispatchEvent:function(n){if(this._listeners===void 0)return;const e=this._listeners[n.type];if(e!==void 0){n.target=this;const i=e.slice(0);for(let r=0,s=i.length;r<s;r++)i[r].call(this,n)}}});const Fe=[];for(let n=0;n<256;n++)Fe[n]=(n<16?"0":"")+n.toString(16);let El=1234567;const Vt={DEG2RAD:Math.PI/180,RAD2DEG:180/Math.PI,generateUUID:function(){const n=Math.random()*4294967295|0,t=Math.random()*4294967295|0,e=Math.random()*4294967295|0,i=Math.random()*4294967295|0;return(Fe[n&255]+Fe[n>>8&255]+Fe[n>>16&255]+Fe[n>>24&255]+"-"+Fe[t&255]+Fe[t>>8&255]+"-"+Fe[t>>16&15|64]+Fe[t>>24&255]+"-"+Fe[e&63|128]+Fe[e>>8&255]+"-"+Fe[e>>16&255]+Fe[e>>24&255]+Fe[i&255]+Fe[i>>8&255]+Fe[i>>16&255]+Fe[i>>24&255]).toUpperCase()},clamp:function(n,t,e){return Math.max(t,Math.min(e,n))},euclideanModulo:function(n,t){return(n%t+t)%t},mapLinear:function(n,t,e,i,r){return i+(n-t)*(r-i)/(e-t)},lerp:function(n,t,e){return(1-e)*n+e*t},smoothstep:function(n,t,e){return n<=t?0:n>=e?1:(n=(n-t)/(e-t),n*n*(3-2*n))},smootherstep:function(n,t,e){return n<=t?0:n>=e?1:(n=(n-t)/(e-t),n*n*n*(n*(n*6-15)+10))},randInt:function(n,t){return n+Math.floor(Math.random()*(t-n+1))},randFloat:function(n,t){return n+Math.random()*(t-n)},randFloatSpread:function(n){return n*(.5-Math.random())},seededRandom:function(n){return n!==void 0&&(El=n%2147483647),El=El*16807%2147483647,(El-1)/2147483646},degToRad:function(n){return n*Vt.DEG2RAD},radToDeg:function(n){return n*Vt.RAD2DEG},isPowerOfTwo:function(n){return(n&n-1)==0&&n!==0},ceilPowerOfTwo:function(n){return Math.pow(2,Math.ceil(Math.log(n)/Math.LN2))},floorPowerOfTwo:function(n){return Math.pow(2,Math.floor(Math.log(n)/Math.LN2))},setQuaternionFromProperEuler:function(n,t,e,i,r){const s=Math.cos,o=Math.sin,a=s(e/2),l=o(e/2),c=s((t+i)/2),h=o((t+i)/2),u=s((t-i)/2),d=o((t-i)/2),f=s((i-t)/2),g=o((i-t)/2);switch(r){case"XYX":n.set(a*h,l*u,l*d,a*c);break;case"YZY":n.set(l*d,a*h,l*u,a*c);break;case"ZXZ":n.set(l*u,l*d,a*h,a*c);break;case"XZX":n.set(a*h,l*g,l*f,a*c);break;case"YXY":n.set(l*f,a*h,l*g,a*c);break;case"ZYZ":n.set(l*g,l*f,a*h,a*c);break;default:console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: "+r)}}};class wt{constructor(t=0,e=0){Object.defineProperty(this,"isVector2",{value:!0}),this.x=t,this.y=e}get width(){return this.x}set width(t){this.x=t}get height(){return this.y}set height(t){this.y=t}set(t,e){return this.x=t,this.y=e,this}setScalar(t){return this.x=t,this.y=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y)}copy(t){return this.x=t.x,this.y=t.y,this}add(t,e){return e!==void 0?(console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this)}addScalar(t){return this.x+=t,this.y+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this}sub(t,e){return e!==void 0?(console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this)}subScalar(t){return this.x-=t,this.y-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this}multiply(t){return this.x*=t.x,this.y*=t.y,this}multiplyScalar(t){return this.x*=t,this.y*=t,this}divide(t){return this.x/=t.x,this.y/=t.y,this}divideScalar(t){return this.multiplyScalar(1/t)}applyMatrix3(t){const e=this.x,i=this.y,r=t.elements;return this.x=r[0]*e+r[3]*i+r[6],this.y=r[1]*e+r[4]*i+r[7],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this}clampLength(t,e){const i=this.length();return this.divideScalar(i||1).multiplyScalar(Math.max(t,Math.min(e,i)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,i=this.y-t.y;return e*e+i*i}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this}lerpVectors(t,e,i){return this.x=t.x+(e.x-t.x)*i,this.y=t.y+(e.y-t.y)*i,this}equals(t){return t.x===this.x&&t.y===this.y}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t}fromBufferAttribute(t,e,i){return i!==void 0&&console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute()."),this.x=t.getX(e),this.y=t.getY(e),this}rotateAround(t,e){const i=Math.cos(e),r=Math.sin(e),s=this.x-t.x,o=this.y-t.y;return this.x=s*i-o*r+t.x,this.y=s*r+o*i+t.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}}class nn{constructor(){Object.defineProperty(this,"isMatrix3",{value:!0}),this.elements=[1,0,0,0,1,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")}set(t,e,i,r,s,o,a,l,c){const h=this.elements;return h[0]=t,h[1]=r,h[2]=a,h[3]=e,h[4]=s,h[5]=l,h[6]=i,h[7]=o,h[8]=c,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}clone(){return new this.constructor().fromArray(this.elements)}copy(t){const e=this.elements,i=t.elements;return e[0]=i[0],e[1]=i[1],e[2]=i[2],e[3]=i[3],e[4]=i[4],e[5]=i[5],e[6]=i[6],e[7]=i[7],e[8]=i[8],this}extractBasis(t,e,i){return t.setFromMatrix3Column(this,0),e.setFromMatrix3Column(this,1),i.setFromMatrix3Column(this,2),this}setFromMatrix4(t){const e=t.elements;return this.set(e[0],e[4],e[8],e[1],e[5],e[9],e[2],e[6],e[10]),this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const i=t.elements,r=e.elements,s=this.elements,o=i[0],a=i[3],l=i[6],c=i[1],h=i[4],u=i[7],d=i[2],f=i[5],g=i[8],v=r[0],x=r[3],m=r[6],p=r[1],b=r[4],_=r[7],w=r[2],E=r[5],S=r[8];return s[0]=o*v+a*p+l*w,s[3]=o*x+a*b+l*E,s[6]=o*m+a*_+l*S,s[1]=c*v+h*p+u*w,s[4]=c*x+h*b+u*E,s[7]=c*m+h*_+u*S,s[2]=d*v+f*p+g*w,s[5]=d*x+f*b+g*E,s[8]=d*m+f*_+g*S,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[3]*=t,e[6]*=t,e[1]*=t,e[4]*=t,e[7]*=t,e[2]*=t,e[5]*=t,e[8]*=t,this}determinant(){const t=this.elements,e=t[0],i=t[1],r=t[2],s=t[3],o=t[4],a=t[5],l=t[6],c=t[7],h=t[8];return e*o*h-e*a*c-i*s*h+i*a*l+r*s*c-r*o*l}getInverse(t,e){e!==void 0&&console.warn("THREE.Matrix3: .getInverse() can no longer be configured to throw on degenerate.");const i=t.elements,r=this.elements,s=i[0],o=i[1],a=i[2],l=i[3],c=i[4],h=i[5],u=i[6],d=i[7],f=i[8],g=f*c-h*d,v=h*u-f*l,x=d*l-c*u,m=s*g+o*v+a*x;if(m===0)return this.set(0,0,0,0,0,0,0,0,0);const p=1/m;return r[0]=g*p,r[1]=(a*d-f*o)*p,r[2]=(h*o-a*c)*p,r[3]=v*p,r[4]=(f*s-a*u)*p,r[5]=(a*l-h*s)*p,r[6]=x*p,r[7]=(o*u-d*s)*p,r[8]=(c*s-o*l)*p,this}transpose(){let t;const e=this.elements;return t=e[1],e[1]=e[3],e[3]=t,t=e[2],e[2]=e[6],e[6]=t,t=e[5],e[5]=e[7],e[7]=t,this}getNormalMatrix(t){return this.setFromMatrix4(t).getInverse(this).transpose()}transposeIntoArray(t){const e=this.elements;return t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8],this}setUvTransform(t,e,i,r,s,o,a){const l=Math.cos(s),c=Math.sin(s);this.set(i*l,i*c,-i*(l*o+c*a)+o+t,-r*c,r*l,-r*(-c*o+l*a)+a+e,0,0,1)}scale(t,e){const i=this.elements;return i[0]*=t,i[3]*=t,i[6]*=t,i[1]*=e,i[4]*=e,i[7]*=e,this}rotate(t){const e=Math.cos(t),i=Math.sin(t),r=this.elements,s=r[0],o=r[3],a=r[6],l=r[1],c=r[4],h=r[7];return r[0]=e*s+i*l,r[3]=e*o+i*c,r[6]=e*a+i*h,r[1]=-i*s+e*l,r[4]=-i*o+e*c,r[7]=-i*a+e*h,this}translate(t,e){const i=this.elements;return i[0]+=t*i[2],i[3]+=t*i[5],i[6]+=t*i[8],i[1]+=e*i[2],i[4]+=e*i[5],i[7]+=e*i[8],this}equals(t){const e=this.elements,i=t.elements;for(let r=0;r<9;r++)if(e[r]!==i[r])return!1;return!0}fromArray(t,e=0){for(let i=0;i<9;i++)this.elements[i]=t[i+e];return this}toArray(t=[],e=0){const i=this.elements;return t[e]=i[0],t[e+1]=i[1],t[e+2]=i[2],t[e+3]=i[3],t[e+4]=i[4],t[e+5]=i[5],t[e+6]=i[6],t[e+7]=i[7],t[e+8]=i[8],t}}let Ms;const mr={getDataURL:function(n){if(/^data:/i.test(n.src)||typeof HTMLCanvasElement=="undefined")return n.src;let t;if(n instanceof HTMLCanvasElement)t=n;else{Ms===void 0&&(Ms=document.createElementNS("http://www.w3.org/1999/xhtml","canvas")),Ms.width=n.width,Ms.height=n.height;const e=Ms.getContext("2d");n instanceof ImageData?e.putImageData(n,0,0):e.drawImage(n,0,0,n.width,n.height),t=Ms}return t.width>2048||t.height>2048?t.toDataURL("image/jpeg",.6):t.toDataURL("image/png")}};let F1=0;function de(n,t,e,i,r,s,o,a,l,c){Object.defineProperty(this,"id",{value:F1++}),this.uuid=Vt.generateUUID(),this.name="",this.image=n!==void 0?n:de.DEFAULT_IMAGE,this.mipmaps=[],this.mapping=t!==void 0?t:de.DEFAULT_MAPPING,this.wrapS=e!==void 0?e:cn,this.wrapT=i!==void 0?i:cn,this.magFilter=r!==void 0?r:Ve,this.minFilter=s!==void 0?s:vl,this.anisotropy=l!==void 0?l:1,this.format=o!==void 0?o:Rn,this.internalFormat=null,this.type=a!==void 0?a:jh,this.offset=new wt(0,0),this.repeat=new wt(1,1),this.center=new wt(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new nn,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=c!==void 0?c:Vo,this.version=0,this.onUpdate=null}de.DEFAULT_IMAGE=void 0;de.DEFAULT_MAPPING=Zp;de.prototype=Object.assign(Object.create(ci.prototype),{constructor:de,isTexture:!0,updateMatrix:function(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)},clone:function(){return new this.constructor().copy(this)},copy:function(n){return this.name=n.name,this.image=n.image,this.mipmaps=n.mipmaps.slice(0),this.mapping=n.mapping,this.wrapS=n.wrapS,this.wrapT=n.wrapT,this.magFilter=n.magFilter,this.minFilter=n.minFilter,this.anisotropy=n.anisotropy,this.format=n.format,this.internalFormat=n.internalFormat,this.type=n.type,this.offset.copy(n.offset),this.repeat.copy(n.repeat),this.center.copy(n.center),this.rotation=n.rotation,this.matrixAutoUpdate=n.matrixAutoUpdate,this.matrix.copy(n.matrix),this.generateMipmaps=n.generateMipmaps,this.premultiplyAlpha=n.premultiplyAlpha,this.flipY=n.flipY,this.unpackAlignment=n.unpackAlignment,this.encoding=n.encoding,this},toJSON:function(n){const t=n===void 0||typeof n=="string";if(!t&&n.textures[this.uuid]!==void 0)return n.textures[this.uuid];const e={metadata:{version:4.5,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,type:this.type,encoding:this.encoding,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};if(this.image!==void 0){const i=this.image;if(i.uuid===void 0&&(i.uuid=Vt.generateUUID()),!t&&n.images[i.uuid]===void 0){let r;if(Array.isArray(i)){r=[];for(let s=0,o=i.length;s<o;s++)r.push(mr.getDataURL(i[s]))}else r=mr.getDataURL(i);n.images[i.uuid]={uuid:i.uuid,url:r}}e.image=i.uuid}return t||(n.textures[this.uuid]=e),e},dispose:function(){this.dispatchEvent({type:"dispose"})},transformUv:function(n){if(this.mapping!==Zp)return n;if(n.applyMatrix3(this.matrix),n.x<0||n.x>1)switch(this.wrapS){case $h:n.x=n.x-Math.floor(n.x);break;case cn:n.x=n.x<0?0:1;break;case qh:Math.abs(Math.floor(n.x)%2)===1?n.x=Math.ceil(n.x)-n.x:n.x=n.x-Math.floor(n.x);break}if(n.y<0||n.y>1)switch(this.wrapT){case $h:n.y=n.y-Math.floor(n.y);break;case cn:n.y=n.y<0?0:1;break;case qh:Math.abs(Math.floor(n.y)%2)===1?n.y=Math.ceil(n.y)-n.y:n.y=n.y-Math.floor(n.y);break}return this.flipY&&(n.y=1-n.y),n}});Object.defineProperty(de.prototype,"needsUpdate",{set:function(n){n===!0&&this.version++}});class ae{constructor(t=0,e=0,i=0,r=1){Object.defineProperty(this,"isVector4",{value:!0}),this.x=t,this.y=e,this.z=i,this.w=r}get width(){return this.z}set width(t){this.z=t}get height(){return this.w}set height(t){this.w=t}set(t,e,i,r){return this.x=t,this.y=e,this.z=i,this.w=r,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this.w=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setW(t){return this.w=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;case 3:this.w=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w!==void 0?t.w:1,this}add(t,e){return e!==void 0?(console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this.z+=t.z,this.w+=t.w,this)}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this.w+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this.w=t.w+e.w,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this.w+=t.w*e,this}sub(t,e){return e!==void 0?(console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this.z-=t.z,this.w-=t.w,this)}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this.w-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this.w=t.w-e.w,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this.w*=t,this}applyMatrix4(t){const e=this.x,i=this.y,r=this.z,s=this.w,o=t.elements;return this.x=o[0]*e+o[4]*i+o[8]*r+o[12]*s,this.y=o[1]*e+o[5]*i+o[9]*r+o[13]*s,this.z=o[2]*e+o[6]*i+o[10]*r+o[14]*s,this.w=o[3]*e+o[7]*i+o[11]*r+o[15]*s,this}divideScalar(t){return this.multiplyScalar(1/t)}setAxisAngleFromQuaternion(t){this.w=2*Math.acos(t.w);const e=Math.sqrt(1-t.w*t.w);return e<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=t.x/e,this.y=t.y/e,this.z=t.z/e),this}setAxisAngleFromRotationMatrix(t){let e,i,r,s;const o=.01,a=.1,l=t.elements,c=l[0],h=l[4],u=l[8],d=l[1],f=l[5],g=l[9],v=l[2],x=l[6],m=l[10];if(Math.abs(h-d)<o&&Math.abs(u-v)<o&&Math.abs(g-x)<o){if(Math.abs(h+d)<a&&Math.abs(u+v)<a&&Math.abs(g+x)<a&&Math.abs(c+f+m-3)<a)return this.set(1,0,0,0),this;e=Math.PI;const b=(c+1)/2,_=(f+1)/2,w=(m+1)/2,E=(h+d)/4,S=(u+v)/4,R=(g+x)/4;return b>_&&b>w?b<o?(i=0,r=.707106781,s=.707106781):(i=Math.sqrt(b),r=E/i,s=S/i):_>w?_<o?(i=.707106781,r=0,s=.707106781):(r=Math.sqrt(_),i=E/r,s=R/r):w<o?(i=.707106781,r=.707106781,s=0):(s=Math.sqrt(w),i=S/s,r=R/s),this.set(i,r,s,e),this}let p=Math.sqrt((x-g)*(x-g)+(u-v)*(u-v)+(d-h)*(d-h));return Math.abs(p)<.001&&(p=1),this.x=(x-g)/p,this.y=(u-v)/p,this.z=(d-h)/p,this.w=Math.acos((c+f+m-1)/2),this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this.w=Math.min(this.w,t.w),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this.w=Math.max(this.w,t.w),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this.w=Math.max(t.w,Math.min(e.w,this.w)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this.w=Math.max(t,Math.min(e,this.w)),this}clampLength(t,e){const i=this.length();return this.divideScalar(i||1).multiplyScalar(Math.max(t,Math.min(e,i)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this.w+=(t.w-this.w)*e,this}lerpVectors(t,e,i){return this.x=t.x+(e.x-t.x)*i,this.y=t.y+(e.y-t.y)*i,this.z=t.z+(e.z-t.z)*i,this.w=t.w+(e.w-t.w)*i,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z&&t.w===this.w}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this.w=t[e+3],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t[e+3]=this.w,t}fromBufferAttribute(t,e,i){return i!==void 0&&console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute()."),this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this.w=t.getW(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}}function Pn(n,t,e){this.width=n,this.height=t,this.scissor=new ae(0,0,n,t),this.scissorTest=!1,this.viewport=new ae(0,0,n,t),e=e||{},this.texture=new de(void 0,e.mapping,e.wrapS,e.wrapT,e.magFilter,e.minFilter,e.format,e.type,e.anisotropy,e.encoding),this.texture.image={},this.texture.image.width=n,this.texture.image.height=t,this.texture.generateMipmaps=e.generateMipmaps!==void 0?e.generateMipmaps:!1,this.texture.minFilter=e.minFilter!==void 0?e.minFilter:Ve,this.depthBuffer=e.depthBuffer!==void 0?e.depthBuffer:!0,this.stencilBuffer=e.stencilBuffer!==void 0?e.stencilBuffer:!1,this.depthTexture=e.depthTexture!==void 0?e.depthTexture:null}Pn.prototype=Object.assign(Object.create(ci.prototype),{constructor:Pn,isWebGLRenderTarget:!0,setSize:function(n,t){(this.width!==n||this.height!==t)&&(this.width=n,this.height=t,this.texture.image.width=n,this.texture.image.height=t,this.dispose()),this.viewport.set(0,0,n,t),this.scissor.set(0,0,n,t)},clone:function(){return new this.constructor().copy(this)},copy:function(n){return this.width=n.width,this.height=n.height,this.viewport.copy(n.viewport),this.texture=n.texture.clone(),this.depthBuffer=n.depthBuffer,this.stencilBuffer=n.stencilBuffer,this.depthTexture=n.depthTexture,this},dispose:function(){this.dispatchEvent({type:"dispose"})}});function pm(n,t,e){Pn.call(this,n,t,e),this.samples=4}pm.prototype=Object.assign(Object.create(Pn.prototype),{constructor:pm,isWebGLMultisampleRenderTarget:!0,copy:function(n){return Pn.prototype.copy.call(this,n),this.samples=n.samples,this}});class hn{constructor(t=0,e=0,i=0,r=1){Object.defineProperty(this,"isQuaternion",{value:!0}),this._x=t,this._y=e,this._z=i,this._w=r}static slerp(t,e,i,r){return i.copy(t).slerp(e,r)}static slerpFlat(t,e,i,r,s,o,a){let l=i[r+0],c=i[r+1],h=i[r+2],u=i[r+3];const d=s[o+0],f=s[o+1],g=s[o+2],v=s[o+3];if(u!==v||l!==d||c!==f||h!==g){let x=1-a;const m=l*d+c*f+h*g+u*v,p=m>=0?1:-1,b=1-m*m;if(b>Number.EPSILON){const w=Math.sqrt(b),E=Math.atan2(w,m*p);x=Math.sin(x*E)/w,a=Math.sin(a*E)/w}const _=a*p;if(l=l*x+d*_,c=c*x+f*_,h=h*x+g*_,u=u*x+v*_,x===1-a){const w=1/Math.sqrt(l*l+c*c+h*h+u*u);l*=w,c*=w,h*=w,u*=w}}t[e]=l,t[e+1]=c,t[e+2]=h,t[e+3]=u}static multiplyQuaternionsFlat(t,e,i,r,s,o){const a=i[r],l=i[r+1],c=i[r+2],h=i[r+3],u=s[o],d=s[o+1],f=s[o+2],g=s[o+3];return t[e]=a*g+h*u+l*f-c*d,t[e+1]=l*g+h*d+c*u-a*f,t[e+2]=c*g+h*f+a*d-l*u,t[e+3]=h*g-a*u-l*d-c*f,t}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get w(){return this._w}set w(t){this._w=t,this._onChangeCallback()}set(t,e,i,r){return this._x=t,this._y=e,this._z=i,this._w=r,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(t){return this._x=t.x,this._y=t.y,this._z=t.z,this._w=t.w,this._onChangeCallback(),this}setFromEuler(t,e){if(!(t&&t.isEuler))throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");const i=t._x,r=t._y,s=t._z,o=t._order,a=Math.cos,l=Math.sin,c=a(i/2),h=a(r/2),u=a(s/2),d=l(i/2),f=l(r/2),g=l(s/2);switch(o){case"XYZ":this._x=d*h*u+c*f*g,this._y=c*f*u-d*h*g,this._z=c*h*g+d*f*u,this._w=c*h*u-d*f*g;break;case"YXZ":this._x=d*h*u+c*f*g,this._y=c*f*u-d*h*g,this._z=c*h*g-d*f*u,this._w=c*h*u+d*f*g;break;case"ZXY":this._x=d*h*u-c*f*g,this._y=c*f*u+d*h*g,this._z=c*h*g+d*f*u,this._w=c*h*u-d*f*g;break;case"ZYX":this._x=d*h*u-c*f*g,this._y=c*f*u+d*h*g,this._z=c*h*g-d*f*u,this._w=c*h*u+d*f*g;break;case"YZX":this._x=d*h*u+c*f*g,this._y=c*f*u+d*h*g,this._z=c*h*g-d*f*u,this._w=c*h*u-d*f*g;break;case"XZY":this._x=d*h*u-c*f*g,this._y=c*f*u-d*h*g,this._z=c*h*g+d*f*u,this._w=c*h*u+d*f*g;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+o)}return e!==!1&&this._onChangeCallback(),this}setFromAxisAngle(t,e){const i=e/2,r=Math.sin(i);return this._x=t.x*r,this._y=t.y*r,this._z=t.z*r,this._w=Math.cos(i),this._onChangeCallback(),this}setFromRotationMatrix(t){const e=t.elements,i=e[0],r=e[4],s=e[8],o=e[1],a=e[5],l=e[9],c=e[2],h=e[6],u=e[10],d=i+a+u;if(d>0){const f=.5/Math.sqrt(d+1);this._w=.25/f,this._x=(h-l)*f,this._y=(s-c)*f,this._z=(o-r)*f}else if(i>a&&i>u){const f=2*Math.sqrt(1+i-a-u);this._w=(h-l)/f,this._x=.25*f,this._y=(r+o)/f,this._z=(s+c)/f}else if(a>u){const f=2*Math.sqrt(1+a-i-u);this._w=(s-c)/f,this._x=(r+o)/f,this._y=.25*f,this._z=(l+h)/f}else{const f=2*Math.sqrt(1+u-i-a);this._w=(o-r)/f,this._x=(s+c)/f,this._y=(l+h)/f,this._z=.25*f}return this._onChangeCallback(),this}setFromUnitVectors(t,e){const i=1e-6;let r=t.dot(e)+1;return r<i?(r=0,Math.abs(t.x)>Math.abs(t.z)?(this._x=-t.y,this._y=t.x,this._z=0,this._w=r):(this._x=0,this._y=-t.z,this._z=t.y,this._w=r)):(this._x=t.y*e.z-t.z*e.y,this._y=t.z*e.x-t.x*e.z,this._z=t.x*e.y-t.y*e.x,this._w=r),this.normalize()}angleTo(t){return 2*Math.acos(Math.abs(Vt.clamp(this.dot(t),-1,1)))}rotateTowards(t,e){const i=this.angleTo(t);if(i===0)return this;const r=Math.min(1,e/i);return this.slerp(t,r),this}identity(){return this.set(0,0,0,1)}inverse(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(t){return this._x*t._x+this._y*t._y+this._z*t._z+this._w*t._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let t=this.length();return t===0?(this._x=0,this._y=0,this._z=0,this._w=1):(t=1/t,this._x=this._x*t,this._y=this._y*t,this._z=this._z*t,this._w=this._w*t),this._onChangeCallback(),this}multiply(t,e){return e!==void 0?(console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),this.multiplyQuaternions(t,e)):this.multiplyQuaternions(this,t)}premultiply(t){return this.multiplyQuaternions(t,this)}multiplyQuaternions(t,e){const i=t._x,r=t._y,s=t._z,o=t._w,a=e._x,l=e._y,c=e._z,h=e._w;return this._x=i*h+o*a+r*c-s*l,this._y=r*h+o*l+s*a-i*c,this._z=s*h+o*c+i*l-r*a,this._w=o*h-i*a-r*l-s*c,this._onChangeCallback(),this}slerp(t,e){if(e===0)return this;if(e===1)return this.copy(t);const i=this._x,r=this._y,s=this._z,o=this._w;let a=o*t._w+i*t._x+r*t._y+s*t._z;if(a<0?(this._w=-t._w,this._x=-t._x,this._y=-t._y,this._z=-t._z,a=-a):this.copy(t),a>=1)return this._w=o,this._x=i,this._y=r,this._z=s,this;const l=1-a*a;if(l<=Number.EPSILON){const f=1-e;return this._w=f*o+e*this._w,this._x=f*i+e*this._x,this._y=f*r+e*this._y,this._z=f*s+e*this._z,this.normalize(),this._onChangeCallback(),this}const c=Math.sqrt(l),h=Math.atan2(c,a),u=Math.sin((1-e)*h)/c,d=Math.sin(e*h)/c;return this._w=o*u+this._w*d,this._x=i*u+this._x*d,this._y=r*u+this._y*d,this._z=s*u+this._z*d,this._onChangeCallback(),this}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._w===this._w}fromArray(t,e=0){return this._x=t[e],this._y=t[e+1],this._z=t[e+2],this._w=t[e+3],this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._w,t}fromBufferAttribute(t,e){return this._x=t.getX(e),this._y=t.getY(e),this._z=t.getZ(e),this._w=t.getW(e),this}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}}class H{constructor(t=0,e=0,i=0){Object.defineProperty(this,"isVector3",{value:!0}),this.x=t,this.y=e,this.z=i}set(t,e,i){return i===void 0&&(i=this.z),this.x=t,this.y=e,this.z=i,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}add(t,e){return e!==void 0?(console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this.z+=t.z,this)}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this}sub(t,e){return e!==void 0?(console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this.z-=t.z,this)}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this}multiply(t,e){return e!==void 0?(console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),this.multiplyVectors(t,e)):(this.x*=t.x,this.y*=t.y,this.z*=t.z,this)}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this}multiplyVectors(t,e){return this.x=t.x*e.x,this.y=t.y*e.y,this.z=t.z*e.z,this}applyEuler(t){return t&&t.isEuler||console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."),this.applyQuaternion(mm.setFromEuler(t))}applyAxisAngle(t,e){return this.applyQuaternion(mm.setFromAxisAngle(t,e))}applyMatrix3(t){const e=this.x,i=this.y,r=this.z,s=t.elements;return this.x=s[0]*e+s[3]*i+s[6]*r,this.y=s[1]*e+s[4]*i+s[7]*r,this.z=s[2]*e+s[5]*i+s[8]*r,this}applyNormalMatrix(t){return this.applyMatrix3(t).normalize()}applyMatrix4(t){const e=this.x,i=this.y,r=this.z,s=t.elements,o=1/(s[3]*e+s[7]*i+s[11]*r+s[15]);return this.x=(s[0]*e+s[4]*i+s[8]*r+s[12])*o,this.y=(s[1]*e+s[5]*i+s[9]*r+s[13])*o,this.z=(s[2]*e+s[6]*i+s[10]*r+s[14])*o,this}applyQuaternion(t){const e=this.x,i=this.y,r=this.z,s=t.x,o=t.y,a=t.z,l=t.w,c=l*e+o*r-a*i,h=l*i+a*e-s*r,u=l*r+s*i-o*e,d=-s*e-o*i-a*r;return this.x=c*l+d*-s+h*-a-u*-o,this.y=h*l+d*-o+u*-s-c*-a,this.z=u*l+d*-a+c*-o-h*-s,this}project(t){return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix)}unproject(t){return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld)}transformDirection(t){const e=this.x,i=this.y,r=this.z,s=t.elements;return this.x=s[0]*e+s[4]*i+s[8]*r,this.y=s[1]*e+s[5]*i+s[9]*r,this.z=s[2]*e+s[6]*i+s[10]*r,this.normalize()}divide(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this}divideScalar(t){return this.multiplyScalar(1/t)}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this}clampLength(t,e){const i=this.length();return this.divideScalar(i||1).multiplyScalar(Math.max(t,Math.min(e,i)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this}lerpVectors(t,e,i){return this.x=t.x+(e.x-t.x)*i,this.y=t.y+(e.y-t.y)*i,this.z=t.z+(e.z-t.z)*i,this}cross(t,e){return e!==void 0?(console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),this.crossVectors(t,e)):this.crossVectors(this,t)}crossVectors(t,e){const i=t.x,r=t.y,s=t.z,o=e.x,a=e.y,l=e.z;return this.x=r*l-s*a,this.y=s*o-i*l,this.z=i*a-r*o,this}projectOnVector(t){const e=t.lengthSq();if(e===0)return this.set(0,0,0);const i=t.dot(this)/e;return this.copy(t).multiplyScalar(i)}projectOnPlane(t){return Jh.copy(this).projectOnVector(t),this.sub(Jh)}reflect(t){return this.sub(Jh.copy(t).multiplyScalar(2*this.dot(t)))}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(e===0)return Math.PI/2;const i=this.dot(t)/e;return Math.acos(Vt.clamp(i,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,i=this.y-t.y,r=this.z-t.z;return e*e+i*i+r*r}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)+Math.abs(this.z-t.z)}setFromSpherical(t){return this.setFromSphericalCoords(t.radius,t.phi,t.theta)}setFromSphericalCoords(t,e,i){const r=Math.sin(e)*t;return this.x=r*Math.sin(i),this.y=Math.cos(e)*t,this.z=r*Math.cos(i),this}setFromCylindrical(t){return this.setFromCylindricalCoords(t.radius,t.theta,t.y)}setFromCylindricalCoords(t,e,i){return this.x=t*Math.sin(e),this.y=i,this.z=t*Math.cos(e),this}setFromMatrixPosition(t){const e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this}setFromMatrixScale(t){const e=this.setFromMatrixColumn(t,0).length(),i=this.setFromMatrixColumn(t,1).length(),r=this.setFromMatrixColumn(t,2).length();return this.x=e,this.y=i,this.z=r,this}setFromMatrixColumn(t,e){return this.fromArray(t.elements,e*4)}setFromMatrix3Column(t,e){return this.fromArray(t.elements,e*3)}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t}fromBufferAttribute(t,e,i){return i!==void 0&&console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute()."),this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}}const Jh=new H,mm=new hn;class ki{constructor(t,e){Object.defineProperty(this,"isBox3",{value:!0}),this.min=t!==void 0?t:new H(1/0,1/0,1/0),this.max=e!==void 0?e:new H(-1/0,-1/0,-1/0)}set(t,e){return this.min.copy(t),this.max.copy(e),this}setFromArray(t){let e=1/0,i=1/0,r=1/0,s=-1/0,o=-1/0,a=-1/0;for(let l=0,c=t.length;l<c;l+=3){const h=t[l],u=t[l+1],d=t[l+2];h<e&&(e=h),u<i&&(i=u),d<r&&(r=d),h>s&&(s=h),u>o&&(o=u),d>a&&(a=d)}return this.min.set(e,i,r),this.max.set(s,o,a),this}setFromBufferAttribute(t){let e=1/0,i=1/0,r=1/0,s=-1/0,o=-1/0,a=-1/0;for(let l=0,c=t.count;l<c;l++){const h=t.getX(l),u=t.getY(l),d=t.getZ(l);h<e&&(e=h),u<i&&(i=u),d<r&&(r=d),h>s&&(s=h),u>o&&(o=u),d>a&&(a=d)}return this.min.set(e,i,r),this.max.set(s,o,a),this}setFromPoints(t){this.makeEmpty();for(let e=0,i=t.length;e<i;e++)this.expandByPoint(t[e]);return this}setFromCenterAndSize(t,e){const i=$o.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(i),this.max.copy(t).add(i),this}setFromObject(t){return this.makeEmpty(),this.expandByObject(t)}clone(){return new this.constructor().copy(this)}copy(t){return this.min.copy(t.min),this.max.copy(t.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(t){return t===void 0&&(console.warn("THREE.Box3: .getCenter() target is now required"),t=new H),this.isEmpty()?t.set(0,0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(t){return t===void 0&&(console.warn("THREE.Box3: .getSize() target is now required"),t=new H),this.isEmpty()?t.set(0,0,0):t.subVectors(this.max,this.min)}expandByPoint(t){return this.min.min(t),this.max.max(t),this}expandByVector(t){return this.min.sub(t),this.max.add(t),this}expandByScalar(t){return this.min.addScalar(-t),this.max.addScalar(t),this}expandByObject(t){t.updateWorldMatrix(!1,!1);const e=t.geometry;e!==void 0&&(e.boundingBox===null&&e.computeBoundingBox(),Kh.copy(e.boundingBox),Kh.applyMatrix4(t.matrixWorld),this.union(Kh));const i=t.children;for(let r=0,s=i.length;r<s;r++)this.expandByObject(i[r]);return this}containsPoint(t){return!(t.x<this.min.x||t.x>this.max.x||t.y<this.min.y||t.y>this.max.y||t.z<this.min.z||t.z>this.max.z)}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y&&this.min.z<=t.min.z&&t.max.z<=this.max.z}getParameter(t,e){return e===void 0&&(console.warn("THREE.Box3: .getParameter() target is now required"),e=new H),e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y),(t.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(t){return!(t.max.x<this.min.x||t.min.x>this.max.x||t.max.y<this.min.y||t.min.y>this.max.y||t.max.z<this.min.z||t.min.z>this.max.z)}intersectsSphere(t){return this.clampPoint(t.center,$o),$o.distanceToSquared(t.center)<=t.radius*t.radius}intersectsPlane(t){let e,i;return t.normal.x>0?(e=t.normal.x*this.min.x,i=t.normal.x*this.max.x):(e=t.normal.x*this.max.x,i=t.normal.x*this.min.x),t.normal.y>0?(e+=t.normal.y*this.min.y,i+=t.normal.y*this.max.y):(e+=t.normal.y*this.max.y,i+=t.normal.y*this.min.y),t.normal.z>0?(e+=t.normal.z*this.min.z,i+=t.normal.z*this.max.z):(e+=t.normal.z*this.max.z,i+=t.normal.z*this.min.z),e<=-t.constant&&i>=-t.constant}intersectsTriangle(t){if(this.isEmpty())return!1;this.getCenter(qo),Tl.subVectors(this.max,qo),ws.subVectors(t.a,qo),Ss.subVectors(t.b,qo),Es.subVectors(t.c,qo),Vi.subVectors(Ss,ws),Wi.subVectors(Es,Ss),gr.subVectors(ws,Es);let e=[0,-Vi.z,Vi.y,0,-Wi.z,Wi.y,0,-gr.z,gr.y,Vi.z,0,-Vi.x,Wi.z,0,-Wi.x,gr.z,0,-gr.x,-Vi.y,Vi.x,0,-Wi.y,Wi.x,0,-gr.y,gr.x,0];return!Qh(e,ws,Ss,Es,Tl)||(e=[1,0,0,0,1,0,0,0,1],!Qh(e,ws,Ss,Es,Tl))?!1:(Al.crossVectors(Vi,Wi),e=[Al.x,Al.y,Al.z],Qh(e,ws,Ss,Es,Tl))}clampPoint(t,e){return e===void 0&&(console.warn("THREE.Box3: .clampPoint() target is now required"),e=new H),e.copy(t).clamp(this.min,this.max)}distanceToPoint(t){return $o.copy(t).clamp(this.min,this.max).sub(t).length()}getBoundingSphere(t){return t===void 0&&console.error("THREE.Box3: .getBoundingSphere() target is now required"),this.getCenter(t.center),t.radius=this.getSize($o).length()*.5,t}intersect(t){return this.min.max(t.min),this.max.min(t.max),this.isEmpty()&&this.makeEmpty(),this}union(t){return this.min.min(t.min),this.max.max(t.max),this}applyMatrix4(t){return this.isEmpty()?this:(hi[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t),hi[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t),hi[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t),hi[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t),hi[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(t),hi[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t),hi[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t),hi[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t),this.setFromPoints(hi),this)}translate(t){return this.min.add(t),this.max.add(t),this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}function Qh(n,t,e,i,r){for(let s=0,o=n.length-3;s<=o;s+=3){vr.fromArray(n,s);const a=r.x*Math.abs(vr.x)+r.y*Math.abs(vr.y)+r.z*Math.abs(vr.z),l=t.dot(vr),c=e.dot(vr),h=i.dot(vr);if(Math.max(-Math.max(l,c,h),Math.min(l,c,h))>a)return!1}return!0}const hi=[new H,new H,new H,new H,new H,new H,new H,new H],$o=new H,Kh=new ki,ws=new H,Ss=new H,Es=new H,Vi=new H,Wi=new H,gr=new H,qo=new H,Tl=new H,Al=new H,vr=new H,B1=new ki;class $i{constructor(t,e){this.center=t!==void 0?t:new H,this.radius=e!==void 0?e:-1}set(t,e){return this.center.copy(t),this.radius=e,this}setFromPoints(t,e){const i=this.center;e!==void 0?i.copy(e):B1.setFromPoints(t).getCenter(i);let r=0;for(let s=0,o=t.length;s<o;s++)r=Math.max(r,i.distanceToSquared(t[s]));return this.radius=Math.sqrt(r),this}clone(){return new this.constructor().copy(this)}copy(t){return this.center.copy(t.center),this.radius=t.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(t){return t.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(t){return t.distanceTo(this.center)-this.radius}intersectsSphere(t){const e=this.radius+t.radius;return t.center.distanceToSquared(this.center)<=e*e}intersectsBox(t){return t.intersectsSphere(this)}intersectsPlane(t){return Math.abs(t.distanceToPoint(this.center))<=this.radius}clampPoint(t,e){const i=this.center.distanceToSquared(t);return e===void 0&&(console.warn("THREE.Sphere: .clampPoint() target is now required"),e=new H),e.copy(t),i>this.radius*this.radius&&(e.sub(this.center).normalize(),e.multiplyScalar(this.radius).add(this.center)),e}getBoundingBox(t){return t===void 0&&(console.warn("THREE.Sphere: .getBoundingBox() target is now required"),t=new ki),this.isEmpty()?(t.makeEmpty(),t):(t.set(this.center,this.center),t.expandByScalar(this.radius),t)}applyMatrix4(t){return this.center.applyMatrix4(t),this.radius=this.radius*t.getMaxScaleOnAxis(),this}translate(t){return this.center.add(t),this}equals(t){return t.center.equals(this.center)&&t.radius===this.radius}}const ui=new H,tu=new H,Ll=new H,qi=new H,eu=new H,Cl=new H,nu=new H;class jo{constructor(t,e){this.origin=t!==void 0?t:new H,this.direction=e!==void 0?e:new H(0,0,-1)}set(t,e){return this.origin.copy(t),this.direction.copy(e),this}clone(){return new this.constructor().copy(this)}copy(t){return this.origin.copy(t.origin),this.direction.copy(t.direction),this}at(t,e){return e===void 0&&(console.warn("THREE.Ray: .at() target is now required"),e=new H),e.copy(this.direction).multiplyScalar(t).add(this.origin)}lookAt(t){return this.direction.copy(t).sub(this.origin).normalize(),this}recast(t){return this.origin.copy(this.at(t,ui)),this}closestPointToPoint(t,e){e===void 0&&(console.warn("THREE.Ray: .closestPointToPoint() target is now required"),e=new H),e.subVectors(t,this.origin);const i=e.dot(this.direction);return i<0?e.copy(this.origin):e.copy(this.direction).multiplyScalar(i).add(this.origin)}distanceToPoint(t){return Math.sqrt(this.distanceSqToPoint(t))}distanceSqToPoint(t){const e=ui.subVectors(t,this.origin).dot(this.direction);return e<0?this.origin.distanceToSquared(t):(ui.copy(this.direction).multiplyScalar(e).add(this.origin),ui.distanceToSquared(t))}distanceSqToSegment(t,e,i,r){tu.copy(t).add(e).multiplyScalar(.5),Ll.copy(e).sub(t).normalize(),qi.copy(this.origin).sub(tu);const s=t.distanceTo(e)*.5,o=-this.direction.dot(Ll),a=qi.dot(this.direction),l=-qi.dot(Ll),c=qi.lengthSq(),h=Math.abs(1-o*o);let u,d,f,g;if(h>0)if(u=o*l-a,d=o*a-l,g=s*h,u>=0)if(d>=-g)if(d<=g){const v=1/h;u*=v,d*=v,f=u*(u+o*d+2*a)+d*(o*u+d+2*l)+c}else d=s,u=Math.max(0,-(o*d+a)),f=-u*u+d*(d+2*l)+c;else d=-s,u=Math.max(0,-(o*d+a)),f=-u*u+d*(d+2*l)+c;else d<=-g?(u=Math.max(0,-(-o*s+a)),d=u>0?-s:Math.min(Math.max(-s,-l),s),f=-u*u+d*(d+2*l)+c):d<=g?(u=0,d=Math.min(Math.max(-s,-l),s),f=d*(d+2*l)+c):(u=Math.max(0,-(o*s+a)),d=u>0?s:Math.min(Math.max(-s,-l),s),f=-u*u+d*(d+2*l)+c);else d=o>0?-s:s,u=Math.max(0,-(o*d+a)),f=-u*u+d*(d+2*l)+c;return i&&i.copy(this.direction).multiplyScalar(u).add(this.origin),r&&r.copy(Ll).multiplyScalar(d).add(tu),f}intersectSphere(t,e){ui.subVectors(t.center,this.origin);const i=ui.dot(this.direction),r=ui.dot(ui)-i*i,s=t.radius*t.radius;if(r>s)return null;const o=Math.sqrt(s-r),a=i-o,l=i+o;return a<0&&l<0?null:a<0?this.at(l,e):this.at(a,e)}intersectsSphere(t){return this.distanceSqToPoint(t.center)<=t.radius*t.radius}distanceToPlane(t){const e=t.normal.dot(this.direction);if(e===0)return t.distanceToPoint(this.origin)===0?0:null;const i=-(this.origin.dot(t.normal)+t.constant)/e;return i>=0?i:null}intersectPlane(t,e){const i=this.distanceToPlane(t);return i===null?null:this.at(i,e)}intersectsPlane(t){const e=t.distanceToPoint(this.origin);return e===0||t.normal.dot(this.direction)*e<0}intersectBox(t,e){let i,r,s,o,a,l;const c=1/this.direction.x,h=1/this.direction.y,u=1/this.direction.z,d=this.origin;return c>=0?(i=(t.min.x-d.x)*c,r=(t.max.x-d.x)*c):(i=(t.max.x-d.x)*c,r=(t.min.x-d.x)*c),h>=0?(s=(t.min.y-d.y)*h,o=(t.max.y-d.y)*h):(s=(t.max.y-d.y)*h,o=(t.min.y-d.y)*h),i>o||s>r||((s>i||i!==i)&&(i=s),(o<r||r!==r)&&(r=o),u>=0?(a=(t.min.z-d.z)*u,l=(t.max.z-d.z)*u):(a=(t.max.z-d.z)*u,l=(t.min.z-d.z)*u),i>l||a>r)||((a>i||i!==i)&&(i=a),(l<r||r!==r)&&(r=l),r<0)?null:this.at(i>=0?i:r,e)}intersectsBox(t){return this.intersectBox(t,ui)!==null}intersectTriangle(t,e,i,r,s){eu.subVectors(e,t),Cl.subVectors(i,t),nu.crossVectors(eu,Cl);let o=this.direction.dot(nu),a;if(o>0){if(r)return null;a=1}else if(o<0)a=-1,o=-o;else return null;qi.subVectors(this.origin,t);const l=a*this.direction.dot(Cl.crossVectors(qi,Cl));if(l<0)return null;const c=a*this.direction.dot(eu.cross(qi));if(c<0||l+c>o)return null;const h=-a*qi.dot(nu);return h<0?null:this.at(h/o,s)}applyMatrix4(t){return this.origin.applyMatrix4(t),this.direction.transformDirection(t),this}equals(t){return t.origin.equals(this.origin)&&t.direction.equals(this.direction)}}class Wt{constructor(){Object.defineProperty(this,"isMatrix4",{value:!0}),this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")}set(t,e,i,r,s,o,a,l,c,h,u,d,f,g,v,x){const m=this.elements;return m[0]=t,m[4]=e,m[8]=i,m[12]=r,m[1]=s,m[5]=o,m[9]=a,m[13]=l,m[2]=c,m[6]=h,m[10]=u,m[14]=d,m[3]=f,m[7]=g,m[11]=v,m[15]=x,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return new Wt().fromArray(this.elements)}copy(t){const e=this.elements,i=t.elements;return e[0]=i[0],e[1]=i[1],e[2]=i[2],e[3]=i[3],e[4]=i[4],e[5]=i[5],e[6]=i[6],e[7]=i[7],e[8]=i[8],e[9]=i[9],e[10]=i[10],e[11]=i[11],e[12]=i[12],e[13]=i[13],e[14]=i[14],e[15]=i[15],this}copyPosition(t){const e=this.elements,i=t.elements;return e[12]=i[12],e[13]=i[13],e[14]=i[14],this}extractBasis(t,e,i){return t.setFromMatrixColumn(this,0),e.setFromMatrixColumn(this,1),i.setFromMatrixColumn(this,2),this}makeBasis(t,e,i){return this.set(t.x,e.x,i.x,0,t.y,e.y,i.y,0,t.z,e.z,i.z,0,0,0,0,1),this}extractRotation(t){const e=this.elements,i=t.elements,r=1/Ts.setFromMatrixColumn(t,0).length(),s=1/Ts.setFromMatrixColumn(t,1).length(),o=1/Ts.setFromMatrixColumn(t,2).length();return e[0]=i[0]*r,e[1]=i[1]*r,e[2]=i[2]*r,e[3]=0,e[4]=i[4]*s,e[5]=i[5]*s,e[6]=i[6]*s,e[7]=0,e[8]=i[8]*o,e[9]=i[9]*o,e[10]=i[10]*o,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromEuler(t){t&&t.isEuler||console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");const e=this.elements,i=t.x,r=t.y,s=t.z,o=Math.cos(i),a=Math.sin(i),l=Math.cos(r),c=Math.sin(r),h=Math.cos(s),u=Math.sin(s);if(t.order==="XYZ"){const d=o*h,f=o*u,g=a*h,v=a*u;e[0]=l*h,e[4]=-l*u,e[8]=c,e[1]=f+g*c,e[5]=d-v*c,e[9]=-a*l,e[2]=v-d*c,e[6]=g+f*c,e[10]=o*l}else if(t.order==="YXZ"){const d=l*h,f=l*u,g=c*h,v=c*u;e[0]=d+v*a,e[4]=g*a-f,e[8]=o*c,e[1]=o*u,e[5]=o*h,e[9]=-a,e[2]=f*a-g,e[6]=v+d*a,e[10]=o*l}else if(t.order==="ZXY"){const d=l*h,f=l*u,g=c*h,v=c*u;e[0]=d-v*a,e[4]=-o*u,e[8]=g+f*a,e[1]=f+g*a,e[5]=o*h,e[9]=v-d*a,e[2]=-o*c,e[6]=a,e[10]=o*l}else if(t.order==="ZYX"){const d=o*h,f=o*u,g=a*h,v=a*u;e[0]=l*h,e[4]=g*c-f,e[8]=d*c+v,e[1]=l*u,e[5]=v*c+d,e[9]=f*c-g,e[2]=-c,e[6]=a*l,e[10]=o*l}else if(t.order==="YZX"){const d=o*l,f=o*c,g=a*l,v=a*c;e[0]=l*h,e[4]=v-d*u,e[8]=g*u+f,e[1]=u,e[5]=o*h,e[9]=-a*h,e[2]=-c*h,e[6]=f*u+g,e[10]=d-v*u}else if(t.order==="XZY"){const d=o*l,f=o*c,g=a*l,v=a*c;e[0]=l*h,e[4]=-u,e[8]=c*h,e[1]=d*u+v,e[5]=o*h,e[9]=f*u-g,e[2]=g*u-f,e[6]=a*h,e[10]=v*u+d}return e[3]=0,e[7]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromQuaternion(t){return this.compose(O1,t,z1)}lookAt(t,e,i){const r=this.elements;return un.subVectors(t,e),un.lengthSq()===0&&(un.z=1),un.normalize(),ji.crossVectors(i,un),ji.lengthSq()===0&&(Math.abs(i.z)===1?un.x+=1e-4:un.z+=1e-4,un.normalize(),ji.crossVectors(i,un)),ji.normalize(),Rl.crossVectors(un,ji),r[0]=ji.x,r[4]=Rl.x,r[8]=un.x,r[1]=ji.y,r[5]=Rl.y,r[9]=un.y,r[2]=ji.z,r[6]=Rl.z,r[10]=un.z,this}multiply(t,e){return e!==void 0?(console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),this.multiplyMatrices(t,e)):this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const i=t.elements,r=e.elements,s=this.elements,o=i[0],a=i[4],l=i[8],c=i[12],h=i[1],u=i[5],d=i[9],f=i[13],g=i[2],v=i[6],x=i[10],m=i[14],p=i[3],b=i[7],_=i[11],w=i[15],E=r[0],S=r[4],R=r[8],W=r[12],B=r[1],T=r[5],k=r[9],I=r[13],N=r[2],C=r[6],L=r[10],F=r[14],q=r[3],ot=r[7],pt=r[11],rt=r[15];return s[0]=o*E+a*B+l*N+c*q,s[4]=o*S+a*T+l*C+c*ot,s[8]=o*R+a*k+l*L+c*pt,s[12]=o*W+a*I+l*F+c*rt,s[1]=h*E+u*B+d*N+f*q,s[5]=h*S+u*T+d*C+f*ot,s[9]=h*R+u*k+d*L+f*pt,s[13]=h*W+u*I+d*F+f*rt,s[2]=g*E+v*B+x*N+m*q,s[6]=g*S+v*T+x*C+m*ot,s[10]=g*R+v*k+x*L+m*pt,s[14]=g*W+v*I+x*F+m*rt,s[3]=p*E+b*B+_*N+w*q,s[7]=p*S+b*T+_*C+w*ot,s[11]=p*R+b*k+_*L+w*pt,s[15]=p*W+b*I+_*F+w*rt,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[4]*=t,e[8]*=t,e[12]*=t,e[1]*=t,e[5]*=t,e[9]*=t,e[13]*=t,e[2]*=t,e[6]*=t,e[10]*=t,e[14]*=t,e[3]*=t,e[7]*=t,e[11]*=t,e[15]*=t,this}determinant(){const t=this.elements,e=t[0],i=t[4],r=t[8],s=t[12],o=t[1],a=t[5],l=t[9],c=t[13],h=t[2],u=t[6],d=t[10],f=t[14],g=t[3],v=t[7],x=t[11],m=t[15];return g*(+s*l*u-r*c*u-s*a*d+i*c*d+r*a*f-i*l*f)+v*(+e*l*f-e*c*d+s*o*d-r*o*f+r*c*h-s*l*h)+x*(+e*c*u-e*a*f-s*o*u+i*o*f+s*a*h-i*c*h)+m*(-r*a*h-e*l*u+e*a*d+r*o*u-i*o*d+i*l*h)}transpose(){const t=this.elements;let e;return e=t[1],t[1]=t[4],t[4]=e,e=t[2],t[2]=t[8],t[8]=e,e=t[6],t[6]=t[9],t[9]=e,e=t[3],t[3]=t[12],t[12]=e,e=t[7],t[7]=t[13],t[13]=e,e=t[11],t[11]=t[14],t[14]=e,this}setPosition(t,e,i){const r=this.elements;return t.isVector3?(r[12]=t.x,r[13]=t.y,r[14]=t.z):(r[12]=t,r[13]=e,r[14]=i),this}getInverse(t,e){e!==void 0&&console.warn("THREE.Matrix4: .getInverse() can no longer be configured to throw on degenerate.");const i=this.elements,r=t.elements,s=r[0],o=r[1],a=r[2],l=r[3],c=r[4],h=r[5],u=r[6],d=r[7],f=r[8],g=r[9],v=r[10],x=r[11],m=r[12],p=r[13],b=r[14],_=r[15],w=g*b*d-p*v*d+p*u*x-h*b*x-g*u*_+h*v*_,E=m*v*d-f*b*d-m*u*x+c*b*x+f*u*_-c*v*_,S=f*p*d-m*g*d+m*h*x-c*p*x-f*h*_+c*g*_,R=m*g*u-f*p*u-m*h*v+c*p*v+f*h*b-c*g*b,W=s*w+o*E+a*S+l*R;if(W===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const B=1/W;return i[0]=w*B,i[1]=(p*v*l-g*b*l-p*a*x+o*b*x+g*a*_-o*v*_)*B,i[2]=(h*b*l-p*u*l+p*a*d-o*b*d-h*a*_+o*u*_)*B,i[3]=(g*u*l-h*v*l-g*a*d+o*v*d+h*a*x-o*u*x)*B,i[4]=E*B,i[5]=(f*b*l-m*v*l+m*a*x-s*b*x-f*a*_+s*v*_)*B,i[6]=(m*u*l-c*b*l-m*a*d+s*b*d+c*a*_-s*u*_)*B,i[7]=(c*v*l-f*u*l+f*a*d-s*v*d-c*a*x+s*u*x)*B,i[8]=S*B,i[9]=(m*g*l-f*p*l-m*o*x+s*p*x+f*o*_-s*g*_)*B,i[10]=(c*p*l-m*h*l+m*o*d-s*p*d-c*o*_+s*h*_)*B,i[11]=(f*h*l-c*g*l-f*o*d+s*g*d+c*o*x-s*h*x)*B,i[12]=R*B,i[13]=(f*p*a-m*g*a+m*o*v-s*p*v-f*o*b+s*g*b)*B,i[14]=(m*h*a-c*p*a-m*o*u+s*p*u+c*o*b-s*h*b)*B,i[15]=(c*g*a-f*h*a+f*o*u-s*g*u-c*o*v+s*h*v)*B,this}scale(t){const e=this.elements,i=t.x,r=t.y,s=t.z;return e[0]*=i,e[4]*=r,e[8]*=s,e[1]*=i,e[5]*=r,e[9]*=s,e[2]*=i,e[6]*=r,e[10]*=s,e[3]*=i,e[7]*=r,e[11]*=s,this}getMaxScaleOnAxis(){const t=this.elements,e=t[0]*t[0]+t[1]*t[1]+t[2]*t[2],i=t[4]*t[4]+t[5]*t[5]+t[6]*t[6],r=t[8]*t[8]+t[9]*t[9]+t[10]*t[10];return Math.sqrt(Math.max(e,i,r))}makeTranslation(t,e,i){return this.set(1,0,0,t,0,1,0,e,0,0,1,i,0,0,0,1),this}makeRotationX(t){const e=Math.cos(t),i=Math.sin(t);return this.set(1,0,0,0,0,e,-i,0,0,i,e,0,0,0,0,1),this}makeRotationY(t){const e=Math.cos(t),i=Math.sin(t);return this.set(e,0,i,0,0,1,0,0,-i,0,e,0,0,0,0,1),this}makeRotationZ(t){const e=Math.cos(t),i=Math.sin(t);return this.set(e,-i,0,0,i,e,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(t,e){const i=Math.cos(e),r=Math.sin(e),s=1-i,o=t.x,a=t.y,l=t.z,c=s*o,h=s*a;return this.set(c*o+i,c*a-r*l,c*l+r*a,0,c*a+r*l,h*a+i,h*l-r*o,0,c*l-r*a,h*l+r*o,s*l*l+i,0,0,0,0,1),this}makeScale(t,e,i){return this.set(t,0,0,0,0,e,0,0,0,0,i,0,0,0,0,1),this}makeShear(t,e,i){return this.set(1,e,i,0,t,1,i,0,t,e,1,0,0,0,0,1),this}compose(t,e,i){const r=this.elements,s=e._x,o=e._y,a=e._z,l=e._w,c=s+s,h=o+o,u=a+a,d=s*c,f=s*h,g=s*u,v=o*h,x=o*u,m=a*u,p=l*c,b=l*h,_=l*u,w=i.x,E=i.y,S=i.z;return r[0]=(1-(v+m))*w,r[1]=(f+_)*w,r[2]=(g-b)*w,r[3]=0,r[4]=(f-_)*E,r[5]=(1-(d+m))*E,r[6]=(x+p)*E,r[7]=0,r[8]=(g+b)*S,r[9]=(x-p)*S,r[10]=(1-(d+v))*S,r[11]=0,r[12]=t.x,r[13]=t.y,r[14]=t.z,r[15]=1,this}decompose(t,e,i){const r=this.elements;let s=Ts.set(r[0],r[1],r[2]).length();const o=Ts.set(r[4],r[5],r[6]).length(),a=Ts.set(r[8],r[9],r[10]).length();this.determinant()<0&&(s=-s),t.x=r[12],t.y=r[13],t.z=r[14],In.copy(this);const c=1/s,h=1/o,u=1/a;return In.elements[0]*=c,In.elements[1]*=c,In.elements[2]*=c,In.elements[4]*=h,In.elements[5]*=h,In.elements[6]*=h,In.elements[8]*=u,In.elements[9]*=u,In.elements[10]*=u,e.setFromRotationMatrix(In),i.x=s,i.y=o,i.z=a,this}makePerspective(t,e,i,r,s,o){o===void 0&&console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");const a=this.elements,l=2*s/(e-t),c=2*s/(i-r),h=(e+t)/(e-t),u=(i+r)/(i-r),d=-(o+s)/(o-s),f=-2*o*s/(o-s);return a[0]=l,a[4]=0,a[8]=h,a[12]=0,a[1]=0,a[5]=c,a[9]=u,a[13]=0,a[2]=0,a[6]=0,a[10]=d,a[14]=f,a[3]=0,a[7]=0,a[11]=-1,a[15]=0,this}makeOrthographic(t,e,i,r,s,o){const a=this.elements,l=1/(e-t),c=1/(i-r),h=1/(o-s),u=(e+t)*l,d=(i+r)*c,f=(o+s)*h;return a[0]=2*l,a[4]=0,a[8]=0,a[12]=-u,a[1]=0,a[5]=2*c,a[9]=0,a[13]=-d,a[2]=0,a[6]=0,a[10]=-2*h,a[14]=-f,a[3]=0,a[7]=0,a[11]=0,a[15]=1,this}equals(t){const e=this.elements,i=t.elements;for(let r=0;r<16;r++)if(e[r]!==i[r])return!1;return!0}fromArray(t,e=0){for(let i=0;i<16;i++)this.elements[i]=t[i+e];return this}toArray(t=[],e=0){const i=this.elements;return t[e]=i[0],t[e+1]=i[1],t[e+2]=i[2],t[e+3]=i[3],t[e+4]=i[4],t[e+5]=i[5],t[e+6]=i[6],t[e+7]=i[7],t[e+8]=i[8],t[e+9]=i[9],t[e+10]=i[10],t[e+11]=i[11],t[e+12]=i[12],t[e+13]=i[13],t[e+14]=i[14],t[e+15]=i[15],t}}const Ts=new H,In=new Wt,O1=new H(0,0,0),z1=new H(1,1,1),ji=new H,Rl=new H,un=new H;class Xo{constructor(t=0,e=0,i=0,r=Xo.DefaultOrder){Object.defineProperty(this,"isEuler",{value:!0}),this._x=t,this._y=e,this._z=i,this._order=r}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get order(){return this._order}set order(t){this._order=t,this._onChangeCallback()}set(t,e,i,r){return this._x=t,this._y=e,this._z=i,this._order=r||this._order,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(t){return this._x=t._x,this._y=t._y,this._z=t._z,this._order=t._order,this._onChangeCallback(),this}setFromRotationMatrix(t,e,i){const r=Vt.clamp,s=t.elements,o=s[0],a=s[4],l=s[8],c=s[1],h=s[5],u=s[9],d=s[2],f=s[6],g=s[10];switch(e=e||this._order,e){case"XYZ":this._y=Math.asin(r(l,-1,1)),Math.abs(l)<.9999999?(this._x=Math.atan2(-u,g),this._z=Math.atan2(-a,o)):(this._x=Math.atan2(f,h),this._z=0);break;case"YXZ":this._x=Math.asin(-r(u,-1,1)),Math.abs(u)<.9999999?(this._y=Math.atan2(l,g),this._z=Math.atan2(c,h)):(this._y=Math.atan2(-d,o),this._z=0);break;case"ZXY":this._x=Math.asin(r(f,-1,1)),Math.abs(f)<.9999999?(this._y=Math.atan2(-d,g),this._z=Math.atan2(-a,h)):(this._y=0,this._z=Math.atan2(c,o));break;case"ZYX":this._y=Math.asin(-r(d,-1,1)),Math.abs(d)<.9999999?(this._x=Math.atan2(f,g),this._z=Math.atan2(c,o)):(this._x=0,this._z=Math.atan2(-a,h));break;case"YZX":this._z=Math.asin(r(c,-1,1)),Math.abs(c)<.9999999?(this._x=Math.atan2(-u,h),this._y=Math.atan2(-d,o)):(this._x=0,this._y=Math.atan2(l,g));break;case"XZY":this._z=Math.asin(-r(a,-1,1)),Math.abs(a)<.9999999?(this._x=Math.atan2(f,h),this._y=Math.atan2(l,o)):(this._x=Math.atan2(-u,g),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+e)}return this._order=e,i!==!1&&this._onChangeCallback(),this}setFromQuaternion(t,e,i){return gm.makeRotationFromQuaternion(t),this.setFromRotationMatrix(gm,e,i)}setFromVector3(t,e){return this.set(t.x,t.y,t.z,e||this._order)}reorder(t){return vm.setFromEuler(this),this.setFromQuaternion(vm,t)}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._order===this._order}fromArray(t){return this._x=t[0],this._y=t[1],this._z=t[2],t[3]!==void 0&&(this._order=t[3]),this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._order,t}toVector3(t){return t?t.set(this._x,this._y,this._z):new H(this._x,this._y,this._z)}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}}Xo.DefaultOrder="XYZ";Xo.RotationOrders=["XYZ","YZX","ZXY","XZY","YXZ","ZYX"];const gm=new Wt,vm=new hn;class xm{constructor(){this.mask=1|0}set(t){this.mask=1<<t|0}enable(t){this.mask|=1<<t|0}enableAll(){this.mask=4294967295|0}toggle(t){this.mask^=1<<t|0}disable(t){this.mask&=~(1<<t|0)}disableAll(){this.mask=0}test(t){return(this.mask&t.mask)!=0}}let U1=0;const ym=new H,As=new hn,di=new Wt,Pl=new H,Yo=new H,H1=new H,G1=new hn,_m=new H(1,0,0),bm=new H(0,1,0),Mm=new H(0,0,1),k1={type:"added"},wm={type:"removed"};function Ut(){Object.defineProperty(this,"id",{value:U1++}),this.uuid=Vt.generateUUID(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=Ut.DefaultUp.clone();const n=new H,t=new Xo,e=new hn,i=new H(1,1,1);function r(){e.setFromEuler(t,!1)}function s(){t.setFromQuaternion(e,void 0,!1)}t._onChange(r),e._onChange(s),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:n},rotation:{configurable:!0,enumerable:!0,value:t},quaternion:{configurable:!0,enumerable:!0,value:e},scale:{configurable:!0,enumerable:!0,value:i},modelViewMatrix:{value:new Wt},normalMatrix:{value:new nn}}),this.matrix=new Wt,this.matrixWorld=new Wt,this.matrixAutoUpdate=Ut.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.layers=new xm,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.userData={}}Ut.DefaultUp=new H(0,1,0);Ut.DefaultMatrixAutoUpdate=!0;Ut.prototype=Object.assign(Object.create(ci.prototype),{constructor:Ut,isObject3D:!0,onBeforeRender:function(){},onAfterRender:function(){},applyMatrix4:function(n){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(n),this.matrix.decompose(this.position,this.quaternion,this.scale)},applyQuaternion:function(n){return this.quaternion.premultiply(n),this},setRotationFromAxisAngle:function(n,t){this.quaternion.setFromAxisAngle(n,t)},setRotationFromEuler:function(n){this.quaternion.setFromEuler(n,!0)},setRotationFromMatrix:function(n){this.quaternion.setFromRotationMatrix(n)},setRotationFromQuaternion:function(n){this.quaternion.copy(n)},rotateOnAxis:function(n,t){return As.setFromAxisAngle(n,t),this.quaternion.multiply(As),this},rotateOnWorldAxis:function(n,t){return As.setFromAxisAngle(n,t),this.quaternion.premultiply(As),this},rotateX:function(n){return this.rotateOnAxis(_m,n)},rotateY:function(n){return this.rotateOnAxis(bm,n)},rotateZ:function(n){return this.rotateOnAxis(Mm,n)},translateOnAxis:function(n,t){return ym.copy(n).applyQuaternion(this.quaternion),this.position.add(ym.multiplyScalar(t)),this},translateX:function(n){return this.translateOnAxis(_m,n)},translateY:function(n){return this.translateOnAxis(bm,n)},translateZ:function(n){return this.translateOnAxis(Mm,n)},localToWorld:function(n){return n.applyMatrix4(this.matrixWorld)},worldToLocal:function(n){return n.applyMatrix4(di.getInverse(this.matrixWorld))},lookAt:function(n,t,e){n.isVector3?Pl.copy(n):Pl.set(n,t,e);const i=this.parent;this.updateWorldMatrix(!0,!1),Yo.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?di.lookAt(Yo,Pl,this.up):di.lookAt(Pl,Yo,this.up),this.quaternion.setFromRotationMatrix(di),i&&(di.extractRotation(i.matrixWorld),As.setFromRotationMatrix(di),this.quaternion.premultiply(As.inverse()))},add:function(n){if(arguments.length>1){for(let t=0;t<arguments.length;t++)this.add(arguments[t]);return this}return n===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",n),this):(n&&n.isObject3D?(n.parent!==null&&n.parent.remove(n),n.parent=this,this.children.push(n),n.dispatchEvent(k1)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",n),this)},remove:function(n){if(arguments.length>1){for(let e=0;e<arguments.length;e++)this.remove(arguments[e]);return this}const t=this.children.indexOf(n);return t!==-1&&(n.parent=null,this.children.splice(t,1),n.dispatchEvent(wm)),this},clear:function(){for(let n=0;n<this.children.length;n++){const t=this.children[n];t.parent=null,t.dispatchEvent(wm)}return this.children.length=0,this},attach:function(n){return this.updateWorldMatrix(!0,!1),di.getInverse(this.matrixWorld),n.parent!==null&&(n.parent.updateWorldMatrix(!0,!1),di.multiply(n.parent.matrixWorld)),n.applyMatrix4(di),n.updateWorldMatrix(!1,!1),this.add(n),this},getObjectById:function(n){return this.getObjectByProperty("id",n)},getObjectByName:function(n){return this.getObjectByProperty("name",n)},getObjectByProperty:function(n,t){if(this[n]===t)return this;for(let e=0,i=this.children.length;e<i;e++){const s=this.children[e].getObjectByProperty(n,t);if(s!==void 0)return s}},getWorldPosition:function(n){return n===void 0&&(console.warn("THREE.Object3D: .getWorldPosition() target is now required"),n=new H),this.updateWorldMatrix(!0,!1),n.setFromMatrixPosition(this.matrixWorld)},getWorldQuaternion:function(n){return n===void 0&&(console.warn("THREE.Object3D: .getWorldQuaternion() target is now required"),n=new hn),this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Yo,n,H1),n},getWorldScale:function(n){return n===void 0&&(console.warn("THREE.Object3D: .getWorldScale() target is now required"),n=new H),this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Yo,G1,n),n},getWorldDirection:function(n){n===void 0&&(console.warn("THREE.Object3D: .getWorldDirection() target is now required"),n=new H),this.updateWorldMatrix(!0,!1);const t=this.matrixWorld.elements;return n.set(t[8],t[9],t[10]).normalize()},raycast:function(){},traverse:function(n){n(this);const t=this.children;for(let e=0,i=t.length;e<i;e++)t[e].traverse(n)},traverseVisible:function(n){if(this.visible===!1)return;n(this);const t=this.children;for(let e=0,i=t.length;e<i;e++)t[e].traverseVisible(n)},traverseAncestors:function(n){const t=this.parent;t!==null&&(n(t),t.traverseAncestors(n))},updateMatrix:function(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0},updateMatrixWorld:function(n){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||n)&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,n=!0);const t=this.children;for(let e=0,i=t.length;e<i;e++)t[e].updateMatrixWorld(n)},updateWorldMatrix:function(n,t){const e=this.parent;if(n===!0&&e!==null&&e.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),t===!0){const i=this.children;for(let r=0,s=i.length;r<s;r++)i[r].updateWorldMatrix(!1,!0)}},toJSON:function(n){const t=n===void 0||typeof n=="string",e={};t&&(n={geometries:{},materials:{},textures:{},images:{},shapes:{}},e.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"});const i={};i.uuid=this.uuid,i.type=this.type,this.name!==""&&(i.name=this.name),this.castShadow===!0&&(i.castShadow=!0),this.receiveShadow===!0&&(i.receiveShadow=!0),this.visible===!1&&(i.visible=!1),this.frustumCulled===!1&&(i.frustumCulled=!1),this.renderOrder!==0&&(i.renderOrder=this.renderOrder),JSON.stringify(this.userData)!=="{}"&&(i.userData=this.userData),i.layers=this.layers.mask,i.matrix=this.matrix.toArray(),this.matrixAutoUpdate===!1&&(i.matrixAutoUpdate=!1),this.isInstancedMesh&&(i.type="InstancedMesh",i.count=this.count,i.instanceMatrix=this.instanceMatrix.toJSON());function r(o,a){return o[a.uuid]===void 0&&(o[a.uuid]=a.toJSON(n)),a.uuid}if(this.isMesh||this.isLine||this.isPoints){i.geometry=r(n.geometries,this.geometry);const o=this.geometry.parameters;if(o!==void 0&&o.shapes!==void 0){const a=o.shapes;if(Array.isArray(a))for(let l=0,c=a.length;l<c;l++){const h=a[l];r(n.shapes,h)}else r(n.shapes,a)}}if(this.material!==void 0)if(Array.isArray(this.material)){const o=[];for(let a=0,l=this.material.length;a<l;a++)o.push(r(n.materials,this.material[a]));i.material=o}else i.material=r(n.materials,this.material);if(this.children.length>0){i.children=[];for(let o=0;o<this.children.length;o++)i.children.push(this.children[o].toJSON(n).object)}if(t){const o=s(n.geometries),a=s(n.materials),l=s(n.textures),c=s(n.images),h=s(n.shapes);o.length>0&&(e.geometries=o),a.length>0&&(e.materials=a),l.length>0&&(e.textures=l),c.length>0&&(e.images=c),h.length>0&&(e.shapes=h)}return e.object=i,e;function s(o){const a=[];for(const l in o){const c=o[l];delete c.metadata,a.push(c)}return a}},clone:function(n){return new this.constructor().copy(this,n)},copy:function(n,t){if(t===void 0&&(t=!0),this.name=n.name,this.up.copy(n.up),this.position.copy(n.position),this.rotation.order=n.rotation.order,this.quaternion.copy(n.quaternion),this.scale.copy(n.scale),this.matrix.copy(n.matrix),this.matrixWorld.copy(n.matrixWorld),this.matrixAutoUpdate=n.matrixAutoUpdate,this.matrixWorldNeedsUpdate=n.matrixWorldNeedsUpdate,this.layers.mask=n.layers.mask,this.visible=n.visible,this.castShadow=n.castShadow,this.receiveShadow=n.receiveShadow,this.frustumCulled=n.frustumCulled,this.renderOrder=n.renderOrder,this.userData=JSON.parse(JSON.stringify(n.userData)),t===!0)for(let e=0;e<n.children.length;e++){const i=n.children[e];this.add(i.clone())}return this}});const iu=new H,V1=new H,W1=new nn;class fi{constructor(t,e){Object.defineProperty(this,"isPlane",{value:!0}),this.normal=t!==void 0?t:new H(1,0,0),this.constant=e!==void 0?e:0}set(t,e){return this.normal.copy(t),this.constant=e,this}setComponents(t,e,i,r){return this.normal.set(t,e,i),this.constant=r,this}setFromNormalAndCoplanarPoint(t,e){return this.normal.copy(t),this.constant=-e.dot(this.normal),this}setFromCoplanarPoints(t,e,i){const r=iu.subVectors(i,e).cross(V1.subVectors(t,e)).normalize();return this.setFromNormalAndCoplanarPoint(r,t),this}clone(){return new this.constructor().copy(this)}copy(t){return this.normal.copy(t.normal),this.constant=t.constant,this}normalize(){const t=1/this.normal.length();return this.normal.multiplyScalar(t),this.constant*=t,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(t){return this.normal.dot(t)+this.constant}distanceToSphere(t){return this.distanceToPoint(t.center)-t.radius}projectPoint(t,e){return e===void 0&&(console.warn("THREE.Plane: .projectPoint() target is now required"),e=new H),e.copy(this.normal).multiplyScalar(-this.distanceToPoint(t)).add(t)}intersectLine(t,e){e===void 0&&(console.warn("THREE.Plane: .intersectLine() target is now required"),e=new H);const i=t.delta(iu),r=this.normal.dot(i);if(r===0)return this.distanceToPoint(t.start)===0?e.copy(t.start):void 0;const s=-(t.start.dot(this.normal)+this.constant)/r;if(!(s<0||s>1))return e.copy(i).multiplyScalar(s).add(t.start)}intersectsLine(t){const e=this.distanceToPoint(t.start),i=this.distanceToPoint(t.end);return e<0&&i>0||i<0&&e>0}intersectsBox(t){return t.intersectsPlane(this)}intersectsSphere(t){return t.intersectsPlane(this)}coplanarPoint(t){return t===void 0&&(console.warn("THREE.Plane: .coplanarPoint() target is now required"),t=new H),t.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(t,e){const i=e||W1.getNormalMatrix(t),r=this.coplanarPoint(iu).applyMatrix4(t),s=this.normal.applyMatrix3(i).normalize();return this.constant=-r.dot(s),this}translate(t){return this.constant-=t.dot(this.normal),this}equals(t){return t.normal.equals(this.normal)&&t.constant===this.constant}}const Dn=new H,pi=new H,ru=new H,mi=new H,Ls=new H,Cs=new H,Sm=new H,su=new H,ou=new H,au=new H;class We{constructor(t,e,i){this.a=t!==void 0?t:new H,this.b=e!==void 0?e:new H,this.c=i!==void 0?i:new H}static getNormal(t,e,i,r){r===void 0&&(console.warn("THREE.Triangle: .getNormal() target is now required"),r=new H),r.subVectors(i,e),Dn.subVectors(t,e),r.cross(Dn);const s=r.lengthSq();return s>0?r.multiplyScalar(1/Math.sqrt(s)):r.set(0,0,0)}static getBarycoord(t,e,i,r,s){Dn.subVectors(r,e),pi.subVectors(i,e),ru.subVectors(t,e);const o=Dn.dot(Dn),a=Dn.dot(pi),l=Dn.dot(ru),c=pi.dot(pi),h=pi.dot(ru),u=o*c-a*a;if(s===void 0&&(console.warn("THREE.Triangle: .getBarycoord() target is now required"),s=new H),u===0)return s.set(-2,-1,-1);const d=1/u,f=(c*l-a*h)*d,g=(o*h-a*l)*d;return s.set(1-f-g,g,f)}static containsPoint(t,e,i,r){return this.getBarycoord(t,e,i,r,mi),mi.x>=0&&mi.y>=0&&mi.x+mi.y<=1}static getUV(t,e,i,r,s,o,a,l){return this.getBarycoord(t,e,i,r,mi),l.set(0,0),l.addScaledVector(s,mi.x),l.addScaledVector(o,mi.y),l.addScaledVector(a,mi.z),l}static isFrontFacing(t,e,i,r){return Dn.subVectors(i,e),pi.subVectors(t,e),Dn.cross(pi).dot(r)<0}set(t,e,i){return this.a.copy(t),this.b.copy(e),this.c.copy(i),this}setFromPointsAndIndices(t,e,i,r){return this.a.copy(t[e]),this.b.copy(t[i]),this.c.copy(t[r]),this}clone(){return new this.constructor().copy(this)}copy(t){return this.a.copy(t.a),this.b.copy(t.b),this.c.copy(t.c),this}getArea(){return Dn.subVectors(this.c,this.b),pi.subVectors(this.a,this.b),Dn.cross(pi).length()*.5}getMidpoint(t){return t===void 0&&(console.warn("THREE.Triangle: .getMidpoint() target is now required"),t=new H),t.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(t){return We.getNormal(this.a,this.b,this.c,t)}getPlane(t){return t===void 0&&(console.warn("THREE.Triangle: .getPlane() target is now required"),t=new fi),t.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(t,e){return We.getBarycoord(t,this.a,this.b,this.c,e)}getUV(t,e,i,r,s){return We.getUV(t,this.a,this.b,this.c,e,i,r,s)}containsPoint(t){return We.containsPoint(t,this.a,this.b,this.c)}isFrontFacing(t){return We.isFrontFacing(this.a,this.b,this.c,t)}intersectsBox(t){return t.intersectsTriangle(this)}closestPointToPoint(t,e){e===void 0&&(console.warn("THREE.Triangle: .closestPointToPoint() target is now required"),e=new H);const i=this.a,r=this.b,s=this.c;let o,a;Ls.subVectors(r,i),Cs.subVectors(s,i),su.subVectors(t,i);const l=Ls.dot(su),c=Cs.dot(su);if(l<=0&&c<=0)return e.copy(i);ou.subVectors(t,r);const h=Ls.dot(ou),u=Cs.dot(ou);if(h>=0&&u<=h)return e.copy(r);const d=l*u-h*c;if(d<=0&&l>=0&&h<=0)return o=l/(l-h),e.copy(i).addScaledVector(Ls,o);au.subVectors(t,s);const f=Ls.dot(au),g=Cs.dot(au);if(g>=0&&f<=g)return e.copy(s);const v=f*c-l*g;if(v<=0&&c>=0&&g<=0)return a=c/(c-g),e.copy(i).addScaledVector(Cs,a);const x=h*g-f*u;if(x<=0&&u-h>=0&&f-g>=0)return Sm.subVectors(s,r),a=(u-h)/(u-h+(f-g)),e.copy(r).addScaledVector(Sm,a);const m=1/(x+v+d);return o=v*m,a=d*m,e.copy(i).addScaledVector(Ls,o).addScaledVector(Cs,a)}equals(t){return t.a.equals(this.a)&&t.b.equals(this.b)&&t.c.equals(this.c)}}const Em={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},Nn={h:0,s:0,l:0},Il={h:0,s:0,l:0};function lu(n,t,e){return e<0&&(e+=1),e>1&&(e-=1),e<1/6?n+(t-n)*6*e:e<1/2?t:e<2/3?n+(t-n)*6*(2/3-e):n}function cu(n){return n<.04045?n*.0773993808:Math.pow(n*.9478672986+.0521327014,2.4)}function hu(n){return n<.0031308?n*12.92:1.055*Math.pow(n,.41666)-.055}class Ot{constructor(t,e,i){return Object.defineProperty(this,"isColor",{value:!0}),e===void 0&&i===void 0?this.set(t):this.setRGB(t,e,i)}set(t){return t&&t.isColor?this.copy(t):typeof t=="number"?this.setHex(t):typeof t=="string"&&this.setStyle(t),this}setScalar(t){return this.r=t,this.g=t,this.b=t,this}setHex(t){return t=Math.floor(t),this.r=(t>>16&255)/255,this.g=(t>>8&255)/255,this.b=(t&255)/255,this}setRGB(t,e,i){return this.r=t,this.g=e,this.b=i,this}setHSL(t,e,i){if(t=Vt.euclideanModulo(t,1),e=Vt.clamp(e,0,1),i=Vt.clamp(i,0,1),e===0)this.r=this.g=this.b=i;else{const r=i<=.5?i*(1+e):i+e-i*e,s=2*i-r;this.r=lu(s,r,t+1/3),this.g=lu(s,r,t),this.b=lu(s,r,t-1/3)}return this}setStyle(t){function e(r){r!==void 0&&parseFloat(r)<1&&console.warn("THREE.Color: Alpha component of "+t+" will be ignored.")}let i;if(i=/^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(t)){let r;const s=i[1],o=i[2];switch(s){case"rgb":case"rgba":if(r=/^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(o))return this.r=Math.min(255,parseInt(r[1],10))/255,this.g=Math.min(255,parseInt(r[2],10))/255,this.b=Math.min(255,parseInt(r[3],10))/255,e(r[5]),this;if(r=/^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(o))return this.r=Math.min(100,parseInt(r[1],10))/100,this.g=Math.min(100,parseInt(r[2],10))/100,this.b=Math.min(100,parseInt(r[3],10))/100,e(r[5]),this;break;case"hsl":case"hsla":if(r=/^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(o)){const a=parseFloat(r[1])/360,l=parseInt(r[2],10)/100,c=parseInt(r[3],10)/100;return e(r[5]),this.setHSL(a,l,c)}break}}else if(i=/^\#([A-Fa-f0-9]+)$/.exec(t)){const r=i[1],s=r.length;if(s===3)return this.r=parseInt(r.charAt(0)+r.charAt(0),16)/255,this.g=parseInt(r.charAt(1)+r.charAt(1),16)/255,this.b=parseInt(r.charAt(2)+r.charAt(2),16)/255,this;if(s===6)return this.r=parseInt(r.charAt(0)+r.charAt(1),16)/255,this.g=parseInt(r.charAt(2)+r.charAt(3),16)/255,this.b=parseInt(r.charAt(4)+r.charAt(5),16)/255,this}return t&&t.length>0?this.setColorName(t):this}setColorName(t){const e=Em[t];return e!==void 0?this.setHex(e):console.warn("THREE.Color: Unknown color "+t),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(t){return this.r=t.r,this.g=t.g,this.b=t.b,this}copyGammaToLinear(t,e){return e===void 0&&(e=2),this.r=Math.pow(t.r,e),this.g=Math.pow(t.g,e),this.b=Math.pow(t.b,e),this}copyLinearToGamma(t,e){e===void 0&&(e=2);const i=e>0?1/e:1;return this.r=Math.pow(t.r,i),this.g=Math.pow(t.g,i),this.b=Math.pow(t.b,i),this}convertGammaToLinear(t){return this.copyGammaToLinear(this,t),this}convertLinearToGamma(t){return this.copyLinearToGamma(this,t),this}copySRGBToLinear(t){return this.r=cu(t.r),this.g=cu(t.g),this.b=cu(t.b),this}copyLinearToSRGB(t){return this.r=hu(t.r),this.g=hu(t.g),this.b=hu(t.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(){return this.r*255<<16^this.g*255<<8^this.b*255<<0}getHexString(){return("000000"+this.getHex().toString(16)).slice(-6)}getHSL(t){t===void 0&&(console.warn("THREE.Color: .getHSL() target is now required"),t={h:0,s:0,l:0});const e=this.r,i=this.g,r=this.b,s=Math.max(e,i,r),o=Math.min(e,i,r);let a,l;const c=(o+s)/2;if(o===s)a=0,l=0;else{const h=s-o;switch(l=c<=.5?h/(s+o):h/(2-s-o),s){case e:a=(i-r)/h+(i<r?6:0);break;case i:a=(r-e)/h+2;break;case r:a=(e-i)/h+4;break}a/=6}return t.h=a,t.s=l,t.l=c,t}getStyle(){return"rgb("+(this.r*255|0)+","+(this.g*255|0)+","+(this.b*255|0)+")"}offsetHSL(t,e,i){return this.getHSL(Nn),Nn.h+=t,Nn.s+=e,Nn.l+=i,this.setHSL(Nn.h,Nn.s,Nn.l),this}add(t){return this.r+=t.r,this.g+=t.g,this.b+=t.b,this}addColors(t,e){return this.r=t.r+e.r,this.g=t.g+e.g,this.b=t.b+e.b,this}addScalar(t){return this.r+=t,this.g+=t,this.b+=t,this}sub(t){return this.r=Math.max(0,this.r-t.r),this.g=Math.max(0,this.g-t.g),this.b=Math.max(0,this.b-t.b),this}multiply(t){return this.r*=t.r,this.g*=t.g,this.b*=t.b,this}multiplyScalar(t){return this.r*=t,this.g*=t,this.b*=t,this}lerp(t,e){return this.r+=(t.r-this.r)*e,this.g+=(t.g-this.g)*e,this.b+=(t.b-this.b)*e,this}lerpHSL(t,e){this.getHSL(Nn),t.getHSL(Il);const i=Vt.lerp(Nn.h,Il.h,e),r=Vt.lerp(Nn.s,Il.s,e),s=Vt.lerp(Nn.l,Il.l,e);return this.setHSL(i,r,s),this}equals(t){return t.r===this.r&&t.g===this.g&&t.b===this.b}fromArray(t,e=0){return this.r=t[e],this.g=t[e+1],this.b=t[e+2],this}toArray(t=[],e=0){return t[e]=this.r,t[e+1]=this.g,t[e+2]=this.b,t}fromBufferAttribute(t,e){return this.r=t.getX(e),this.g=t.getY(e),this.b=t.getZ(e),t.normalized===!0&&(this.r/=255,this.g/=255,this.b/=255),this}toJSON(){return this.getHex()}}Ot.NAMES=Em;Ot.prototype.r=1;Ot.prototype.g=1;Ot.prototype.b=1;class uu{constructor(t,e,i,r,s,o){this.a=t,this.b=e,this.c=i,this.normal=r&&r.isVector3?r:new H,this.vertexNormals=Array.isArray(r)?r:[],this.color=s&&s.isColor?s:new Ot,this.vertexColors=Array.isArray(s)?s:[],this.materialIndex=o!==void 0?o:0}clone(){return new this.constructor().copy(this)}copy(t){this.a=t.a,this.b=t.b,this.c=t.c,this.normal.copy(t.normal),this.color.copy(t.color),this.materialIndex=t.materialIndex;for(let e=0,i=t.vertexNormals.length;e<i;e++)this.vertexNormals[e]=t.vertexNormals[e].clone();for(let e=0,i=t.vertexColors.length;e<i;e++)this.vertexColors[e]=t.vertexColors[e].clone();return this}}let $1=0;function Gt(){Object.defineProperty(this,"id",{value:$1++}),this.uuid=Vt.generateUUID(),this.name="",this.type="Material",this.fog=!0,this.blending=Uo,this.side=pl,this.flatShading=!1,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.blendSrc=Xp,this.blendDst=Yp,this.blendEquation=vs,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=Hh,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=N1,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=Zh,this.stencilZFail=Zh,this.stencilZPass=Zh,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaTest=0,this.premultipliedAlpha=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0}Gt.prototype=Object.assign(Object.create(ci.prototype),{constructor:Gt,isMaterial:!0,onBeforeCompile:function(){},customProgramCacheKey:function(){return this.onBeforeCompile.toString()},setValues:function(n){if(n!==void 0)for(const t in n){const e=n[t];if(e===void 0){console.warn("THREE.Material: '"+t+"' parameter is undefined.");continue}if(t==="shading"){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=e===kp;continue}const i=this[t];if(i===void 0){console.warn("THREE."+this.type+": '"+t+"' is not a property of this material.");continue}i&&i.isColor?i.set(e):i&&i.isVector3&&e&&e.isVector3?i.copy(e):this[t]=e}},toJSON:function(n){const t=n===void 0||typeof n=="string";t&&(n={textures:{},images:{}});const e={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};e.uuid=this.uuid,e.type=this.type,this.name!==""&&(e.name=this.name),this.color&&this.color.isColor&&(e.color=this.color.getHex()),this.roughness!==void 0&&(e.roughness=this.roughness),this.metalness!==void 0&&(e.metalness=this.metalness),this.sheen&&this.sheen.isColor&&(e.sheen=this.sheen.getHex()),this.emissive&&this.emissive.isColor&&(e.emissive=this.emissive.getHex()),this.emissiveIntensity&&this.emissiveIntensity!==1&&(e.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(e.specular=this.specular.getHex()),this.shininess!==void 0&&(e.shininess=this.shininess),this.clearcoat!==void 0&&(e.clearcoat=this.clearcoat),this.clearcoatRoughness!==void 0&&(e.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(e.clearcoatMap=this.clearcoatMap.toJSON(n).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(e.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(n).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(e.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(n).uuid,e.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.map&&this.map.isTexture&&(e.map=this.map.toJSON(n).uuid),this.matcap&&this.matcap.isTexture&&(e.matcap=this.matcap.toJSON(n).uuid),this.alphaMap&&this.alphaMap.isTexture&&(e.alphaMap=this.alphaMap.toJSON(n).uuid),this.lightMap&&this.lightMap.isTexture&&(e.lightMap=this.lightMap.toJSON(n).uuid),this.aoMap&&this.aoMap.isTexture&&(e.aoMap=this.aoMap.toJSON(n).uuid,e.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(e.bumpMap=this.bumpMap.toJSON(n).uuid,e.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(e.normalMap=this.normalMap.toJSON(n).uuid,e.normalMapType=this.normalMapType,e.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(e.displacementMap=this.displacementMap.toJSON(n).uuid,e.displacementScale=this.displacementScale,e.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(e.roughnessMap=this.roughnessMap.toJSON(n).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(e.metalnessMap=this.metalnessMap.toJSON(n).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(e.emissiveMap=this.emissiveMap.toJSON(n).uuid),this.specularMap&&this.specularMap.isTexture&&(e.specularMap=this.specularMap.toJSON(n).uuid),this.envMap&&this.envMap.isTexture&&(e.envMap=this.envMap.toJSON(n).uuid,e.reflectivity=this.reflectivity,e.refractionRatio=this.refractionRatio,this.combine!==void 0&&(e.combine=this.combine),this.envMapIntensity!==void 0&&(e.envMapIntensity=this.envMapIntensity)),this.gradientMap&&this.gradientMap.isTexture&&(e.gradientMap=this.gradientMap.toJSON(n).uuid),this.size!==void 0&&(e.size=this.size),this.sizeAttenuation!==void 0&&(e.sizeAttenuation=this.sizeAttenuation),this.blending!==Uo&&(e.blending=this.blending),this.flatShading===!0&&(e.flatShading=this.flatShading),this.side!==pl&&(e.side=this.side),this.vertexColors&&(e.vertexColors=!0),this.opacity<1&&(e.opacity=this.opacity),this.transparent===!0&&(e.transparent=this.transparent),e.depthFunc=this.depthFunc,e.depthTest=this.depthTest,e.depthWrite=this.depthWrite,e.stencilWrite=this.stencilWrite,e.stencilWriteMask=this.stencilWriteMask,e.stencilFunc=this.stencilFunc,e.stencilRef=this.stencilRef,e.stencilFuncMask=this.stencilFuncMask,e.stencilFail=this.stencilFail,e.stencilZFail=this.stencilZFail,e.stencilZPass=this.stencilZPass,this.rotation&&this.rotation!==0&&(e.rotation=this.rotation),this.polygonOffset===!0&&(e.polygonOffset=!0),this.polygonOffsetFactor!==0&&(e.polygonOffsetFactor=this.polygonOffsetFactor),this.polygonOffsetUnits!==0&&(e.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth&&this.linewidth!==1&&(e.linewidth=this.linewidth),this.dashSize!==void 0&&(e.dashSize=this.dashSize),this.gapSize!==void 0&&(e.gapSize=this.gapSize),this.scale!==void 0&&(e.scale=this.scale),this.dithering===!0&&(e.dithering=!0),this.alphaTest>0&&(e.alphaTest=this.alphaTest),this.premultipliedAlpha===!0&&(e.premultipliedAlpha=this.premultipliedAlpha),this.wireframe===!0&&(e.wireframe=this.wireframe),this.wireframeLinewidth>1&&(e.wireframeLinewidth=this.wireframeLinewidth),this.wireframeLinecap!=="round"&&(e.wireframeLinecap=this.wireframeLinecap),this.wireframeLinejoin!=="round"&&(e.wireframeLinejoin=this.wireframeLinejoin),this.morphTargets===!0&&(e.morphTargets=!0),this.morphNormals===!0&&(e.morphNormals=!0),this.skinning===!0&&(e.skinning=!0),this.visible===!1&&(e.visible=!1),this.toneMapped===!1&&(e.toneMapped=!1),JSON.stringify(this.userData)!=="{}"&&(e.userData=this.userData);function i(r){const s=[];for(const o in r){const a=r[o];delete a.metadata,s.push(a)}return s}if(t){const r=i(n.textures),s=i(n.images);r.length>0&&(e.textures=r),s.length>0&&(e.images=s)}return e},clone:function(){return new this.constructor().copy(this)},copy:function(n){this.name=n.name,this.fog=n.fog,this.blending=n.blending,this.side=n.side,this.flatShading=n.flatShading,this.vertexColors=n.vertexColors,this.opacity=n.opacity,this.transparent=n.transparent,this.blendSrc=n.blendSrc,this.blendDst=n.blendDst,this.blendEquation=n.blendEquation,this.blendSrcAlpha=n.blendSrcAlpha,this.blendDstAlpha=n.blendDstAlpha,this.blendEquationAlpha=n.blendEquationAlpha,this.depthFunc=n.depthFunc,this.depthTest=n.depthTest,this.depthWrite=n.depthWrite,this.stencilWriteMask=n.stencilWriteMask,this.stencilFunc=n.stencilFunc,this.stencilRef=n.stencilRef,this.stencilFuncMask=n.stencilFuncMask,this.stencilFail=n.stencilFail,this.stencilZFail=n.stencilZFail,this.stencilZPass=n.stencilZPass,this.stencilWrite=n.stencilWrite;const t=n.clippingPlanes;let e=null;if(t!==null){const i=t.length;e=new Array(i);for(let r=0;r!==i;++r)e[r]=t[r].clone()}return this.clippingPlanes=e,this.clipIntersection=n.clipIntersection,this.clipShadows=n.clipShadows,this.shadowSide=n.shadowSide,this.colorWrite=n.colorWrite,this.precision=n.precision,this.polygonOffset=n.polygonOffset,this.polygonOffsetFactor=n.polygonOffsetFactor,this.polygonOffsetUnits=n.polygonOffsetUnits,this.dithering=n.dithering,this.alphaTest=n.alphaTest,this.premultipliedAlpha=n.premultipliedAlpha,this.visible=n.visible,this.toneMapped=n.toneMapped,this.userData=JSON.parse(JSON.stringify(n.userData)),this},dispose:function(){this.dispatchEvent({type:"dispose"})}});Object.defineProperty(Gt.prototype,"needsUpdate",{set:function(n){n===!0&&this.version++}});function xr(n){Gt.call(this),this.type="MeshBasicMaterial",this.color=new Ot(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=gl,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.setValues(n)}xr.prototype=Object.create(Gt.prototype);xr.prototype.constructor=xr;xr.prototype.isMeshBasicMaterial=!0;xr.prototype.copy=function(n){return Gt.prototype.copy.call(this,n),this.color.copy(n.color),this.map=n.map,this.lightMap=n.lightMap,this.lightMapIntensity=n.lightMapIntensity,this.aoMap=n.aoMap,this.aoMapIntensity=n.aoMapIntensity,this.specularMap=n.specularMap,this.alphaMap=n.alphaMap,this.envMap=n.envMap,this.combine=n.combine,this.reflectivity=n.reflectivity,this.refractionRatio=n.refractionRatio,this.wireframe=n.wireframe,this.wireframeLinewidth=n.wireframeLinewidth,this.wireframeLinecap=n.wireframeLinecap,this.wireframeLinejoin=n.wireframeLinejoin,this.skinning=n.skinning,this.morphTargets=n.morphTargets,this};const fe=new H,Dl=new wt;function kt(n,t,e){if(Array.isArray(n))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.name="",this.array=n,this.itemSize=t,this.count=n!==void 0?n.length/t:0,this.normalized=e===!0,this.usage=Sl,this.updateRange={offset:0,count:-1},this.version=0}Object.defineProperty(kt.prototype,"needsUpdate",{set:function(n){n===!0&&this.version++}});Object.assign(kt.prototype,{isBufferAttribute:!0,onUploadCallback:function(){},setUsage:function(n){return this.usage=n,this},copy:function(n){return this.name=n.name,this.array=new n.array.constructor(n.array),this.itemSize=n.itemSize,this.count=n.count,this.normalized=n.normalized,this.usage=n.usage,this},copyAt:function(n,t,e){n*=this.itemSize,e*=t.itemSize;for(let i=0,r=this.itemSize;i<r;i++)this.array[n+i]=t.array[e+i];return this},copyArray:function(n){return this.array.set(n),this},copyColorsArray:function(n){const t=this.array;let e=0;for(let i=0,r=n.length;i<r;i++){let s=n[i];s===void 0&&(console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined",i),s=new Ot),t[e++]=s.r,t[e++]=s.g,t[e++]=s.b}return this},copyVector2sArray:function(n){const t=this.array;let e=0;for(let i=0,r=n.length;i<r;i++){let s=n[i];s===void 0&&(console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined",i),s=new wt),t[e++]=s.x,t[e++]=s.y}return this},copyVector3sArray:function(n){const t=this.array;let e=0;for(let i=0,r=n.length;i<r;i++){let s=n[i];s===void 0&&(console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined",i),s=new H),t[e++]=s.x,t[e++]=s.y,t[e++]=s.z}return this},copyVector4sArray:function(n){const t=this.array;let e=0;for(let i=0,r=n.length;i<r;i++){let s=n[i];s===void 0&&(console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined",i),s=new ae),t[e++]=s.x,t[e++]=s.y,t[e++]=s.z,t[e++]=s.w}return this},applyMatrix3:function(n){if(this.itemSize===2)for(let t=0,e=this.count;t<e;t++)Dl.fromBufferAttribute(this,t),Dl.applyMatrix3(n),this.setXY(t,Dl.x,Dl.y);else if(this.itemSize===3)for(let t=0,e=this.count;t<e;t++)fe.fromBufferAttribute(this,t),fe.applyMatrix3(n),this.setXYZ(t,fe.x,fe.y,fe.z);return this},applyMatrix4:function(n){for(let t=0,e=this.count;t<e;t++)fe.x=this.getX(t),fe.y=this.getY(t),fe.z=this.getZ(t),fe.applyMatrix4(n),this.setXYZ(t,fe.x,fe.y,fe.z);return this},applyNormalMatrix:function(n){for(let t=0,e=this.count;t<e;t++)fe.x=this.getX(t),fe.y=this.getY(t),fe.z=this.getZ(t),fe.applyNormalMatrix(n),this.setXYZ(t,fe.x,fe.y,fe.z);return this},transformDirection:function(n){for(let t=0,e=this.count;t<e;t++)fe.x=this.getX(t),fe.y=this.getY(t),fe.z=this.getZ(t),fe.transformDirection(n),this.setXYZ(t,fe.x,fe.y,fe.z);return this},set:function(n,t){return t===void 0&&(t=0),this.array.set(n,t),this},getX:function(n){return this.array[n*this.itemSize]},setX:function(n,t){return this.array[n*this.itemSize]=t,this},getY:function(n){return this.array[n*this.itemSize+1]},setY:function(n,t){return this.array[n*this.itemSize+1]=t,this},getZ:function(n){return this.array[n*this.itemSize+2]},setZ:function(n,t){return this.array[n*this.itemSize+2]=t,this},getW:function(n){return this.array[n*this.itemSize+3]},setW:function(n,t){return this.array[n*this.itemSize+3]=t,this},setXY:function(n,t,e){return n*=this.itemSize,this.array[n+0]=t,this.array[n+1]=e,this},setXYZ:function(n,t,e,i){return n*=this.itemSize,this.array[n+0]=t,this.array[n+1]=e,this.array[n+2]=i,this},setXYZW:function(n,t,e,i,r){return n*=this.itemSize,this.array[n+0]=t,this.array[n+1]=e,this.array[n+2]=i,this.array[n+3]=r,this},onUpload:function(n){return this.onUploadCallback=n,this},clone:function(){return new this.constructor(this.array,this.itemSize).copy(this)},toJSON:function(){return{itemSize:this.itemSize,type:this.array.constructor.name,array:Array.prototype.slice.call(this.array),normalized:this.normalized}}});function du(n,t,e){kt.call(this,new Int8Array(n),t,e)}du.prototype=Object.create(kt.prototype);du.prototype.constructor=du;function fu(n,t,e){kt.call(this,new Uint8Array(n),t,e)}fu.prototype=Object.create(kt.prototype);fu.prototype.constructor=fu;function pu(n,t,e){kt.call(this,new Uint8ClampedArray(n),t,e)}pu.prototype=Object.create(kt.prototype);pu.prototype.constructor=pu;function mu(n,t,e){kt.call(this,new Int16Array(n),t,e)}mu.prototype=Object.create(kt.prototype);mu.prototype.constructor=mu;function Zo(n,t,e){kt.call(this,new Uint16Array(n),t,e)}Zo.prototype=Object.create(kt.prototype);Zo.prototype.constructor=Zo;function gu(n,t,e){kt.call(this,new Int32Array(n),t,e)}gu.prototype=Object.create(kt.prototype);gu.prototype.constructor=gu;function Jo(n,t,e){kt.call(this,new Uint32Array(n),t,e)}Jo.prototype=Object.create(kt.prototype);Jo.prototype.constructor=Jo;function ee(n,t,e){kt.call(this,new Float32Array(n),t,e)}ee.prototype=Object.create(kt.prototype);ee.prototype.constructor=ee;function vu(n,t,e){kt.call(this,new Float64Array(n),t,e)}vu.prototype=Object.create(kt.prototype);vu.prototype.constructor=vu;class q1{constructor(){this.vertices=[],this.normals=[],this.colors=[],this.uvs=[],this.uvs2=[],this.groups=[],this.morphTargets={},this.skinWeights=[],this.skinIndices=[],this.boundingBox=null,this.boundingSphere=null,this.verticesNeedUpdate=!1,this.normalsNeedUpdate=!1,this.colorsNeedUpdate=!1,this.uvsNeedUpdate=!1,this.groupsNeedUpdate=!1}computeGroups(t){const e=[];let i,r,s;const o=t.faces;for(r=0;r<o.length;r++){const a=o[r];a.materialIndex!==s&&(s=a.materialIndex,i!==void 0&&(i.count=r*3-i.start,e.push(i)),i={start:r*3,materialIndex:s})}i!==void 0&&(i.count=r*3-i.start,e.push(i)),this.groups=e}fromGeometry(t){const e=t.faces,i=t.vertices,r=t.faceVertexUvs,s=r[0]&&r[0].length>0,o=r[1]&&r[1].length>0,a=t.morphTargets,l=a.length;let c;if(l>0){c=[];for(let m=0;m<l;m++)c[m]={name:a[m].name,data:[]};this.morphTargets.position=c}const h=t.morphNormals,u=h.length;let d;if(u>0){d=[];for(let m=0;m<u;m++)d[m]={name:h[m].name,data:[]};this.morphTargets.normal=d}const f=t.skinIndices,g=t.skinWeights,v=f.length===i.length,x=g.length===i.length;i.length>0&&e.length===0&&console.error("THREE.DirectGeometry: Faceless geometries are not supported.");for(let m=0;m<e.length;m++){const p=e[m];this.vertices.push(i[p.a],i[p.b],i[p.c]);const b=p.vertexNormals;if(b.length===3)this.normals.push(b[0],b[1],b[2]);else{const w=p.normal;this.normals.push(w,w,w)}const _=p.vertexColors;if(_.length===3)this.colors.push(_[0],_[1],_[2]);else{const w=p.color;this.colors.push(w,w,w)}if(s===!0){const w=r[0][m];w!==void 0?this.uvs.push(w[0],w[1],w[2]):(console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ",m),this.uvs.push(new wt,new wt,new wt))}if(o===!0){const w=r[1][m];w!==void 0?this.uvs2.push(w[0],w[1],w[2]):(console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ",m),this.uvs2.push(new wt,new wt,new wt))}for(let w=0;w<l;w++){const E=a[w].vertices;c[w].data.push(E[p.a],E[p.b],E[p.c])}for(let w=0;w<u;w++){const E=h[w].vertexNormals[m];d[w].data.push(E.a,E.b,E.c)}v&&this.skinIndices.push(f[p.a],f[p.b],f[p.c]),x&&this.skinWeights.push(g[p.a],g[p.b],g[p.c])}return this.computeGroups(t),this.verticesNeedUpdate=t.verticesNeedUpdate,this.normalsNeedUpdate=t.normalsNeedUpdate,this.colorsNeedUpdate=t.colorsNeedUpdate,this.uvsNeedUpdate=t.uvsNeedUpdate,this.groupsNeedUpdate=t.groupsNeedUpdate,t.boundingSphere!==null&&(this.boundingSphere=t.boundingSphere.clone()),t.boundingBox!==null&&(this.boundingBox=t.boundingBox.clone()),this}}function Tm(n){if(n.length===0)return-1/0;let t=n[0];for(let e=1,i=n.length;e<i;++e)n[e]>t&&(t=n[e]);return t}let j1=1;const $n=new Wt,xu=new Ut,Rs=new H,dn=new ki,Qo=new ki,Ce=new H;function le(){Object.defineProperty(this,"id",{value:j1+=2}),this.uuid=Vt.generateUUID(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}le.prototype=Object.assign(Object.create(ci.prototype),{constructor:le,isBufferGeometry:!0,getIndex:function(){return this.index},setIndex:function(n){return Array.isArray(n)?this.index=new(Tm(n)>65535?Jo:Zo)(n,1):this.index=n,this},getAttribute:function(n){return this.attributes[n]},setAttribute:function(n,t){return this.attributes[n]=t,this},deleteAttribute:function(n){return delete this.attributes[n],this},addGroup:function(n,t,e){this.groups.push({start:n,count:t,materialIndex:e!==void 0?e:0})},clearGroups:function(){this.groups=[]},setDrawRange:function(n,t){this.drawRange.start=n,this.drawRange.count=t},applyMatrix4:function(n){const t=this.attributes.position;t!==void 0&&(t.applyMatrix4(n),t.needsUpdate=!0);const e=this.attributes.normal;if(e!==void 0){const r=new nn().getNormalMatrix(n);e.applyNormalMatrix(r),e.needsUpdate=!0}const i=this.attributes.tangent;return i!==void 0&&(i.transformDirection(n),i.needsUpdate=!0),this.boundingBox!==null&&this.computeBoundingBox(),this.boundingSphere!==null&&this.computeBoundingSphere(),this},rotateX:function(n){return $n.makeRotationX(n),this.applyMatrix4($n),this},rotateY:function(n){return $n.makeRotationY(n),this.applyMatrix4($n),this},rotateZ:function(n){return $n.makeRotationZ(n),this.applyMatrix4($n),this},translate:function(n,t,e){return $n.makeTranslation(n,t,e),this.applyMatrix4($n),this},scale:function(n,t,e){return $n.makeScale(n,t,e),this.applyMatrix4($n),this},lookAt:function(n){return xu.lookAt(n),xu.updateMatrix(),this.applyMatrix4(xu.matrix),this},center:function(){return this.computeBoundingBox(),this.boundingBox.getCenter(Rs).negate(),this.translate(Rs.x,Rs.y,Rs.z),this},setFromObject:function(n){const t=n.geometry;if(n.isPoints||n.isLine){const e=new ee(t.vertices.length*3,3),i=new ee(t.colors.length*3,3);if(this.setAttribute("position",e.copyVector3sArray(t.vertices)),this.setAttribute("color",i.copyColorsArray(t.colors)),t.lineDistances&&t.lineDistances.length===t.vertices.length){const r=new ee(t.lineDistances.length,1);this.setAttribute("lineDistance",r.copyArray(t.lineDistances))}t.boundingSphere!==null&&(this.boundingSphere=t.boundingSphere.clone()),t.boundingBox!==null&&(this.boundingBox=t.boundingBox.clone())}else n.isMesh&&t&&t.isGeometry&&this.fromGeometry(t);return this},setFromPoints:function(n){const t=[];for(let e=0,i=n.length;e<i;e++){const r=n[e];t.push(r.x,r.y,r.z||0)}return this.setAttribute("position",new ee(t,3)),this},updateFromObject:function(n){let t=n.geometry;if(n.isMesh){let e=t.__directGeometry;if(t.elementsNeedUpdate===!0&&(e=void 0,t.elementsNeedUpdate=!1),e===void 0)return this.fromGeometry(t);e.verticesNeedUpdate=t.verticesNeedUpdate,e.normalsNeedUpdate=t.normalsNeedUpdate,e.colorsNeedUpdate=t.colorsNeedUpdate,e.uvsNeedUpdate=t.uvsNeedUpdate,e.groupsNeedUpdate=t.groupsNeedUpdate,t.verticesNeedUpdate=!1,t.normalsNeedUpdate=!1,t.colorsNeedUpdate=!1,t.uvsNeedUpdate=!1,t.groupsNeedUpdate=!1,t=e}if(t.verticesNeedUpdate===!0){const e=this.attributes.position;e!==void 0&&(e.copyVector3sArray(t.vertices),e.needsUpdate=!0),t.verticesNeedUpdate=!1}if(t.normalsNeedUpdate===!0){const e=this.attributes.normal;e!==void 0&&(e.copyVector3sArray(t.normals),e.needsUpdate=!0),t.normalsNeedUpdate=!1}if(t.colorsNeedUpdate===!0){const e=this.attributes.color;e!==void 0&&(e.copyColorsArray(t.colors),e.needsUpdate=!0),t.colorsNeedUpdate=!1}if(t.uvsNeedUpdate){const e=this.attributes.uv;e!==void 0&&(e.copyVector2sArray(t.uvs),e.needsUpdate=!0),t.uvsNeedUpdate=!1}if(t.lineDistancesNeedUpdate){const e=this.attributes.lineDistance;e!==void 0&&(e.copyArray(t.lineDistances),e.needsUpdate=!0),t.lineDistancesNeedUpdate=!1}return t.groupsNeedUpdate&&(t.computeGroups(n.geometry),this.groups=t.groups,t.groupsNeedUpdate=!1),this},fromGeometry:function(n){return n.__directGeometry=new q1().fromGeometry(n),this.fromDirectGeometry(n.__directGeometry)},fromDirectGeometry:function(n){const t=new Float32Array(n.vertices.length*3);if(this.setAttribute("position",new kt(t,3).copyVector3sArray(n.vertices)),n.normals.length>0){const e=new Float32Array(n.normals.length*3);this.setAttribute("normal",new kt(e,3).copyVector3sArray(n.normals))}if(n.colors.length>0){const e=new Float32Array(n.colors.length*3);this.setAttribute("color",new kt(e,3).copyColorsArray(n.colors))}if(n.uvs.length>0){const e=new Float32Array(n.uvs.length*2);this.setAttribute("uv",new kt(e,2).copyVector2sArray(n.uvs))}if(n.uvs2.length>0){const e=new Float32Array(n.uvs2.length*2);this.setAttribute("uv2",new kt(e,2).copyVector2sArray(n.uvs2))}this.groups=n.groups;for(const e in n.morphTargets){const i=[],r=n.morphTargets[e];for(let s=0,o=r.length;s<o;s++){const a=r[s],l=new ee(a.data.length*3,3);l.name=a.name,i.push(l.copyVector3sArray(a.data))}this.morphAttributes[e]=i}if(n.skinIndices.length>0){const e=new ee(n.skinIndices.length*4,4);this.setAttribute("skinIndex",e.copyVector4sArray(n.skinIndices))}if(n.skinWeights.length>0){const e=new ee(n.skinWeights.length*4,4);this.setAttribute("skinWeight",e.copyVector4sArray(n.skinWeights))}return n.boundingSphere!==null&&(this.boundingSphere=n.boundingSphere.clone()),n.boundingBox!==null&&(this.boundingBox=n.boundingBox.clone()),this},computeBoundingBox:function(){this.boundingBox===null&&(this.boundingBox=new ki);const n=this.attributes.position,t=this.morphAttributes.position;if(n&&n.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".',this),this.boundingBox.set(new H(-1/0,-1/0,-1/0),new H(1/0,1/0,1/0));return}if(n!==void 0){if(this.boundingBox.setFromBufferAttribute(n),t)for(let e=0,i=t.length;e<i;e++){const r=t[e];dn.setFromBufferAttribute(r),this.morphTargetsRelative?(Ce.addVectors(this.boundingBox.min,dn.min),this.boundingBox.expandByPoint(Ce),Ce.addVectors(this.boundingBox.max,dn.max),this.boundingBox.expandByPoint(Ce)):(this.boundingBox.expandByPoint(dn.min),this.boundingBox.expandByPoint(dn.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)},computeBoundingSphere:function(){this.boundingSphere===null&&(this.boundingSphere=new $i);const n=this.attributes.position,t=this.morphAttributes.position;if(n&&n.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".',this),this.boundingSphere.set(new H,1/0);return}if(n){const e=this.boundingSphere.center;if(dn.setFromBufferAttribute(n),t)for(let r=0,s=t.length;r<s;r++){const o=t[r];Qo.setFromBufferAttribute(o),this.morphTargetsRelative?(Ce.addVectors(dn.min,Qo.min),dn.expandByPoint(Ce),Ce.addVectors(dn.max,Qo.max),dn.expandByPoint(Ce)):(dn.expandByPoint(Qo.min),dn.expandByPoint(Qo.max))}dn.getCenter(e);let i=0;for(let r=0,s=n.count;r<s;r++)Ce.fromBufferAttribute(n,r),i=Math.max(i,e.distanceToSquared(Ce));if(t)for(let r=0,s=t.length;r<s;r++){const o=t[r],a=this.morphTargetsRelative;for(let l=0,c=o.count;l<c;l++)Ce.fromBufferAttribute(o,l),a&&(Rs.fromBufferAttribute(n,l),Ce.add(Rs)),i=Math.max(i,e.distanceToSquared(Ce))}this.boundingSphere.radius=Math.sqrt(i),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}},computeFaceNormals:function(){},computeVertexNormals:function(){const n=this.index,t=this.getAttribute("position");if(t!==void 0){let e=this.getAttribute("normal");if(e===void 0)e=new kt(new Float32Array(t.count*3),3),this.setAttribute("normal",e);else for(let u=0,d=e.count;u<d;u++)e.setXYZ(u,0,0,0);const i=new H,r=new H,s=new H,o=new H,a=new H,l=new H,c=new H,h=new H;if(n)for(let u=0,d=n.count;u<d;u+=3){const f=n.getX(u+0),g=n.getX(u+1),v=n.getX(u+2);i.fromBufferAttribute(t,f),r.fromBufferAttribute(t,g),s.fromBufferAttribute(t,v),c.subVectors(s,r),h.subVectors(i,r),c.cross(h),o.fromBufferAttribute(e,f),a.fromBufferAttribute(e,g),l.fromBufferAttribute(e,v),o.add(c),a.add(c),l.add(c),e.setXYZ(f,o.x,o.y,o.z),e.setXYZ(g,a.x,a.y,a.z),e.setXYZ(v,l.x,l.y,l.z)}else for(let u=0,d=t.count;u<d;u+=3)i.fromBufferAttribute(t,u+0),r.fromBufferAttribute(t,u+1),s.fromBufferAttribute(t,u+2),c.subVectors(s,r),h.subVectors(i,r),c.cross(h),e.setXYZ(u+0,c.x,c.y,c.z),e.setXYZ(u+1,c.x,c.y,c.z),e.setXYZ(u+2,c.x,c.y,c.z);this.normalizeNormals(),e.needsUpdate=!0}},merge:function(n,t){if(!(n&&n.isBufferGeometry)){console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.",n);return}t===void 0&&(t=0,console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));const e=this.attributes;for(const i in e){if(n.attributes[i]===void 0)continue;const s=e[i].array,o=n.attributes[i],a=o.array,l=o.itemSize*t,c=Math.min(a.length,s.length-l);for(let h=0,u=l;h<c;h++,u++)s[u]=a[h]}return this},normalizeNormals:function(){const n=this.attributes.normal;for(let t=0,e=n.count;t<e;t++)Ce.fromBufferAttribute(n,t),Ce.normalize(),n.setXYZ(t,Ce.x,Ce.y,Ce.z)},toNonIndexed:function(){function n(o,a){const l=o.array,c=o.itemSize,h=o.normalized,u=new l.constructor(a.length*c);let d=0,f=0;for(let g=0,v=a.length;g<v;g++){d=a[g]*c;for(let x=0;x<c;x++)u[f++]=l[d++]}return new kt(u,c,h)}if(this.index===null)return console.warn("THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed."),this;const t=new le,e=this.index.array,i=this.attributes;for(const o in i){const a=i[o],l=n(a,e);t.setAttribute(o,l)}const r=this.morphAttributes;for(const o in r){const a=[],l=r[o];for(let c=0,h=l.length;c<h;c++){const u=l[c],d=n(u,e);a.push(d)}t.morphAttributes[o]=a}t.morphTargetsRelative=this.morphTargetsRelative;const s=this.groups;for(let o=0,a=s.length;o<a;o++){const l=s[o];t.addGroup(l.start,l.count,l.materialIndex)}return t},toJSON:function(){const n={metadata:{version:4.5,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(n.uuid=this.uuid,n.type=this.type,this.name!==""&&(n.name=this.name),Object.keys(this.userData).length>0&&(n.userData=this.userData),this.parameters!==void 0){const a=this.parameters;for(const l in a)a[l]!==void 0&&(n[l]=a[l]);return n}n.data={attributes:{}};const t=this.index;t!==null&&(n.data.index={type:t.array.constructor.name,array:Array.prototype.slice.call(t.array)});const e=this.attributes;for(const a in e){const l=e[a],c=l.toJSON(n.data);l.name!==""&&(c.name=l.name),n.data.attributes[a]=c}const i={};let r=!1;for(const a in this.morphAttributes){const l=this.morphAttributes[a],c=[];for(let h=0,u=l.length;h<u;h++){const d=l[h],f=d.toJSON(n.data);d.name!==""&&(f.name=d.name),c.push(f)}c.length>0&&(i[a]=c,r=!0)}r&&(n.data.morphAttributes=i,n.data.morphTargetsRelative=this.morphTargetsRelative);const s=this.groups;s.length>0&&(n.data.groups=JSON.parse(JSON.stringify(s)));const o=this.boundingSphere;return o!==null&&(n.data.boundingSphere={center:o.center.toArray(),radius:o.radius}),n},clone:function(){return new le().copy(this)},copy:function(n){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const t={};this.name=n.name;const e=n.index;e!==null&&this.setIndex(e.clone(t));const i=n.attributes;for(const l in i){const c=i[l];this.setAttribute(l,c.clone(t))}const r=n.morphAttributes;for(const l in r){const c=[],h=r[l];for(let u=0,d=h.length;u<d;u++)c.push(h[u].clone(t));this.morphAttributes[l]=c}this.morphTargetsRelative=n.morphTargetsRelative;const s=n.groups;for(let l=0,c=s.length;l<c;l++){const h=s[l];this.addGroup(h.start,h.count,h.materialIndex)}const o=n.boundingBox;o!==null&&(this.boundingBox=o.clone());const a=n.boundingSphere;return a!==null&&(this.boundingSphere=a.clone()),this.drawRange.start=n.drawRange.start,this.drawRange.count=n.drawRange.count,this.userData=n.userData,this},dispose:function(){this.dispatchEvent({type:"dispose"})}});const Am=new Wt,yr=new jo,yu=new $i,Xi=new H,Yi=new H,Zi=new H,_u=new H,bu=new H,Mu=new H,Nl=new H,Fl=new H,Bl=new H,Ps=new wt,Is=new wt,Ds=new wt,Ko=new H,Ol=new H;function $e(n,t){Ut.call(this),this.type="Mesh",this.geometry=n!==void 0?n:new le,this.material=t!==void 0?t:new xr,this.updateMorphTargets()}$e.prototype=Object.assign(Object.create(Ut.prototype),{constructor:$e,isMesh:!0,copy:function(n){return Ut.prototype.copy.call(this,n),n.morphTargetInfluences!==void 0&&(this.morphTargetInfluences=n.morphTargetInfluences.slice()),n.morphTargetDictionary!==void 0&&(this.morphTargetDictionary=Object.assign({},n.morphTargetDictionary)),this.material=n.material,this.geometry=n.geometry,this},updateMorphTargets:function(){const n=this.geometry;if(n.isBufferGeometry){const t=n.morphAttributes,e=Object.keys(t);if(e.length>0){const i=t[e[0]];if(i!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let r=0,s=i.length;r<s;r++){const o=i[r].name||String(r);this.morphTargetInfluences.push(0),this.morphTargetDictionary[o]=r}}}}else{const t=n.morphTargets;t!==void 0&&t.length>0&&console.error("THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}},raycast:function(n,t){const e=this.geometry,i=this.material,r=this.matrixWorld;if(i===void 0||(e.boundingSphere===null&&e.computeBoundingSphere(),yu.copy(e.boundingSphere),yu.applyMatrix4(r),n.ray.intersectsSphere(yu)===!1)||(Am.getInverse(r),yr.copy(n.ray).applyMatrix4(Am),e.boundingBox!==null&&yr.intersectsBox(e.boundingBox)===!1))return;let s;if(e.isBufferGeometry){const o=e.index,a=e.attributes.position,l=e.morphAttributes.position,c=e.morphTargetsRelative,h=e.attributes.uv,u=e.attributes.uv2,d=e.groups,f=e.drawRange;if(o!==null)if(Array.isArray(i))for(let g=0,v=d.length;g<v;g++){const x=d[g],m=i[x.materialIndex],p=Math.max(x.start,f.start),b=Math.min(x.start+x.count,f.start+f.count);for(let _=p,w=b;_<w;_+=3){const E=o.getX(_),S=o.getX(_+1),R=o.getX(_+2);s=zl(this,m,n,yr,a,l,c,h,u,E,S,R),s&&(s.faceIndex=Math.floor(_/3),s.face.materialIndex=x.materialIndex,t.push(s))}}else{const g=Math.max(0,f.start),v=Math.min(o.count,f.start+f.count);for(let x=g,m=v;x<m;x+=3){const p=o.getX(x),b=o.getX(x+1),_=o.getX(x+2);s=zl(this,i,n,yr,a,l,c,h,u,p,b,_),s&&(s.faceIndex=Math.floor(x/3),t.push(s))}}else if(a!==void 0)if(Array.isArray(i))for(let g=0,v=d.length;g<v;g++){const x=d[g],m=i[x.materialIndex],p=Math.max(x.start,f.start),b=Math.min(x.start+x.count,f.start+f.count);for(let _=p,w=b;_<w;_+=3){const E=_,S=_+1,R=_+2;s=zl(this,m,n,yr,a,l,c,h,u,E,S,R),s&&(s.faceIndex=Math.floor(_/3),s.face.materialIndex=x.materialIndex,t.push(s))}}else{const g=Math.max(0,f.start),v=Math.min(a.count,f.start+f.count);for(let x=g,m=v;x<m;x+=3){const p=x,b=x+1,_=x+2;s=zl(this,i,n,yr,a,l,c,h,u,p,b,_),s&&(s.faceIndex=Math.floor(x/3),t.push(s))}}}else if(e.isGeometry){const o=Array.isArray(i),a=e.vertices,l=e.faces;let c;const h=e.faceVertexUvs[0];h.length>0&&(c=h);for(let u=0,d=l.length;u<d;u++){const f=l[u],g=o?i[f.materialIndex]:i;if(g===void 0)continue;const v=a[f.a],x=a[f.b],m=a[f.c];if(s=Lm(this,g,n,yr,v,x,m,Ko),s){if(c&&c[u]){const p=c[u];Ps.copy(p[0]),Is.copy(p[1]),Ds.copy(p[2]),s.uv=We.getUV(Ko,v,x,m,Ps,Is,Ds,new wt)}s.face=f,s.faceIndex=u,t.push(s)}}}}});function Lm(n,t,e,i,r,s,o,a){let l;if(t.side===Ne?l=i.intersectTriangle(o,s,r,!0,a):l=i.intersectTriangle(r,s,o,t.side!==ml,a),l===null)return null;Ol.copy(a),Ol.applyMatrix4(n.matrixWorld);const c=e.ray.origin.distanceTo(Ol);return c<e.near||c>e.far?null:{distance:c,point:Ol.clone(),object:n}}function zl(n,t,e,i,r,s,o,a,l,c,h,u){Xi.fromBufferAttribute(r,c),Yi.fromBufferAttribute(r,h),Zi.fromBufferAttribute(r,u);const d=n.morphTargetInfluences;if(t.morphTargets&&s&&d){Nl.set(0,0,0),Fl.set(0,0,0),Bl.set(0,0,0);for(let g=0,v=s.length;g<v;g++){const x=d[g],m=s[g];x!==0&&(_u.fromBufferAttribute(m,c),bu.fromBufferAttribute(m,h),Mu.fromBufferAttribute(m,u),o?(Nl.addScaledVector(_u,x),Fl.addScaledVector(bu,x),Bl.addScaledVector(Mu,x)):(Nl.addScaledVector(_u.sub(Xi),x),Fl.addScaledVector(bu.sub(Yi),x),Bl.addScaledVector(Mu.sub(Zi),x)))}Xi.add(Nl),Yi.add(Fl),Zi.add(Bl)}n.isSkinnedMesh&&(n.boneTransform(c,Xi),n.boneTransform(h,Yi),n.boneTransform(u,Zi));const f=Lm(n,t,e,i,Xi,Yi,Zi,Ko);if(f){a&&(Ps.fromBufferAttribute(a,c),Is.fromBufferAttribute(a,h),Ds.fromBufferAttribute(a,u),f.uv=We.getUV(Ko,Xi,Yi,Zi,Ps,Is,Ds,new wt)),l&&(Ps.fromBufferAttribute(l,c),Is.fromBufferAttribute(l,h),Ds.fromBufferAttribute(l,u),f.uv2=We.getUV(Ko,Xi,Yi,Zi,Ps,Is,Ds,new wt));const g=new uu(c,h,u);We.getNormal(Xi,Yi,Zi,g.normal),f.face=g}return f}class Cm extends le{constructor(t=1,e=1,i=1,r=1,s=1,o=1){super();this.type="BoxBufferGeometry",this.parameters={width:t,height:e,depth:i,widthSegments:r,heightSegments:s,depthSegments:o};const a=this;r=Math.floor(r),s=Math.floor(s),o=Math.floor(o);const l=[],c=[],h=[],u=[];let d=0,f=0;g("z","y","x",-1,-1,i,e,t,o,s,0),g("z","y","x",1,-1,i,e,-t,o,s,1),g("x","z","y",1,1,t,i,e,r,o,2),g("x","z","y",1,-1,t,i,-e,r,o,3),g("x","y","z",1,-1,t,e,i,r,s,4),g("x","y","z",-1,-1,t,e,-i,r,s,5),this.setIndex(l),this.setAttribute("position",new ee(c,3)),this.setAttribute("normal",new ee(h,3)),this.setAttribute("uv",new ee(u,2));function g(v,x,m,p,b,_,w,E,S,R,W){const B=_/S,T=w/R,k=_/2,I=w/2,N=E/2,C=S+1,L=R+1;let F=0,q=0;const ot=new H;for(let pt=0;pt<L;pt++){const rt=pt*T-I;for(let Et=0;Et<C;Et++){const it=Et*B-k;ot[v]=it*p,ot[x]=rt*b,ot[m]=N,c.push(ot.x,ot.y,ot.z),ot[v]=0,ot[x]=0,ot[m]=E>0?1:-1,h.push(ot.x,ot.y,ot.z),u.push(Et/S),u.push(1-pt/R),F+=1}}for(let pt=0;pt<R;pt++)for(let rt=0;rt<S;rt++){const Et=d+rt+C*pt,it=d+rt+C*(pt+1),vt=d+(rt+1)+C*(pt+1),Y=d+(rt+1)+C*pt;l.push(Et,it,Y),l.push(it,vt,Y),q+=6}a.addGroup(f,q,W),f+=q,d+=F}}}function Ns(n){const t={};for(const e in n){t[e]={};for(const i in n[e]){const r=n[e][i];r&&(r.isColor||r.isMatrix3||r.isMatrix4||r.isVector2||r.isVector3||r.isVector4||r.isTexture)?t[e][i]=r.clone():Array.isArray(r)?t[e][i]=r.slice():t[e][i]=r}}return t}function qe(n){const t={};for(let e=0;e<n.length;e++){const i=Ns(n[e]);for(const r in i)t[r]=i[r]}return t}const X1={clone:Ns,merge:qe};var Y1=`void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`,Z1=`void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`;function rn(n){Gt.call(this),this.type="ShaderMaterial",this.defines={},this.uniforms={},this.vertexShader=Y1,this.fragmentShader=Z1,this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,n!==void 0&&(n.attributes!==void 0&&console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."),this.setValues(n))}rn.prototype=Object.create(Gt.prototype);rn.prototype.constructor=rn;rn.prototype.isShaderMaterial=!0;rn.prototype.copy=function(n){return Gt.prototype.copy.call(this,n),this.fragmentShader=n.fragmentShader,this.vertexShader=n.vertexShader,this.uniforms=Ns(n.uniforms),this.defines=Object.assign({},n.defines),this.wireframe=n.wireframe,this.wireframeLinewidth=n.wireframeLinewidth,this.lights=n.lights,this.clipping=n.clipping,this.skinning=n.skinning,this.morphTargets=n.morphTargets,this.morphNormals=n.morphNormals,this.extensions=Object.assign({},n.extensions),this.glslVersion=n.glslVersion,this};rn.prototype.toJSON=function(n){const t=Gt.prototype.toJSON.call(this,n);t.glslVersion=this.glslVersion,t.uniforms={};for(const i in this.uniforms){const s=this.uniforms[i].value;s&&s.isTexture?t.uniforms[i]={type:"t",value:s.toJSON(n).uuid}:s&&s.isColor?t.uniforms[i]={type:"c",value:s.getHex()}:s&&s.isVector2?t.uniforms[i]={type:"v2",value:s.toArray()}:s&&s.isVector3?t.uniforms[i]={type:"v3",value:s.toArray()}:s&&s.isVector4?t.uniforms[i]={type:"v4",value:s.toArray()}:s&&s.isMatrix3?t.uniforms[i]={type:"m3",value:s.toArray()}:s&&s.isMatrix4?t.uniforms[i]={type:"m4",value:s.toArray()}:t.uniforms[i]={value:s}}Object.keys(this.defines).length>0&&(t.defines=this.defines),t.vertexShader=this.vertexShader,t.fragmentShader=this.fragmentShader;const e={};for(const i in this.extensions)this.extensions[i]===!0&&(e[i]=!0);return Object.keys(e).length>0&&(t.extensions=e),t};function Ji(){Ut.call(this),this.type="Camera",this.matrixWorldInverse=new Wt,this.projectionMatrix=new Wt,this.projectionMatrixInverse=new Wt}Ji.prototype=Object.assign(Object.create(Ut.prototype),{constructor:Ji,isCamera:!0,copy:function(n,t){return Ut.prototype.copy.call(this,n,t),this.matrixWorldInverse.copy(n.matrixWorldInverse),this.projectionMatrix.copy(n.projectionMatrix),this.projectionMatrixInverse.copy(n.projectionMatrixInverse),this},getWorldDirection:function(n){n===void 0&&(console.warn("THREE.Camera: .getWorldDirection() target is now required"),n=new H),this.updateWorldMatrix(!0,!1);const t=this.matrixWorld.elements;return n.set(-t[8],-t[9],-t[10]).normalize()},updateMatrixWorld:function(n){Ut.prototype.updateMatrixWorld.call(this,n),this.matrixWorldInverse.getInverse(this.matrixWorld)},updateWorldMatrix:function(n,t){Ut.prototype.updateWorldMatrix.call(this,n,t),this.matrixWorldInverse.getInverse(this.matrixWorld)},clone:function(){return new this.constructor().copy(this)}});function Be(n,t,e,i){Ji.call(this),this.type="PerspectiveCamera",this.fov=n!==void 0?n:50,this.zoom=1,this.near=e!==void 0?e:.1,this.far=i!==void 0?i:2e3,this.focus=10,this.aspect=t!==void 0?t:1,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}Be.prototype=Object.assign(Object.create(Ji.prototype),{constructor:Be,isPerspectiveCamera:!0,copy:function(n,t){return Ji.prototype.copy.call(this,n,t),this.fov=n.fov,this.zoom=n.zoom,this.near=n.near,this.far=n.far,this.focus=n.focus,this.aspect=n.aspect,this.view=n.view===null?null:Object.assign({},n.view),this.filmGauge=n.filmGauge,this.filmOffset=n.filmOffset,this},setFocalLength:function(n){const t=.5*this.getFilmHeight()/n;this.fov=Vt.RAD2DEG*2*Math.atan(t),this.updateProjectionMatrix()},getFocalLength:function(){const n=Math.tan(Vt.DEG2RAD*.5*this.fov);return .5*this.getFilmHeight()/n},getEffectiveFOV:function(){return Vt.RAD2DEG*2*Math.atan(Math.tan(Vt.DEG2RAD*.5*this.fov)/this.zoom)},getFilmWidth:function(){return this.filmGauge*Math.min(this.aspect,1)},getFilmHeight:function(){return this.filmGauge/Math.max(this.aspect,1)},setViewOffset:function(n,t,e,i,r,s){this.aspect=n/t,this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=n,this.view.fullHeight=t,this.view.offsetX=e,this.view.offsetY=i,this.view.width=r,this.view.height=s,this.updateProjectionMatrix()},clearViewOffset:function(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()},updateProjectionMatrix:function(){const n=this.near;let t=n*Math.tan(Vt.DEG2RAD*.5*this.fov)/this.zoom,e=2*t,i=this.aspect*e,r=-.5*i;const s=this.view;if(this.view!==null&&this.view.enabled){const a=s.fullWidth,l=s.fullHeight;r+=s.offsetX*i/a,t-=s.offsetY*e/l,i*=s.width/a,e*=s.height/l}const o=this.filmOffset;o!==0&&(r+=n*o/this.getFilmWidth()),this.projectionMatrix.makePerspective(r,r+i,t,t-e,n,this.far),this.projectionMatrixInverse.getInverse(this.projectionMatrix)},toJSON:function(n){const t=Ut.prototype.toJSON.call(this,n);return t.object.fov=this.fov,t.object.zoom=this.zoom,t.object.near=this.near,t.object.far=this.far,t.object.focus=this.focus,t.object.aspect=this.aspect,this.view!==null&&(t.object.view=Object.assign({},this.view)),t.object.filmGauge=this.filmGauge,t.object.filmOffset=this.filmOffset,t}});const Fs=90,Bs=1;function Os(n,t,e){if(Ut.call(this),this.type="CubeCamera",e.isWebGLCubeRenderTarget!==!0){console.error("THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.");return}this.renderTarget=e;const i=new Be(Fs,Bs,n,t);i.layers=this.layers,i.up.set(0,-1,0),i.lookAt(new H(1,0,0)),this.add(i);const r=new Be(Fs,Bs,n,t);r.layers=this.layers,r.up.set(0,-1,0),r.lookAt(new H(-1,0,0)),this.add(r);const s=new Be(Fs,Bs,n,t);s.layers=this.layers,s.up.set(0,0,1),s.lookAt(new H(0,1,0)),this.add(s);const o=new Be(Fs,Bs,n,t);o.layers=this.layers,o.up.set(0,0,-1),o.lookAt(new H(0,-1,0)),this.add(o);const a=new Be(Fs,Bs,n,t);a.layers=this.layers,a.up.set(0,-1,0),a.lookAt(new H(0,0,1)),this.add(a);const l=new Be(Fs,Bs,n,t);l.layers=this.layers,l.up.set(0,-1,0),l.lookAt(new H(0,0,-1)),this.add(l),this.update=function(c,h){this.parent===null&&this.updateMatrixWorld();const u=c.xr.enabled,d=c.getRenderTarget();c.xr.enabled=!1;const f=e.texture.generateMipmaps;e.texture.generateMipmaps=!1,c.setRenderTarget(e,0),c.render(h,i),c.setRenderTarget(e,1),c.render(h,r),c.setRenderTarget(e,2),c.render(h,s),c.setRenderTarget(e,3),c.render(h,o),c.setRenderTarget(e,4),c.render(h,a),e.texture.generateMipmaps=f,c.setRenderTarget(e,5),c.render(h,l),c.setRenderTarget(d),c.xr.enabled=u}}Os.prototype=Object.create(Ut.prototype);Os.prototype.constructor=Os;function Qi(n,t,e,i,r,s,o,a,l,c){n=n!==void 0?n:[],t=t!==void 0?t:Gh,o=o!==void 0?o:pr,de.call(this,n,t,e,i,r,s,o,a,l,c),this.flipY=!1,this._needsFlipEnvMap=!0}Qi.prototype=Object.create(de.prototype);Qi.prototype.constructor=Qi;Qi.prototype.isCubeTexture=!0;Object.defineProperty(Qi.prototype,"images",{get:function(){return this.image},set:function(n){this.image=n}});function _r(n,t,e){Number.isInteger(t)&&(console.warn("THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )"),t=e),Pn.call(this,n,n,t),t=t||{},this.texture=new Qi(void 0,t.mapping,t.wrapS,t.wrapT,t.magFilter,t.minFilter,t.format,t.type,t.anisotropy,t.encoding),this.texture._needsFlipEnvMap=!1}_r.prototype=Object.create(Pn.prototype);_r.prototype.constructor=_r;_r.prototype.isWebGLCubeRenderTarget=!0;_r.prototype.fromEquirectangularTexture=function(n,t){this.texture.type=t.type,this.texture.format=Rn,this.texture.encoding=t.encoding,this.texture.generateMipmaps=t.generateMipmaps,this.texture.minFilter=t.minFilter,this.texture.magFilter=t.magFilter;const e={uniforms:{tEquirect:{value:null}},vertexShader:`

			varying vec3 vWorldDirection;

			vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

				return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

			}

			void main() {

				vWorldDirection = transformDirection( position, modelMatrix );

				#include <begin_vertex>
				#include <project_vertex>

			}
		`,fragmentShader:`

			uniform sampler2D tEquirect;

			varying vec3 vWorldDirection;

			#include <common>

			void main() {

				vec3 direction = normalize( vWorldDirection );

				vec2 sampleUV = equirectUv( direction );

				gl_FragColor = texture2D( tEquirect, sampleUV );

			}
		`},i=new Cm(5,5,5),r=new rn({name:"CubemapFromEquirect",uniforms:Ns(e.uniforms),vertexShader:e.vertexShader,fragmentShader:e.fragmentShader,side:Ne,blending:zo});r.uniforms.tEquirect.value=t;const s=new $e(i,r),o=t.minFilter;return t.minFilter===vl&&(t.minFilter=Ve),new Os(1,10,this).update(n,s),t.minFilter=o,s.geometry.dispose(),s.material.dispose(),this};_r.prototype.clear=function(n,t,e,i){const r=n.getRenderTarget();for(let s=0;s<6;s++)n.setRenderTarget(this,s),n.clear(t,e,i);n.setRenderTarget(r)};function zs(n,t,e,i,r,s,o,a,l,c,h,u){de.call(this,null,s,o,a,l,c,i,r,h,u),this.image={data:n||null,width:t||1,height:e||1},this.magFilter=l!==void 0?l:Je,this.minFilter=c!==void 0?c:Je,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.needsUpdate=!0}zs.prototype=Object.create(de.prototype);zs.prototype.constructor=zs;zs.prototype.isDataTexture=!0;const Us=new $i,Ul=new H;class Hl{constructor(t,e,i,r,s,o){this.planes=[t!==void 0?t:new fi,e!==void 0?e:new fi,i!==void 0?i:new fi,r!==void 0?r:new fi,s!==void 0?s:new fi,o!==void 0?o:new fi]}set(t,e,i,r,s,o){const a=this.planes;return a[0].copy(t),a[1].copy(e),a[2].copy(i),a[3].copy(r),a[4].copy(s),a[5].copy(o),this}clone(){return new this.constructor().copy(this)}copy(t){const e=this.planes;for(let i=0;i<6;i++)e[i].copy(t.planes[i]);return this}setFromProjectionMatrix(t){const e=this.planes,i=t.elements,r=i[0],s=i[1],o=i[2],a=i[3],l=i[4],c=i[5],h=i[6],u=i[7],d=i[8],f=i[9],g=i[10],v=i[11],x=i[12],m=i[13],p=i[14],b=i[15];return e[0].setComponents(a-r,u-l,v-d,b-x).normalize(),e[1].setComponents(a+r,u+l,v+d,b+x).normalize(),e[2].setComponents(a+s,u+c,v+f,b+m).normalize(),e[3].setComponents(a-s,u-c,v-f,b-m).normalize(),e[4].setComponents(a-o,u-h,v-g,b-p).normalize(),e[5].setComponents(a+o,u+h,v+g,b+p).normalize(),this}intersectsObject(t){const e=t.geometry;return e.boundingSphere===null&&e.computeBoundingSphere(),Us.copy(e.boundingSphere).applyMatrix4(t.matrixWorld),this.intersectsSphere(Us)}intersectsSprite(t){return Us.center.set(0,0,0),Us.radius=.7071067811865476,Us.applyMatrix4(t.matrixWorld),this.intersectsSphere(Us)}intersectsSphere(t){const e=this.planes,i=t.center,r=-t.radius;for(let s=0;s<6;s++)if(e[s].distanceToPoint(i)<r)return!1;return!0}intersectsBox(t){const e=this.planes;for(let i=0;i<6;i++){const r=e[i];if(Ul.x=r.normal.x>0?t.max.x:t.min.x,Ul.y=r.normal.y>0?t.max.y:t.min.y,Ul.z=r.normal.z>0?t.max.z:t.min.z,r.distanceToPoint(Ul)<0)return!1}return!0}containsPoint(t){const e=this.planes;for(let i=0;i<6;i++)if(e[i].distanceToPoint(t)<0)return!1;return!0}}function Rm(){let n=null,t=!1,e=null,i=null;function r(s,o){e(s,o),i=n.requestAnimationFrame(r)}return{start:function(){t!==!0&&e!==null&&(i=n.requestAnimationFrame(r),t=!0)},stop:function(){n.cancelAnimationFrame(i),t=!1},setAnimationLoop:function(s){e=s},setContext:function(s){n=s}}}function J1(n,t){const e=t.isWebGL2,i=new WeakMap;function r(c,h){const u=c.array,d=c.usage,f=n.createBuffer();n.bindBuffer(h,f),n.bufferData(h,u,d),c.onUploadCallback();let g=5126;return u instanceof Float32Array?g=5126:u instanceof Float64Array?console.warn("THREE.WebGLAttributes: Unsupported data buffer format: Float64Array."):u instanceof Uint16Array?g=5123:u instanceof Int16Array?g=5122:u instanceof Uint32Array?g=5125:u instanceof Int32Array?g=5124:u instanceof Int8Array?g=5120:u instanceof Uint8Array&&(g=5121),{buffer:f,type:g,bytesPerElement:u.BYTES_PER_ELEMENT,version:c.version}}function s(c,h,u){const d=h.array,f=h.updateRange;n.bindBuffer(u,c),f.count===-1?n.bufferSubData(u,0,d):(e?n.bufferSubData(u,f.offset*d.BYTES_PER_ELEMENT,d,f.offset,f.count):n.bufferSubData(u,f.offset*d.BYTES_PER_ELEMENT,d.subarray(f.offset,f.offset+f.count)),f.count=-1)}function o(c){return c.isInterleavedBufferAttribute&&(c=c.data),i.get(c)}function a(c){c.isInterleavedBufferAttribute&&(c=c.data);const h=i.get(c);h&&(n.deleteBuffer(h.buffer),i.delete(c))}function l(c,h){if(c.isGLBufferAttribute){var u=i.get(c);(!u||u.version<c.version)&&i.set(c,{buffer:c.buffer,type:c.type,bytesPerElement:c.elementSize,version:c.version});return}c.isInterleavedBufferAttribute&&(c=c.data);const d=i.get(c);d===void 0?i.set(c,r(c,h)):d.version<c.version&&(s(d.buffer,c,h),d.version=c.version)}return{get:o,remove:a,update:l}}class Q1 extends le{constructor(t,e,i,r){super();this.type="PlaneBufferGeometry",this.parameters={width:t,height:e,widthSegments:i,heightSegments:r},t=t||1,e=e||1;const s=t/2,o=e/2,a=Math.floor(i)||1,l=Math.floor(r)||1,c=a+1,h=l+1,u=t/a,d=e/l,f=[],g=[],v=[],x=[];for(let m=0;m<h;m++){const p=m*d-o;for(let b=0;b<c;b++){const _=b*u-s;g.push(_,-p,0),v.push(0,0,1),x.push(b/a),x.push(1-m/l)}}for(let m=0;m<l;m++)for(let p=0;p<a;p++){const b=p+c*m,_=p+c*(m+1),w=p+1+c*(m+1),E=p+1+c*m;f.push(b,_,E),f.push(_,w,E)}this.setIndex(f),this.setAttribute("position",new ee(g,3)),this.setAttribute("normal",new ee(v,3)),this.setAttribute("uv",new ee(x,2))}}var K1=`#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vUv ).g;
#endif`,tE=`#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,eE=`#ifdef ALPHATEST
	if ( diffuseColor.a < ALPHATEST ) discard;
#endif`,nE=`#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );
	#endif
#endif`,iE=`#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`,rE="vec3 transformed = vec3( position );",sE=`vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`,oE=`vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	return vec2( -1.04, 1.04 ) * a004 + r.zw;
}
float punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
#if defined ( PHYSICALLY_CORRECT_LIGHTS )
	float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
	if( cutoffDistance > 0.0 ) {
		distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
	}
	return distanceFalloff;
#else
	if( cutoffDistance > 0.0 && decayExponent > 0.0 ) {
		return pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );
	}
	return 1.0;
#endif
}
vec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {
	float fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );
	return ( 1.0 - specularColor ) * fresnel + specularColor;
}
vec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {
	float fresnel = exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );
	vec3 Fr = max( vec3( 1.0 - roughness ), F0 ) - F0;
	return Fr * fresnel + F0;
}
float G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	float gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	return 1.0 / ( gl * gv );
}
float G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
vec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( incidentLight.direction + viewDir );
	float dotNL = saturate( dot( normal, incidentLight.direction ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotLH = saturate( dot( incidentLight.direction, halfDir ) );
	vec3 F = F_Schlick( specularColor, dotLH );
	float G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );
	float D = D_GGX( alpha, dotNH );
	return F * ( G * D );
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
vec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	vec2 brdf = integrateSpecularBRDF( dotNV, roughness );
	return specularColor * brdf.x + brdf.y;
}
void BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
	float dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );
	vec3 F = F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );
	vec2 brdf = integrateSpecularBRDF( dotNV, roughness );
	vec3 FssEss = F * brdf.x + brdf.y;
	float Ess = brdf.x + brdf.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );
	float dotNH = saturate( dot( geometry.normal, halfDir ) );
	float dotLH = saturate( dot( incidentLight.direction, halfDir ) );
	vec3 F = F_Schlick( specularColor, dotLH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
}
float GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {
	return ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );
}
float BlinnExponentToGGXRoughness( const in float blinnExponent ) {
	return sqrt( 2.0 / ( blinnExponent + 2.0 ) );
}
#if defined( USE_SHEEN )
float D_Charlie(float roughness, float NoH) {
	float invAlpha = 1.0 / roughness;
	float cos2h = NoH * NoH;
	float sin2h = max(1.0 - cos2h, 0.0078125);	return (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);
}
float V_Neubelt(float NoV, float NoL) {
	return saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));
}
vec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {
	vec3 N = geometry.normal;
	vec3 V = geometry.viewDir;
	vec3 H = normalize( V + L );
	float dotNH = saturate( dot( N, H ) );
	return specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );
}
#endif`,aE=`#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vUv );
		vec2 dSTdy = dFdy( vUv );
		float Hll = bumpScale * texture2D( bumpMap, vUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {
		vec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );
		vec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 );
		fDet *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`,lE=`#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#pragma unroll_loop_start
	for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
		plane = clippingPlanes[ i ];
		if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
	}
	#pragma unroll_loop_end
	#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
		bool clipped = true;
		#pragma unroll_loop_start
		for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
		}
		#pragma unroll_loop_end
		if ( clipped ) discard;
	#endif
#endif`,cE=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`,hE=`#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`,uE=`#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`,dE=`#ifdef USE_COLOR
	diffuseColor.rgb *= vColor;
#endif`,fE=`#ifdef USE_COLOR
	varying vec3 vColor;
#endif`,pE=`#if defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	varying vec3 vColor;
#endif`,mE=`#if defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor.xyz *= color.xyz;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif`,gE=`#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate(a) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement(a) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract(sin(sn) * c);
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
struct GeometricContext {
	vec3 position;
	vec3 normal;
	vec3 viewDir;
#ifdef CLEARCOAT
	vec3 clearcoatNormal;
#endif
};
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
vec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {
	float distance = dot( planeNormal, point - pointOnPlane );
	return - distance * planeNormal + point;
}
float sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {
	return sign( dot( point - pointOnPlane, planeNormal ) );
}
vec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {
	return lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
float linearToRelativeLuminance( const in vec3 color ) {
	vec3 weights = vec3( 0.2126, 0.7152, 0.0722 );
	return dot( weights, color.rgb );
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}`,vE=`#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_maxMipLevel 8.0
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_maxTileSize 256.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		float texelSize = 1.0 / ( 3.0 * cubeUV_maxTileSize );
		vec2 uv = getUV( direction, face ) * ( faceSize - 1.0 );
		vec2 f = fract( uv );
		uv += 0.5 - f;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		if ( mipInt < cubeUV_maxMipLevel ) {
			uv.y += 2.0 * cubeUV_maxTileSize;
		}
		uv.y += filterInt * 2.0 * cubeUV_minTileSize;
		uv.x += 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );
		uv *= texelSize;
		vec3 tl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;
		uv.x += texelSize;
		vec3 tr = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;
		uv.y += texelSize;
		vec3 br = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;
		uv.x -= texelSize;
		vec3 bl = envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;
		vec3 tm = mix( tl, tr, f.x );
		vec3 bm = mix( bl, br, f.x );
		return mix( tm, bm, f.y );
	}
	#define r0 1.0
	#define v0 0.339
	#define m0 - 2.0
	#define r1 0.8
	#define v1 0.276
	#define m1 - 1.0
	#define r4 0.4
	#define v4 0.046
	#define m4 2.0
	#define r5 0.305
	#define v5 0.016
	#define m5 3.0
	#define r6 0.21
	#define v6 0.0038
	#define m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= r1 ) {
			mip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;
		} else if ( roughness >= r4 ) {
			mip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;
		} else if ( roughness >= r5 ) {
			mip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;
		} else if ( roughness >= r6 ) {
			mip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`,xE=`vec3 transformedNormal = objectNormal;
#ifdef USE_INSTANCING
	mat3 m = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );
	transformedNormal = m * transformedNormal;
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	vec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`,yE=`#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`,_E=`#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );
#endif`,bE=`#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vUv );
	emissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`,ME=`#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`,wE="gl_FragColor = linearToOutputTexel( gl_FragColor );",SE=`
vec4 LinearToLinear( in vec4 value ) {
	return value;
}
vec4 GammaToLinear( in vec4 value, in float gammaFactor ) {
	return vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );
}
vec4 LinearToGamma( in vec4 value, in float gammaFactor ) {
	return vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );
}
vec4 sRGBToLinear( in vec4 value ) {
	return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );
}
vec4 LinearTosRGB( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}
vec4 RGBEToLinear( in vec4 value ) {
	return vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );
}
vec4 LinearToRGBE( in vec4 value ) {
	float maxComponent = max( max( value.r, value.g ), value.b );
	float fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );
	return vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );
}
vec4 RGBMToLinear( in vec4 value, in float maxRange ) {
	return vec4( value.rgb * value.a * maxRange, 1.0 );
}
vec4 LinearToRGBM( in vec4 value, in float maxRange ) {
	float maxRGB = max( value.r, max( value.g, value.b ) );
	float M = clamp( maxRGB / maxRange, 0.0, 1.0 );
	M = ceil( M * 255.0 ) / 255.0;
	return vec4( value.rgb / ( M * maxRange ), M );
}
vec4 RGBDToLinear( in vec4 value, in float maxRange ) {
	return vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );
}
vec4 LinearToRGBD( in vec4 value, in float maxRange ) {
	float maxRGB = max( value.r, max( value.g, value.b ) );
	float D = max( maxRange / maxRGB, 1.0 );
	D = clamp( floor( D ) / 255.0, 0.0, 1.0 );
	return vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );
}
const mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );
vec4 LinearToLogLuv( in vec4 value ) {
	vec3 Xp_Y_XYZp = cLogLuvM * value.rgb;
	Xp_Y_XYZp = max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );
	vec4 vResult;
	vResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;
	float Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;
	vResult.w = fract( Le );
	vResult.z = ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;
	return vResult;
}
const mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );
vec4 LogLuvToLinear( in vec4 value ) {
	float Le = value.z * 255.0 + value.w;
	vec3 Xp_Y_XYZp;
	Xp_Y_XYZp.y = exp2( ( Le - 127.0 ) / 2.0 );
	Xp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;
	Xp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;
	vec3 vRGB = cLogLuvInverseM * Xp_Y_XYZp.rgb;
	return vec4( max( vRGB, 0.0 ), 1.0 );
}`,EE=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifndef ENVMAP_TYPE_CUBE_UV
		envColor = envMapTexelToLinear( envColor );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`,TE=`#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	uniform int maxMipLevel;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`,AE=`#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`,LE=`#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`,CE=`#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`,RE=`#ifdef USE_FOG
	fogDepth = - mvPosition.z;
#endif`,PE=`#ifdef USE_FOG
	varying float fogDepth;
#endif`,IE=`#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, fogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`,DE=`#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float fogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`,NE=`#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return texture2D( gradientMap, coord ).rgb;
	#else
		return ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );
	#endif
}`,FE=`#ifdef USE_LIGHTMAP
	vec4 lightMapTexel= texture2D( lightMap, vUv2 );
	reflectedLight.indirectDiffuse += PI * lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;
#endif`,BE=`#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`,OE=`vec3 diffuse = vec3( 1.0 );
GeometricContext geometry;
geometry.position = mvPosition.xyz;
geometry.normal = normalize( transformedNormal );
geometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );
GeometricContext backGeometry;
backGeometry.position = geometry.position;
backGeometry.normal = -geometry.normal;
backGeometry.viewDir = geometry.viewDir;
vLightFront = vec3( 0.0 );
vIndirectFront = vec3( 0.0 );
#ifdef DOUBLE_SIDED
	vLightBack = vec3( 0.0 );
	vIndirectBack = vec3( 0.0 );
#endif
IncidentLight directLight;
float dotNL;
vec3 directLightColor_Diffuse;
vIndirectFront += getAmbientLightIrradiance( ambientLightColor );
vIndirectFront += getLightProbeIrradiance( lightProbe, geometry );
#ifdef DOUBLE_SIDED
	vIndirectBack += getAmbientLightIrradiance( ambientLightColor );
	vIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry );
#endif
#if NUM_POINT_LIGHTS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		getPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );
		dotNL = dot( geometry.normal, directLight.direction );
		directLightColor_Diffuse = PI * directLight.color;
		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;
		#ifdef DOUBLE_SIDED
			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;
		#endif
	}
	#pragma unroll_loop_end
#endif
#if NUM_SPOT_LIGHTS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		getSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );
		dotNL = dot( geometry.normal, directLight.direction );
		directLightColor_Diffuse = PI * directLight.color;
		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;
		#ifdef DOUBLE_SIDED
			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;
		#endif
	}
	#pragma unroll_loop_end
#endif
#if NUM_DIR_LIGHTS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		getDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );
		dotNL = dot( geometry.normal, directLight.direction );
		directLightColor_Diffuse = PI * directLight.color;
		vLightFront += saturate( dotNL ) * directLightColor_Diffuse;
		#ifdef DOUBLE_SIDED
			vLightBack += saturate( -dotNL ) * directLightColor_Diffuse;
		#endif
	}
	#pragma unroll_loop_end
#endif
#if NUM_HEMI_LIGHTS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
		vIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );
		#ifdef DOUBLE_SIDED
			vIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );
		#endif
	}
	#pragma unroll_loop_end
#endif`,zE=`uniform bool receiveShadow;
uniform vec3 ambientLightColor;
uniform vec3 lightProbe[ 9 ];
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {
	vec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	#ifndef PHYSICALLY_CORRECT_LIGHTS
		irradiance *= PI;
	#endif
	return irradiance;
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {
		directLight.color = directionalLight.color;
		directLight.direction = directionalLight.direction;
		directLight.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {
		vec3 lVector = pointLight.position - geometry.position;
		directLight.direction = normalize( lVector );
		float lightDistance = length( lVector );
		directLight.color = pointLight.color;
		directLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );
		directLight.visible = ( directLight.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight ) {
		vec3 lVector = spotLight.position - geometry.position;
		directLight.direction = normalize( lVector );
		float lightDistance = length( lVector );
		float angleCos = dot( directLight.direction, spotLight.direction );
		if ( angleCos > spotLight.coneCos ) {
			float spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );
			directLight.color = spotLight.color;
			directLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );
			directLight.visible = true;
		} else {
			directLight.color = vec3( 0.0 );
			directLight.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {
		float dotNL = dot( geometry.normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		#ifndef PHYSICALLY_CORRECT_LIGHTS
			irradiance *= PI;
		#endif
		return irradiance;
	}
#endif`,UE=`#if defined( USE_ENVMAP )
	#ifdef ENVMAP_MODE_REFRACTION
		uniform float refractionRatio;
	#endif
	vec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {
		vec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );
		#ifdef ENVMAP_TYPE_CUBE
			vec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );
			#ifdef TEXTURE_LOD_EXT
				vec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );
			#else
				vec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );
			#endif
			envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;
		#elif defined( ENVMAP_TYPE_CUBE_UV )
			vec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );
		#else
			vec4 envMapColor = vec4( 0.0 );
		#endif
		return PI * envMapColor.rgb * envMapIntensity;
	}
	float getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {
		float maxMIPLevelScalar = float( maxMIPLevel );
		float sigma = PI * roughness * roughness / ( 1.0 + roughness );
		float desiredMIPLevel = maxMIPLevelScalar + log2( sigma );
		return clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );
	}
	vec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( -viewDir, normal );
			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
		#else
			vec3 reflectVec = refract( -viewDir, normal, refractionRatio );
		#endif
		reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
		float specularMIPLevel = getSpecularMIPLevel( roughness, maxMIPLevel );
		#ifdef ENVMAP_TYPE_CUBE
			vec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );
			#ifdef TEXTURE_LOD_EXT
				vec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );
			#else
				vec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );
			#endif
			envMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;
		#elif defined( ENVMAP_TYPE_CUBE_UV )
			vec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );
		#endif
		return envMapColor.rgb * envMapIntensity;
	}
#endif`,HE=`ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`,GE=`varying vec3 vViewPosition;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;
	#ifndef PHYSICALLY_CORRECT_LIGHTS
		irradiance *= PI;
	#endif
	reflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon
#define Material_LightProbeLOD( material )	(0)`,kE=`BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`,VE=`varying vec3 vViewPosition;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifndef PHYSICALLY_CORRECT_LIGHTS
		irradiance *= PI;
	#endif
	reflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong
#define Material_LightProbeLOD( material )	(0)`,WE=`PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.specularRoughness = max( roughnessFactor, 0.0525 );material.specularRoughness += geometryRoughness;
material.specularRoughness = min( material.specularRoughness, 1.0 );
#ifdef REFLECTIVITY
	material.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );
#endif
#ifdef CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheen;
#endif`,$E=`struct PhysicalMaterial {
	vec3 diffuseColor;
	float specularRoughness;
	vec3 specularColor;
#ifdef CLEARCOAT
	float clearcoat;
	float clearcoatRoughness;
#endif
#ifdef USE_SHEEN
	vec3 sheenColor;
#endif
};
#define MAXIMUM_SPECULAR_COEFFICIENT 0.16
#define DEFAULT_SPECULAR_COEFFICIENT 0.04
float clearcoatDHRApprox( const in float roughness, const in float dotNL ) {
	return DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometry.normal;
		vec3 viewDir = geometry.viewDir;
		vec3 position = geometry.position;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.specularRoughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometry.normal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifndef PHYSICALLY_CORRECT_LIGHTS
		irradiance *= PI;
	#endif
	#ifdef CLEARCOAT
		float ccDotNL = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = ccDotNL * directLight.color;
		#ifndef PHYSICALLY_CORRECT_LIGHTS
			ccIrradiance *= PI;
		#endif
		float clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );
		reflectedLight.directSpecular += ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );
	#else
		float clearcoatDHR = 0.0;
	#endif
	#ifdef USE_SHEEN
		reflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(
			material.specularRoughness,
			directLight.direction,
			geometry,
			material.sheenColor
		);
	#else
		reflectedLight.directSpecular += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);
	#endif
	reflectedLight.directDiffuse += ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef CLEARCOAT
		float ccDotNV = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );
		reflectedLight.indirectSpecular += clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );
		float ccDotNL = ccDotNV;
		float clearcoatDHR = material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );
	#else
		float clearcoatDHR = 0.0;
	#endif
	float clearcoatInv = 1.0 - clearcoatDHR;
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	BRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );
	vec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );
	reflectedLight.indirectSpecular += clearcoatInv * radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`,qE=`
GeometricContext geometry;
geometry.position = - vViewPosition;
geometry.normal = normal;
geometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
#ifdef CLEARCOAT
	geometry.clearcoatNormal = clearcoatNormal;
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointDirectLightIrradiance( pointLight, geometry, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotDirectLightIrradiance( spotLight, geometry, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	irradiance += getLightProbeIrradiance( lightProbe, geometry );
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`,jE=`#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel= texture2D( lightMap, vUv2 );
		vec3 lightMapIrradiance = lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;
		#ifndef PHYSICALLY_CORRECT_LIGHTS
			lightMapIrradiance *= PI;
		#endif
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getLightProbeIndirectIrradiance( geometry, maxMipLevel );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	radiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );
	#ifdef CLEARCOAT
		clearcoatRadiance += getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );
	#endif
#endif`,XE=`#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );
#endif`,YE=`#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	gl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`,ZE=`#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`,JE=`#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		varying float vFragDepth;
		varying float vIsPerspective;
	#else
		uniform float logDepthBufFC;
	#endif
#endif`,QE=`#ifdef USE_LOGDEPTHBUF
	#ifdef USE_LOGDEPTHBUF_EXT
		vFragDepth = 1.0 + gl_Position.w;
		vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
	#else
		if ( isPerspectiveMatrix( projectionMatrix ) ) {
			gl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;
			gl_Position.z *= gl_Position.w;
		}
	#endif
#endif`,KE=`#ifdef USE_MAP
	vec4 texelColor = texture2D( map, vUv );
	texelColor = mapTexelToLinear( texelColor );
	diffuseColor *= texelColor;
#endif`,tT=`#ifdef USE_MAP
	uniform sampler2D map;
#endif`,eT=`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
#endif
#ifdef USE_MAP
	vec4 mapTexel = texture2D( map, uv );
	diffuseColor *= mapTexelToLinear( mapTexel );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`,nT=`#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	uniform mat3 uvTransform;
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`,iT=`float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vUv );
	metalnessFactor *= texelMetalness.b;
#endif`,rT=`#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`,sT=`#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	objectNormal += morphNormal0 * morphTargetInfluences[ 0 ];
	objectNormal += morphNormal1 * morphTargetInfluences[ 1 ];
	objectNormal += morphNormal2 * morphTargetInfluences[ 2 ];
	objectNormal += morphNormal3 * morphTargetInfluences[ 3 ];
#endif`,oT=`#ifdef USE_MORPHTARGETS
	uniform float morphTargetBaseInfluence;
	#ifndef USE_MORPHNORMALS
		uniform float morphTargetInfluences[ 8 ];
	#else
		uniform float morphTargetInfluences[ 4 ];
	#endif
#endif`,aT=`#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	transformed += morphTarget0 * morphTargetInfluences[ 0 ];
	transformed += morphTarget1 * morphTargetInfluences[ 1 ];
	transformed += morphTarget2 * morphTargetInfluences[ 2 ];
	transformed += morphTarget3 * morphTargetInfluences[ 3 ];
	#ifndef USE_MORPHNORMALS
		transformed += morphTarget4 * morphTargetInfluences[ 4 ];
		transformed += morphTarget5 * morphTargetInfluences[ 5 ];
		transformed += morphTarget6 * morphTargetInfluences[ 6 ];
		transformed += morphTarget7 * morphTargetInfluences[ 7 ];
	#endif
#endif`,lT=`#ifdef FLAT_SHADED
	vec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );
	vec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );
	#endif
	#ifdef USE_TANGENT
		vec3 tangent = normalize( vTangent );
		vec3 bitangent = normalize( vBitangent );
		#ifdef DOUBLE_SIDED
			tangent = tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );
			bitangent = bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );
		#endif
		#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )
			mat3 vTBN = mat3( tangent, bitangent, normal );
		#endif
	#endif
#endif
vec3 geometryNormal = normal;`,cT=`#ifdef OBJECTSPACE_NORMALMAP
	normal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( TANGENTSPACE_NORMALMAP )
	vec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	#ifdef USE_TANGENT
		normal = normalize( vTBN * mapN );
	#else
		normal = perturbNormal2Arb( -vViewPosition, normal, mapN );
	#endif
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );
#endif`,hT=`#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef OBJECTSPACE_NORMALMAP
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )
	vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN ) {
		vec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );
		vec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );
		vec2 st0 = dFdx( vUv.st );
		vec2 st1 = dFdy( vUv.st );
		float scale = sign( st1.t * st0.s - st0.t * st1.s );
		vec3 S = normalize( ( q0 * st1.t - q1 * st0.t ) * scale );
		vec3 T = normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );
		vec3 N = normalize( surf_norm );
		mat3 tsn = mat3( S, T, N );
		mapN.xy *= ( float( gl_FrontFacing ) * 2.0 - 1.0 );
		return normalize( tsn * mapN );
	}
#endif`,uT=`#ifdef CLEARCOAT
	vec3 clearcoatNormal = geometryNormal;
#endif`,dT=`#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	#ifdef USE_TANGENT
		clearcoatNormal = normalize( vTBN * clearcoatMapN );
	#else
		clearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN );
	#endif
#endif`,fT=`#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif`,pT=`vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;
const vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );
const vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );
const float ShiftRight8 = 1. / 256.;
vec4 packDepthToRGBA( const in float v ) {
	vec4 r = vec4( fract( v * PackFactors ), v );
	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors );
}
vec4 pack2HalfToRGBA( vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);
}
vec2 unpackRGBATo2Half( vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {
	return linearClipZ * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return (( near + viewZ ) * far ) / (( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * invClipZ - far );
}`,mT=`#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`,gT=`vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`,vT=`#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`,xT=`#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`,yT=`float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vUv );
	roughnessFactor *= texelRoughness.g;
#endif`,_T=`#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`,bT=`#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		float hard_shadow = step( compare , distribution.x );
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );
		bool inFrustum = all( inFrustumVec );
		bvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );
		bool frustumTest = all( frustumTestVec );
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), 
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), 
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), 
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), 
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), 
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), 
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return shadow;
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
		vec3 lightToPosition = shadowCoord.xyz;
		float dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );		dp += shadowBias;
		vec3 bd3D = normalize( lightToPosition );
		#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
			vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
			return (
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
				texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
			) * ( 1.0 / 9.0 );
		#else
			return texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
		#endif
	}
#endif`,MT=`#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];
		varying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`,wT=`#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0
		vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		vec4 shadowWorldPosition;
	#endif
	#if NUM_DIR_LIGHT_SHADOWS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
		vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );
		vSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
		vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
	#endif
#endif`,ST=`float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`,ET=`#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`,TT=`#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	#ifdef BONE_TEXTURE
		uniform highp sampler2D boneTexture;
		uniform int boneTextureSize;
		mat4 getBoneMatrix( const in float i ) {
			float j = i * 4.0;
			float x = mod( j, float( boneTextureSize ) );
			float y = floor( j / float( boneTextureSize ) );
			float dx = 1.0 / float( boneTextureSize );
			float dy = 1.0 / float( boneTextureSize );
			y = dy * ( y + 0.5 );
			vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );
			vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );
			vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );
			vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );
			mat4 bone = mat4( v1, v2, v3, v4 );
			return bone;
		}
	#else
		uniform mat4 boneMatrices[ MAX_BONES ];
		mat4 getBoneMatrix( const in float i ) {
			mat4 bone = boneMatrices[ int(i) ];
			return bone;
		}
	#endif
#endif`,AT=`#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`,LT=`#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`,CT=`float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`,RT=`#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`,PT=`#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`,IT=`#ifndef saturate
#define saturate(a) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return toneMappingExposure * color;
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 OptimizedCineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
vec3 CustomToneMapping( vec3 color ) { return color; }`,DT=`#ifdef USE_TRANSMISSIONMAP
	totalTransmission *= texture2D( transmissionMap, vUv ).r;
#endif`,NT=`#ifdef USE_TRANSMISSIONMAP
	uniform sampler2D transmissionMap;
#endif`,FT=`#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )
	varying vec2 vUv;
#endif`,BT=`#ifdef USE_UV
	#ifdef UVS_VERTEX_ONLY
		vec2 vUv;
	#else
		varying vec2 vUv;
	#endif
	uniform mat3 uvTransform;
#endif`,OT=`#ifdef USE_UV
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
#endif`,zT=`#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )
	varying vec2 vUv2;
#endif`,UT=`#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )
	attribute vec2 uv2;
	varying vec2 vUv2;
	uniform mat3 uv2Transform;
#endif`,HT=`#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )
	vUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;
#endif`,GT=`#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`,kT=`uniform sampler2D t2D;
varying vec2 vUv;
void main() {
	vec4 texColor = texture2D( t2D, vUv );
	gl_FragColor = mapTexelToLinear( texColor );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,VT=`varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`,WT=`#include <envmap_common_pars_fragment>
uniform float opacity;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	vec3 vReflect = vWorldDirection;
	#include <envmap_fragment>
	gl_FragColor = envColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,$T=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`,qT=`#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( 1.0 );
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <logdepthbuf_fragment>
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#endif
}`,jT=`#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <skinbase_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`,XT=`#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( 1.0 );
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`,YT=`#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <skinbase_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`,ZT=`uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	vec4 texColor = texture2D( tEquirect, sampleUV );
	gl_FragColor = mapTexelToLinear( texColor );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
}`,JT=`varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`,QT=`uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	gl_FragColor = vec4( outgoingLight, diffuseColor.a );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,KT=`uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <color_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`,tA=`uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <cube_uv_reflection_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
	
		vec4 lightMapTexel= texture2D( lightMap, vUv2 );
		reflectedLight.indirectDiffuse += lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	gl_FragColor = vec4( outgoingLight, diffuseColor.a );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,eA=`#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <skinbase_vertex>
	#ifdef USE_ENVMAP
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`,nA=`uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
varying vec3 vLightFront;
varying vec3 vIndirectFront;
#ifdef DOUBLE_SIDED
	varying vec3 vLightBack;
	varying vec3 vIndirectBack;
#endif
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <cube_uv_reflection_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <fog_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	#include <emissivemap_fragment>
	#ifdef DOUBLE_SIDED
		reflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;
	#else
		reflectedLight.indirectDiffuse += vIndirectFront;
	#endif
	#include <lightmap_fragment>
	reflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );
	#ifdef DOUBLE_SIDED
		reflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;
	#else
		reflectedLight.directDiffuse = vLightFront;
	#endif
	reflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	gl_FragColor = vec4( outgoingLight, diffuseColor.a );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,iA=`#define LAMBERT
varying vec3 vLightFront;
varying vec3 vIndirectFront;
#ifdef DOUBLE_SIDED
	varying vec3 vLightBack;
	varying vec3 vIndirectBack;
#endif
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <envmap_pars_vertex>
#include <bsdfs>
#include <lights_pars_begin>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <lights_lambert_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,rA=`#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <fog_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
		matcapColor = matcapTexelToLinear( matcapColor );
	#else
		vec4 matcapColor = vec4( 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	gl_FragColor = vec4( outgoingLight, diffuseColor.a );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,sA=`#define MATCAP
varying vec3 vViewPosition;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#ifndef FLAT_SHADED
		vNormal = normalize( transformedNormal );
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`,oA=`#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	gl_FragColor = vec4( outgoingLight, diffuseColor.a );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,aA=`#define TOON
varying vec3 vViewPosition;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,lA=`#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <cube_uv_reflection_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	gl_FragColor = vec4( outgoingLight, diffuseColor.a );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,cA=`#define PHONG
varying vec3 vViewPosition;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,hA=`#define STANDARD
#ifdef PHYSICAL
	#define REFLECTIVITY
	#define CLEARCOAT
	#define TRANSMISSION
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef TRANSMISSION
	uniform float transmission;
#endif
#ifdef REFLECTIVITY
	uniform float reflectivity;
#endif
#ifdef CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheen;
#endif
varying vec3 vViewPosition;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <uv2_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <transmissionmap_pars_fragment>
#include <bsdfs>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <lights_physical_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec4 diffuseColor = vec4( diffuse, opacity );
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#ifdef TRANSMISSION
		float totalTransmission = transmission;
	#endif
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <transmissionmap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#ifdef TRANSMISSION
		diffuseColor.a *= mix( saturate( 1. - totalTransmission + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) ), 1.0, metalness );
	#endif
	gl_FragColor = vec4( outgoingLight, diffuseColor.a );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,uA=`#define STANDARD
varying vec3 vViewPosition;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif
#include <common>
#include <uv_pars_vertex>
#include <uv2_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <uv2_vertex>
	#include <color_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,dA=`#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )
	varying vec3 vViewPosition;
#endif
#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif
#include <packing>
#include <uv_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), opacity );
}`,fA=`#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )
	varying vec3 vViewPosition;
#endif
#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif
#include <common>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )
	vViewPosition = - mvPosition.xyz;
#endif
}`,pA=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	outgoingLight = diffuseColor.rgb;
	gl_FragColor = vec4( outgoingLight, diffuseColor.a );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`,mA=`uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <color_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`,gA=`uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
}`,vA=`#include <common>
#include <fog_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <begin_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`,xA=`uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	outgoingLight = diffuseColor.rgb;
	gl_FragColor = vec4( outgoingLight, diffuseColor.a );
	#include <tonemapping_fragment>
	#include <encodings_fragment>
	#include <fog_fragment>
}`,yA=`uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );
	vec2 scale;
	scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );
	scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`;const Jt={alphamap_fragment:K1,alphamap_pars_fragment:tE,alphatest_fragment:eE,aomap_fragment:nE,aomap_pars_fragment:iE,begin_vertex:rE,beginnormal_vertex:sE,bsdfs:oE,bumpmap_pars_fragment:aE,clipping_planes_fragment:lE,clipping_planes_pars_fragment:cE,clipping_planes_pars_vertex:hE,clipping_planes_vertex:uE,color_fragment:dE,color_pars_fragment:fE,color_pars_vertex:pE,color_vertex:mE,common:gE,cube_uv_reflection_fragment:vE,defaultnormal_vertex:xE,displacementmap_pars_vertex:yE,displacementmap_vertex:_E,emissivemap_fragment:bE,emissivemap_pars_fragment:ME,encodings_fragment:wE,encodings_pars_fragment:SE,envmap_fragment:EE,envmap_common_pars_fragment:TE,envmap_pars_fragment:AE,envmap_pars_vertex:LE,envmap_physical_pars_fragment:UE,envmap_vertex:CE,fog_vertex:RE,fog_pars_vertex:PE,fog_fragment:IE,fog_pars_fragment:DE,gradientmap_pars_fragment:NE,lightmap_fragment:FE,lightmap_pars_fragment:BE,lights_lambert_vertex:OE,lights_pars_begin:zE,lights_toon_fragment:HE,lights_toon_pars_fragment:GE,lights_phong_fragment:kE,lights_phong_pars_fragment:VE,lights_physical_fragment:WE,lights_physical_pars_fragment:$E,lights_fragment_begin:qE,lights_fragment_maps:jE,lights_fragment_end:XE,logdepthbuf_fragment:YE,logdepthbuf_pars_fragment:ZE,logdepthbuf_pars_vertex:JE,logdepthbuf_vertex:QE,map_fragment:KE,map_pars_fragment:tT,map_particle_fragment:eT,map_particle_pars_fragment:nT,metalnessmap_fragment:iT,metalnessmap_pars_fragment:rT,morphnormal_vertex:sT,morphtarget_pars_vertex:oT,morphtarget_vertex:aT,normal_fragment_begin:lT,normal_fragment_maps:cT,normalmap_pars_fragment:hT,clearcoat_normal_fragment_begin:uT,clearcoat_normal_fragment_maps:dT,clearcoat_pars_fragment:fT,packing:pT,premultiplied_alpha_fragment:mT,project_vertex:gT,dithering_fragment:vT,dithering_pars_fragment:xT,roughnessmap_fragment:yT,roughnessmap_pars_fragment:_T,shadowmap_pars_fragment:bT,shadowmap_pars_vertex:MT,shadowmap_vertex:wT,shadowmask_pars_fragment:ST,skinbase_vertex:ET,skinning_pars_vertex:TT,skinning_vertex:AT,skinnormal_vertex:LT,specularmap_fragment:CT,specularmap_pars_fragment:RT,tonemapping_fragment:PT,tonemapping_pars_fragment:IT,transmissionmap_fragment:DT,transmissionmap_pars_fragment:NT,uv_pars_fragment:FT,uv_pars_vertex:BT,uv_vertex:OT,uv2_pars_fragment:zT,uv2_pars_vertex:UT,uv2_vertex:HT,worldpos_vertex:GT,background_frag:kT,background_vert:VT,cube_frag:WT,cube_vert:$T,depth_frag:qT,depth_vert:jT,distanceRGBA_frag:XT,distanceRGBA_vert:YT,equirect_frag:ZT,equirect_vert:JT,linedashed_frag:QT,linedashed_vert:KT,meshbasic_frag:tA,meshbasic_vert:eA,meshlambert_frag:nA,meshlambert_vert:iA,meshmatcap_frag:rA,meshmatcap_vert:sA,meshtoon_frag:oA,meshtoon_vert:aA,meshphong_frag:lA,meshphong_vert:cA,meshphysical_frag:hA,meshphysical_vert:uA,normal_frag:dA,normal_vert:fA,points_frag:pA,points_vert:mA,shadow_frag:gA,shadow_vert:vA,sprite_frag:xA,sprite_vert:yA},Rt={common:{diffuse:{value:new Ot(15658734)},opacity:{value:1},map:{value:null},uvTransform:{value:new nn},uv2Transform:{value:new nn},alphaMap:{value:null}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},refractionRatio:{value:.98},maxMipLevel:{value:0}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new wt(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new Ot(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new Ot(15658734)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},uvTransform:{value:new nn}},sprite:{diffuse:{value:new Ot(15658734)},opacity:{value:1},center:{value:new wt(.5,.5)},rotation:{value:0},map:{value:null},alphaMap:{value:null},uvTransform:{value:new nn}}},qn={basic:{uniforms:qe([Rt.common,Rt.specularmap,Rt.envmap,Rt.aomap,Rt.lightmap,Rt.fog]),vertexShader:Jt.meshbasic_vert,fragmentShader:Jt.meshbasic_frag},lambert:{uniforms:qe([Rt.common,Rt.specularmap,Rt.envmap,Rt.aomap,Rt.lightmap,Rt.emissivemap,Rt.fog,Rt.lights,{emissive:{value:new Ot(0)}}]),vertexShader:Jt.meshlambert_vert,fragmentShader:Jt.meshlambert_frag},phong:{uniforms:qe([Rt.common,Rt.specularmap,Rt.envmap,Rt.aomap,Rt.lightmap,Rt.emissivemap,Rt.bumpmap,Rt.normalmap,Rt.displacementmap,Rt.fog,Rt.lights,{emissive:{value:new Ot(0)},specular:{value:new Ot(1118481)},shininess:{value:30}}]),vertexShader:Jt.meshphong_vert,fragmentShader:Jt.meshphong_frag},standard:{uniforms:qe([Rt.common,Rt.envmap,Rt.aomap,Rt.lightmap,Rt.emissivemap,Rt.bumpmap,Rt.normalmap,Rt.displacementmap,Rt.roughnessmap,Rt.metalnessmap,Rt.fog,Rt.lights,{emissive:{value:new Ot(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:Jt.meshphysical_vert,fragmentShader:Jt.meshphysical_frag},toon:{uniforms:qe([Rt.common,Rt.aomap,Rt.lightmap,Rt.emissivemap,Rt.bumpmap,Rt.normalmap,Rt.displacementmap,Rt.gradientmap,Rt.fog,Rt.lights,{emissive:{value:new Ot(0)}}]),vertexShader:Jt.meshtoon_vert,fragmentShader:Jt.meshtoon_frag},matcap:{uniforms:qe([Rt.common,Rt.bumpmap,Rt.normalmap,Rt.displacementmap,Rt.fog,{matcap:{value:null}}]),vertexShader:Jt.meshmatcap_vert,fragmentShader:Jt.meshmatcap_frag},points:{uniforms:qe([Rt.points,Rt.fog]),vertexShader:Jt.points_vert,fragmentShader:Jt.points_frag},dashed:{uniforms:qe([Rt.common,Rt.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:Jt.linedashed_vert,fragmentShader:Jt.linedashed_frag},depth:{uniforms:qe([Rt.common,Rt.displacementmap]),vertexShader:Jt.depth_vert,fragmentShader:Jt.depth_frag},normal:{uniforms:qe([Rt.common,Rt.bumpmap,Rt.normalmap,Rt.displacementmap,{opacity:{value:1}}]),vertexShader:Jt.normal_vert,fragmentShader:Jt.normal_frag},sprite:{uniforms:qe([Rt.sprite,Rt.fog]),vertexShader:Jt.sprite_vert,fragmentShader:Jt.sprite_frag},background:{uniforms:{uvTransform:{value:new nn},t2D:{value:null}},vertexShader:Jt.background_vert,fragmentShader:Jt.background_frag},cube:{uniforms:qe([Rt.envmap,{opacity:{value:1}}]),vertexShader:Jt.cube_vert,fragmentShader:Jt.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:Jt.equirect_vert,fragmentShader:Jt.equirect_frag},distanceRGBA:{uniforms:qe([Rt.common,Rt.displacementmap,{referencePosition:{value:new H},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:Jt.distanceRGBA_vert,fragmentShader:Jt.distanceRGBA_frag},shadow:{uniforms:qe([Rt.lights,Rt.fog,{color:{value:new Ot(0)},opacity:{value:1}}]),vertexShader:Jt.shadow_vert,fragmentShader:Jt.shadow_frag}};qn.physical={uniforms:qe([qn.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatNormalScale:{value:new wt(1,1)},clearcoatNormalMap:{value:null},sheen:{value:new Ot(0)},transmission:{value:0},transmissionMap:{value:null}}]),vertexShader:Jt.meshphysical_vert,fragmentShader:Jt.meshphysical_frag};function _A(n,t,e,i,r){const s=new Ot(0);let o=0,a,l,c=null,h=0,u=null;function d(g,v,x,m){let p=v.isScene===!0?v.background:null;p&&p.isTexture&&(p=t.get(p));const b=n.xr,_=b.getSession&&b.getSession();_&&_.environmentBlendMode==="additive"&&(p=null),p===null?f(s,o):p&&p.isColor&&(f(p,1),m=!0),(n.autoClear||m)&&n.clear(n.autoClearColor,n.autoClearDepth,n.autoClearStencil),p&&(p.isCubeTexture||p.isWebGLCubeRenderTarget||p.mapping===Vh)?(l===void 0&&(l=new $e(new Cm(1,1,1),new rn({name:"BackgroundCubeMaterial",uniforms:Ns(qn.cube.uniforms),vertexShader:qn.cube.vertexShader,fragmentShader:qn.cube.fragmentShader,side:Ne,depthTest:!1,depthWrite:!1,fog:!1})),l.geometry.deleteAttribute("normal"),l.geometry.deleteAttribute("uv"),l.onBeforeRender=function(w,E,S){this.matrixWorld.copyPosition(S.matrixWorld)},Object.defineProperty(l.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),i.update(l)),p.isWebGLCubeRenderTarget&&(p=p.texture),l.material.uniforms.envMap.value=p,l.material.uniforms.flipEnvMap.value=p.isCubeTexture&&p._needsFlipEnvMap?-1:1,(c!==p||h!==p.version||u!==n.toneMapping)&&(l.material.needsUpdate=!0,c=p,h=p.version,u=n.toneMapping),g.unshift(l,l.geometry,l.material,0,0,null)):p&&p.isTexture&&(a===void 0&&(a=new $e(new Q1(2,2),new rn({name:"BackgroundMaterial",uniforms:Ns(qn.background.uniforms),vertexShader:qn.background.vertexShader,fragmentShader:qn.background.fragmentShader,side:pl,depthTest:!1,depthWrite:!1,fog:!1})),a.geometry.deleteAttribute("normal"),Object.defineProperty(a.material,"map",{get:function(){return this.uniforms.t2D.value}}),i.update(a)),a.material.uniforms.t2D.value=p,p.matrixAutoUpdate===!0&&p.updateMatrix(),a.material.uniforms.uvTransform.value.copy(p.matrix),(c!==p||h!==p.version||u!==n.toneMapping)&&(a.material.needsUpdate=!0,c=p,h=p.version,u=n.toneMapping),g.unshift(a,a.geometry,a.material,0,0,null))}function f(g,v){e.buffers.color.setClear(g.r,g.g,g.b,v,r)}return{getClearColor:function(){return s},setClearColor:function(g,v){s.set(g),o=v!==void 0?v:1,f(s,o)},getClearAlpha:function(){return o},setClearAlpha:function(g){o=g,f(s,o)},render:d}}function bA(n,t,e,i){const r=n.getParameter(34921),s=i.isWebGL2?null:t.get("OES_vertex_array_object"),o=i.isWebGL2||s!==null,a={},l=v(null);let c=l;function h(I,N,C,L,F){let q=!1;if(o){const ot=g(L,C,N);c!==ot&&(c=ot,d(c.object)),q=x(L,F),q&&m(L,F)}else{const ot=N.wireframe===!0;(c.geometry!==L.id||c.program!==C.id||c.wireframe!==ot)&&(c.geometry=L.id,c.program=C.id,c.wireframe=ot,q=!0)}I.isInstancedMesh===!0&&(q=!0),F!==null&&e.update(F,34963),q&&(S(I,N,C,L),F!==null&&n.bindBuffer(34963,e.get(F).buffer))}function u(){return i.isWebGL2?n.createVertexArray():s.createVertexArrayOES()}function d(I){return i.isWebGL2?n.bindVertexArray(I):s.bindVertexArrayOES(I)}function f(I){return i.isWebGL2?n.deleteVertexArray(I):s.deleteVertexArrayOES(I)}function g(I,N,C){const L=C.wireframe===!0;let F=a[I.id];F===void 0&&(F={},a[I.id]=F);let q=F[N.id];q===void 0&&(q={},F[N.id]=q);let ot=q[L];return ot===void 0&&(ot=v(u()),q[L]=ot),ot}function v(I){const N=[],C=[],L=[];for(let F=0;F<r;F++)N[F]=0,C[F]=0,L[F]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:N,enabledAttributes:C,attributeDivisors:L,object:I,attributes:{},index:null}}function x(I,N){const C=c.attributes,L=I.attributes;if(Object.keys(C).length!==Object.keys(L).length)return!0;for(const F in L){const q=C[F],ot=L[F];if(q===void 0||q.attribute!==ot||q.data!==ot.data)return!0}return c.index!==N}function m(I,N){const C={},L=I.attributes;for(const F in L){const q=L[F],ot={};ot.attribute=q,q.data&&(ot.data=q.data),C[F]=ot}c.attributes=C,c.index=N}function p(){const I=c.newAttributes;for(let N=0,C=I.length;N<C;N++)I[N]=0}function b(I){_(I,0)}function _(I,N){const C=c.newAttributes,L=c.enabledAttributes,F=c.attributeDivisors;C[I]=1,L[I]===0&&(n.enableVertexAttribArray(I),L[I]=1),F[I]!==N&&((i.isWebGL2?n:t.get("ANGLE_instanced_arrays"))[i.isWebGL2?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](I,N),F[I]=N)}function w(){const I=c.newAttributes,N=c.enabledAttributes;for(let C=0,L=N.length;C<L;C++)N[C]!==I[C]&&(n.disableVertexAttribArray(C),N[C]=0)}function E(I,N,C,L,F,q){i.isWebGL2===!0&&(C===5124||C===5125)?n.vertexAttribIPointer(I,N,C,F,q):n.vertexAttribPointer(I,N,C,L,F,q)}function S(I,N,C,L){if(i.isWebGL2===!1&&(I.isInstancedMesh||L.isInstancedBufferGeometry)&&t.get("ANGLE_instanced_arrays")===null)return;p();const F=L.attributes,q=C.getAttributes(),ot=N.defaultAttributeValues;for(const pt in q){const rt=q[pt];if(rt>=0){const Et=F[pt];if(Et!==void 0){const it=Et.normalized,vt=Et.itemSize,Y=e.get(Et);if(Y===void 0)continue;const st=Y.buffer,_t=Y.type,Lt=Y.bytesPerElement;if(Et.isInterleavedBufferAttribute){const yt=Et.data,St=yt.stride,At=Et.offset;yt&&yt.isInstancedInterleavedBuffer?(_(rt,yt.meshPerAttribute),L._maxInstanceCount===void 0&&(L._maxInstanceCount=yt.meshPerAttribute*yt.count)):b(rt),n.bindBuffer(34962,st),E(rt,vt,_t,it,St*Lt,At*Lt)}else Et.isInstancedBufferAttribute?(_(rt,Et.meshPerAttribute),L._maxInstanceCount===void 0&&(L._maxInstanceCount=Et.meshPerAttribute*Et.count)):b(rt),n.bindBuffer(34962,st),E(rt,vt,_t,it,0,0)}else if(pt==="instanceMatrix"){const it=e.get(I.instanceMatrix);if(it===void 0)continue;const vt=it.buffer,Y=it.type;_(rt+0,1),_(rt+1,1),_(rt+2,1),_(rt+3,1),n.bindBuffer(34962,vt),n.vertexAttribPointer(rt+0,4,Y,!1,64,0),n.vertexAttribPointer(rt+1,4,Y,!1,64,16),n.vertexAttribPointer(rt+2,4,Y,!1,64,32),n.vertexAttribPointer(rt+3,4,Y,!1,64,48)}else if(pt==="instanceColor"){const it=e.get(I.instanceColor);if(it===void 0)continue;const vt=it.buffer,Y=it.type;_(rt,1),n.bindBuffer(34962,vt),n.vertexAttribPointer(rt,3,Y,!1,12,0)}else if(ot!==void 0){const it=ot[pt];if(it!==void 0)switch(it.length){case 2:n.vertexAttrib2fv(rt,it);break;case 3:n.vertexAttrib3fv(rt,it);break;case 4:n.vertexAttrib4fv(rt,it);break;default:n.vertexAttrib1fv(rt,it)}}}}w()}function R(){T();for(const I in a){const N=a[I];for(const C in N){const L=N[C];for(const F in L)f(L[F].object),delete L[F];delete N[C]}delete a[I]}}function W(I){if(a[I.id]===void 0)return;const N=a[I.id];for(const C in N){const L=N[C];for(const F in L)f(L[F].object),delete L[F];delete N[C]}delete a[I.id]}function B(I){for(const N in a){const C=a[N];if(C[I.id]===void 0)continue;const L=C[I.id];for(const F in L)f(L[F].object),delete L[F];delete C[I.id]}}function T(){k(),c!==l&&(c=l,d(c.object))}function k(){l.geometry=null,l.program=null,l.wireframe=!1}return{setup:h,reset:T,resetDefaultState:k,dispose:R,releaseStatesOfGeometry:W,releaseStatesOfProgram:B,initAttributes:p,enableAttribute:b,disableUnusedAttributes:w}}function MA(n,t,e,i){const r=i.isWebGL2;let s;function o(c){s=c}function a(c,h){n.drawArrays(s,c,h),e.update(h,s,1)}function l(c,h,u){if(u===0)return;let d,f;if(r)d=n,f="drawArraysInstanced";else if(d=t.get("ANGLE_instanced_arrays"),f="drawArraysInstancedANGLE",d===null){console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}d[f](s,c,h,u),e.update(h,s,u)}this.setMode=o,this.render=a,this.renderInstances=l}function wA(n,t,e){let i;function r(){if(i!==void 0)return i;const E=t.get("EXT_texture_filter_anisotropic");return E!==null?i=n.getParameter(E.MAX_TEXTURE_MAX_ANISOTROPY_EXT):i=0,i}function s(E){if(E==="highp"){if(n.getShaderPrecisionFormat(35633,36338).precision>0&&n.getShaderPrecisionFormat(35632,36338).precision>0)return"highp";E="mediump"}return E==="mediump"&&n.getShaderPrecisionFormat(35633,36337).precision>0&&n.getShaderPrecisionFormat(35632,36337).precision>0?"mediump":"lowp"}const o=typeof WebGL2RenderingContext!="undefined"&&n instanceof WebGL2RenderingContext||typeof WebGL2ComputeRenderingContext!="undefined"&&n instanceof WebGL2ComputeRenderingContext;let a=e.precision!==void 0?e.precision:"highp";const l=s(a);l!==a&&(console.warn("THREE.WebGLRenderer:",a,"not supported, using",l,"instead."),a=l);const c=e.logarithmicDepthBuffer===!0,h=n.getParameter(34930),u=n.getParameter(35660),d=n.getParameter(3379),f=n.getParameter(34076),g=n.getParameter(34921),v=n.getParameter(36347),x=n.getParameter(36348),m=n.getParameter(36349),p=u>0,b=o||!!t.get("OES_texture_float"),_=p&&b,w=o?n.getParameter(36183):0;return{isWebGL2:o,getMaxAnisotropy:r,getMaxPrecision:s,precision:a,logarithmicDepthBuffer:c,maxTextures:h,maxVertexTextures:u,maxTextureSize:d,maxCubemapSize:f,maxAttributes:g,maxVertexUniforms:v,maxVaryings:x,maxFragmentUniforms:m,vertexTextures:p,floatFragmentTextures:b,floatVertexTextures:_,maxSamples:w}}function SA(n){const t=this;let e=null,i=0,r=!1,s=!1;const o=new fi,a=new nn,l={value:null,needsUpdate:!1};this.uniform=l,this.numPlanes=0,this.numIntersection=0,this.init=function(u,d,f){const g=u.length!==0||d||i!==0||r;return r=d,e=h(u,f,0),i=u.length,g},this.beginShadows=function(){s=!0,h(null)},this.endShadows=function(){s=!1,c()},this.setState=function(u,d,f){const g=u.clippingPlanes,v=u.clipIntersection,x=u.clipShadows,m=n.get(u);if(!r||g===null||g.length===0||s&&!x)s?h(null):c();else{const p=s?0:i,b=p*4;let _=m.clippingState||null;l.value=_,_=h(g,d,b,f);for(let w=0;w!==b;++w)_[w]=e[w];m.clippingState=_,this.numIntersection=v?this.numPlanes:0,this.numPlanes+=p}};function c(){l.value!==e&&(l.value=e,l.needsUpdate=i>0),t.numPlanes=i,t.numIntersection=0}function h(u,d,f,g){const v=u!==null?u.length:0;let x=null;if(v!==0){if(x=l.value,g!==!0||x===null){const m=f+v*4,p=d.matrixWorldInverse;a.getNormalMatrix(p),(x===null||x.length<m)&&(x=new Float32Array(m));for(let b=0,_=f;b!==v;++b,_+=4)o.copy(u[b]).applyMatrix4(p,a),o.normal.toArray(x,_),x[_+3]=o.constant}l.value=x,l.needsUpdate=!0}return t.numPlanes=v,t.numIntersection=0,x}}function EA(n){let t=new WeakMap;function e(o,a){return a===Jp?o.mapping=Gh:a===Qp&&(o.mapping=kh),o}function i(o){if(o&&o.isTexture){const a=o.mapping;if(a===Jp||a===Qp)if(t.has(o)){const l=t.get(o).texture;return e(l,o.mapping)}else{const l=o.image;if(l&&l.height>0){const c=n.getRenderList(),h=n.getRenderTarget(),u=n.getRenderState(),d=new _r(l.height/2);return d.fromEquirectangularTexture(n,o),t.set(o,d),n.setRenderTarget(h),n.setRenderList(c),n.setRenderState(u),o.addEventListener("dispose",r),e(d.texture,o.mapping)}else return null}}return o}function r(o){const a=o.target;a.removeEventListener("dispose",r);const l=t.get(a);l!==void 0&&(t.delete(a),l.dispose())}function s(){t=new WeakMap}return{get:i,dispose:s}}function TA(n){const t={};return{has:function(e){if(t[e]!==void 0)return t[e]!==null;let i;switch(e){case"WEBGL_depth_texture":i=n.getExtension("WEBGL_depth_texture")||n.getExtension("MOZ_WEBGL_depth_texture")||n.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":i=n.getExtension("EXT_texture_filter_anisotropic")||n.getExtension("MOZ_EXT_texture_filter_anisotropic")||n.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":i=n.getExtension("WEBGL_compressed_texture_s3tc")||n.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||n.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":i=n.getExtension("WEBGL_compressed_texture_pvrtc")||n.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:i=n.getExtension(e)}return t[e]=i,i!==null},get:function(e){return this.has(e)||console.warn("THREE.WebGLRenderer: "+e+" extension not supported."),t[e]}}}function AA(n,t,e,i){const r=new WeakMap,s=new WeakMap;function o(u){const d=u.target,f=r.get(d);f.index!==null&&t.remove(f.index);for(const v in f.attributes)t.remove(f.attributes[v]);d.removeEventListener("dispose",o),r.delete(d);const g=s.get(f);g&&(t.remove(g),s.delete(f)),i.releaseStatesOfGeometry(f),d.isInstancedBufferGeometry===!0&&delete d._maxInstanceCount,e.memory.geometries--}function a(u,d){let f=r.get(d);return f||(d.addEventListener("dispose",o),d.isBufferGeometry?f=d:d.isGeometry&&(d._bufferGeometry===void 0&&(d._bufferGeometry=new le().setFromObject(u)),f=d._bufferGeometry),r.set(d,f),e.memory.geometries++,f)}function l(u){const d=u.attributes;for(const g in d)t.update(d[g],34962);const f=u.morphAttributes;for(const g in f){const v=f[g];for(let x=0,m=v.length;x<m;x++)t.update(v[x],34962)}}function c(u){const d=[],f=u.index,g=u.attributes.position;let v=0;if(f!==null){const p=f.array;v=f.version;for(let b=0,_=p.length;b<_;b+=3){const w=p[b+0],E=p[b+1],S=p[b+2];d.push(w,E,E,S,S,w)}}else{const p=g.array;v=g.version;for(let b=0,_=p.length/3-1;b<_;b+=3){const w=b+0,E=b+1,S=b+2;d.push(w,E,E,S,S,w)}}const x=new(Tm(d)>65535?Jo:Zo)(d,1);x.version=v;const m=s.get(u);m&&t.remove(m),s.set(u,x)}function h(u){const d=s.get(u);if(d){const f=u.index;f!==null&&d.version<f.version&&c(u)}else c(u);return s.get(u)}return{get:a,update:l,getWireframeAttribute:h}}function LA(n,t,e,i){const r=i.isWebGL2;let s;function o(d){s=d}let a,l;function c(d){a=d.type,l=d.bytesPerElement}function h(d,f){n.drawElements(s,f,a,d*l),e.update(f,s,1)}function u(d,f,g){if(g===0)return;let v,x;if(r)v=n,x="drawElementsInstanced";else if(v=t.get("ANGLE_instanced_arrays"),x="drawElementsInstancedANGLE",v===null){console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}v[x](s,f,a,d*l,g),e.update(f,s,g)}this.setMode=o,this.setIndex=c,this.render=h,this.renderInstances=u}function CA(n){const t={geometries:0,textures:0},e={frame:0,calls:0,triangles:0,points:0,lines:0};function i(s,o,a){switch(e.calls++,o){case 4:e.triangles+=a*(s/3);break;case 1:e.lines+=a*(s/2);break;case 3:e.lines+=a*(s-1);break;case 2:e.lines+=a*s;break;case 0:e.points+=a*s;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",o);break}}function r(){e.frame++,e.calls=0,e.triangles=0,e.points=0,e.lines=0}return{memory:t,render:e,programs:null,autoReset:!0,reset:r,update:i}}function RA(n,t){return n[0]-t[0]}function PA(n,t){return Math.abs(t[1])-Math.abs(n[1])}function IA(n){const t={},e=new Float32Array(8),i=[];for(let s=0;s<8;s++)i[s]=[s,0];function r(s,o,a,l){const c=s.morphTargetInfluences,h=c===void 0?0:c.length;let u=t[o.id];if(u===void 0){u=[];for(let x=0;x<h;x++)u[x]=[x,0];t[o.id]=u}for(let x=0;x<h;x++){const m=u[x];m[0]=x,m[1]=c[x]}u.sort(PA);for(let x=0;x<8;x++)x<h&&u[x][1]?(i[x][0]=u[x][0],i[x][1]=u[x][1]):(i[x][0]=Number.MAX_SAFE_INTEGER,i[x][1]=0);i.sort(RA);const d=a.morphTargets&&o.morphAttributes.position,f=a.morphNormals&&o.morphAttributes.normal;let g=0;for(let x=0;x<8;x++){const m=i[x],p=m[0],b=m[1];p!==Number.MAX_SAFE_INTEGER&&b?(d&&o.getAttribute("morphTarget"+x)!==d[p]&&o.setAttribute("morphTarget"+x,d[p]),f&&o.getAttribute("morphNormal"+x)!==f[p]&&o.setAttribute("morphNormal"+x,f[p]),e[x]=b,g+=b):(d&&o.getAttribute("morphTarget"+x)!==void 0&&o.deleteAttribute("morphTarget"+x),f&&o.getAttribute("morphNormal"+x)!==void 0&&o.deleteAttribute("morphNormal"+x),e[x]=0)}const v=o.morphTargetsRelative?1:1-g;l.getUniforms().setValue(n,"morphTargetBaseInfluence",v),l.getUniforms().setValue(n,"morphTargetInfluences",e)}return{update:r}}function DA(n,t,e,i){let r=new WeakMap;function s(a){const l=i.render.frame,c=a.geometry,h=t.get(a,c);return r.get(h)!==l&&(c.isGeometry&&h.updateFromObject(a),t.update(h),r.set(h,l)),a.isInstancedMesh&&(e.update(a.instanceMatrix,34962),a.instanceColor!==null&&e.update(a.instanceColor,34962)),h}function o(){r=new WeakMap}return{update:s,dispose:o}}function ta(n,t,e,i){de.call(this,null),this.image={data:n||null,width:t||1,height:e||1,depth:i||1},this.magFilter=Je,this.minFilter=Je,this.wrapR=cn,this.generateMipmaps=!1,this.flipY=!1,this.needsUpdate=!0}ta.prototype=Object.create(de.prototype);ta.prototype.constructor=ta;ta.prototype.isDataTexture2DArray=!0;function ea(n,t,e,i){de.call(this,null),this.image={data:n||null,width:t||1,height:e||1,depth:i||1},this.magFilter=Je,this.minFilter=Je,this.wrapR=cn,this.generateMipmaps=!1,this.flipY=!1,this.needsUpdate=!0}ea.prototype=Object.create(de.prototype);ea.prototype.constructor=ea;ea.prototype.isDataTexture3D=!0;const Pm=new de,NA=new ta,FA=new ea,Im=new Qi,Dm=[],Nm=[],Fm=new Float32Array(16),Bm=new Float32Array(9),Om=new Float32Array(4);function Hs(n,t,e){const i=n[0];if(i<=0||i>0)return n;const r=t*e;let s=Dm[r];if(s===void 0&&(s=new Float32Array(r),Dm[r]=s),t!==0){i.toArray(s,0);for(let o=1,a=0;o!==t;++o)a+=e,n[o].toArray(s,a)}return s}function yn(n,t){if(n.length!==t.length)return!1;for(let e=0,i=n.length;e<i;e++)if(n[e]!==t[e])return!1;return!0}function fn(n,t){for(let e=0,i=t.length;e<i;e++)n[e]=t[e]}function zm(n,t){let e=Nm[t];e===void 0&&(e=new Int32Array(t),Nm[t]=e);for(let i=0;i!==t;++i)e[i]=n.allocateTextureUnit();return e}function BA(n,t){const e=this.cache;e[0]!==t&&(n.uniform1f(this.addr,t),e[0]=t)}function OA(n,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y)&&(n.uniform2f(this.addr,t.x,t.y),e[0]=t.x,e[1]=t.y);else{if(yn(e,t))return;n.uniform2fv(this.addr,t),fn(e,t)}}function zA(n,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z)&&(n.uniform3f(this.addr,t.x,t.y,t.z),e[0]=t.x,e[1]=t.y,e[2]=t.z);else if(t.r!==void 0)(e[0]!==t.r||e[1]!==t.g||e[2]!==t.b)&&(n.uniform3f(this.addr,t.r,t.g,t.b),e[0]=t.r,e[1]=t.g,e[2]=t.b);else{if(yn(e,t))return;n.uniform3fv(this.addr,t),fn(e,t)}}function UA(n,t){const e=this.cache;if(t.x!==void 0)(e[0]!==t.x||e[1]!==t.y||e[2]!==t.z||e[3]!==t.w)&&(n.uniform4f(this.addr,t.x,t.y,t.z,t.w),e[0]=t.x,e[1]=t.y,e[2]=t.z,e[3]=t.w);else{if(yn(e,t))return;n.uniform4fv(this.addr,t),fn(e,t)}}function HA(n,t){const e=this.cache,i=t.elements;if(i===void 0){if(yn(e,t))return;n.uniformMatrix2fv(this.addr,!1,t),fn(e,t)}else{if(yn(e,i))return;Om.set(i),n.uniformMatrix2fv(this.addr,!1,Om),fn(e,i)}}function GA(n,t){const e=this.cache,i=t.elements;if(i===void 0){if(yn(e,t))return;n.uniformMatrix3fv(this.addr,!1,t),fn(e,t)}else{if(yn(e,i))return;Bm.set(i),n.uniformMatrix3fv(this.addr,!1,Bm),fn(e,i)}}function kA(n,t){const e=this.cache,i=t.elements;if(i===void 0){if(yn(e,t))return;n.uniformMatrix4fv(this.addr,!1,t),fn(e,t)}else{if(yn(e,i))return;Fm.set(i),n.uniformMatrix4fv(this.addr,!1,Fm),fn(e,i)}}function VA(n,t,e){const i=this.cache,r=e.allocateTextureUnit();i[0]!==r&&(n.uniform1i(this.addr,r),i[0]=r),e.safeSetTexture2D(t||Pm,r)}function WA(n,t,e){const i=this.cache,r=e.allocateTextureUnit();i[0]!==r&&(n.uniform1i(this.addr,r),i[0]=r),e.setTexture2DArray(t||NA,r)}function $A(n,t,e){const i=this.cache,r=e.allocateTextureUnit();i[0]!==r&&(n.uniform1i(this.addr,r),i[0]=r),e.setTexture3D(t||FA,r)}function qA(n,t,e){const i=this.cache,r=e.allocateTextureUnit();i[0]!==r&&(n.uniform1i(this.addr,r),i[0]=r),e.safeSetTextureCube(t||Im,r)}function jA(n,t){const e=this.cache;e[0]!==t&&(n.uniform1i(this.addr,t),e[0]=t)}function XA(n,t){const e=this.cache;yn(e,t)||(n.uniform2iv(this.addr,t),fn(e,t))}function YA(n,t){const e=this.cache;yn(e,t)||(n.uniform3iv(this.addr,t),fn(e,t))}function ZA(n,t){const e=this.cache;yn(e,t)||(n.uniform4iv(this.addr,t),fn(e,t))}function JA(n,t){const e=this.cache;e[0]!==t&&(n.uniform1ui(this.addr,t),e[0]=t)}function QA(n){switch(n){case 5126:return BA;case 35664:return OA;case 35665:return zA;case 35666:return UA;case 35674:return HA;case 35675:return GA;case 35676:return kA;case 5124:case 35670:return jA;case 35667:case 35671:return XA;case 35668:case 35672:return YA;case 35669:case 35673:return ZA;case 5125:return JA;case 35678:case 36198:case 36298:case 36306:case 35682:return VA;case 35679:case 36299:case 36307:return $A;case 35680:case 36300:case 36308:case 36293:return qA;case 36289:case 36303:case 36311:case 36292:return WA}}function KA(n,t){n.uniform1fv(this.addr,t)}function tL(n,t){n.uniform1iv(this.addr,t)}function eL(n,t){n.uniform2iv(this.addr,t)}function nL(n,t){n.uniform3iv(this.addr,t)}function iL(n,t){n.uniform4iv(this.addr,t)}function rL(n,t){const e=Hs(t,this.size,2);n.uniform2fv(this.addr,e)}function sL(n,t){const e=Hs(t,this.size,3);n.uniform3fv(this.addr,e)}function oL(n,t){const e=Hs(t,this.size,4);n.uniform4fv(this.addr,e)}function aL(n,t){const e=Hs(t,this.size,4);n.uniformMatrix2fv(this.addr,!1,e)}function lL(n,t){const e=Hs(t,this.size,9);n.uniformMatrix3fv(this.addr,!1,e)}function cL(n,t){const e=Hs(t,this.size,16);n.uniformMatrix4fv(this.addr,!1,e)}function hL(n,t,e){const i=t.length,r=zm(e,i);n.uniform1iv(this.addr,r);for(let s=0;s!==i;++s)e.safeSetTexture2D(t[s]||Pm,r[s])}function uL(n,t,e){const i=t.length,r=zm(e,i);n.uniform1iv(this.addr,r);for(let s=0;s!==i;++s)e.safeSetTextureCube(t[s]||Im,r[s])}function dL(n){switch(n){case 5126:return KA;case 35664:return rL;case 35665:return sL;case 35666:return oL;case 35674:return aL;case 35675:return lL;case 35676:return cL;case 5124:case 35670:return tL;case 35667:case 35671:return eL;case 35668:case 35672:return nL;case 35669:case 35673:return iL;case 35678:case 36198:case 36298:case 36306:case 35682:return hL;case 35680:case 36300:case 36308:case 36293:return uL}}function fL(n,t,e){this.id=n,this.addr=e,this.cache=[],this.setValue=QA(t.type)}function Um(n,t,e){this.id=n,this.addr=e,this.cache=[],this.size=t.size,this.setValue=dL(t.type)}Um.prototype.updateCache=function(n){const t=this.cache;n instanceof Float32Array&&t.length!==n.length&&(this.cache=new Float32Array(n.length)),fn(t,n)};function Hm(n){this.id=n,this.seq=[],this.map={}}Hm.prototype.setValue=function(n,t,e){const i=this.seq;for(let r=0,s=i.length;r!==s;++r){const o=i[r];o.setValue(n,t[o.id],e)}};const wu=/([\w\d_]+)(\])?(\[|\.)?/g;function Gm(n,t){n.seq.push(t),n.map[t.id]=t}function pL(n,t,e){const i=n.name,r=i.length;for(wu.lastIndex=0;;){const s=wu.exec(i),o=wu.lastIndex;let a=s[1];const l=s[2]==="]",c=s[3];if(l&&(a=a|0),c===void 0||c==="["&&o+2===r){Gm(e,c===void 0?new fL(a,n,t):new Um(a,n,t));break}else{let u=e.map[a];u===void 0&&(u=new Hm(a),Gm(e,u)),e=u}}}function Ki(n,t){this.seq=[],this.map={};const e=n.getProgramParameter(t,35718);for(let i=0;i<e;++i){const r=n.getActiveUniform(t,i),s=n.getUniformLocation(t,r.name);pL(r,s,this)}}Ki.prototype.setValue=function(n,t,e,i){const r=this.map[t];r!==void 0&&r.setValue(n,e,i)};Ki.prototype.setOptional=function(n,t,e){const i=t[e];i!==void 0&&this.setValue(n,e,i)};Ki.upload=function(n,t,e,i){for(let r=0,s=t.length;r!==s;++r){const o=t[r],a=e[o.id];a.needsUpdate!==!1&&o.setValue(n,a.value,i)}};Ki.seqWithValue=function(n,t){const e=[];for(let i=0,r=n.length;i!==r;++i){const s=n[i];s.id in t&&e.push(s)}return e};function km(n,t,e){const i=n.createShader(t);return n.shaderSource(i,e),n.compileShader(i),i}let mL=0;function gL(n){const t=n.split(`
`);for(let e=0;e<t.length;e++)t[e]=e+1+": "+t[e];return t.join(`
`)}function Vm(n){switch(n){case Vo:return["Linear","( value )"];case dm:return["sRGB","( value )"];case T1:return["RGBE","( value )"];case L1:return["RGBM","( value, 7.0 )"];case C1:return["RGBM","( value, 16.0 )"];case R1:return["RGBD","( value, 256.0 )"];case E1:return["Gamma","( value, float( GAMMA_FACTOR ) )"];case A1:return["LogLuv","( value )"];default:return console.warn("THREE.WebGLProgram: Unsupported encoding:",n),["Linear","( value )"]}}function Wm(n,t,e){const i=n.getShaderParameter(t,35713),r=n.getShaderInfoLog(t).trim();if(i&&r==="")return"";const s=n.getShaderSource(t);return"THREE.WebGLShader: gl.getShaderInfoLog() "+e+`
`+r+gL(s)}function na(n,t){const e=Vm(t);return"vec4 "+n+"( vec4 value ) { return "+e[0]+"ToLinear"+e[1]+"; }"}function vL(n,t){const e=Vm(t);return"vec4 "+n+"( vec4 value ) { return LinearTo"+e[0]+e[1]+"; }"}function xL(n,t){let e;switch(t){case SS:e="Linear";break;case ES:e="Reinhard";break;case TS:e="OptimizedCineon";break;case AS:e="ACESFilmic";break;case LS:e="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",t),e="Linear"}return"vec3 "+n+"( vec3 color ) { return "+e+"ToneMapping( color ); }"}function yL(n){return[n.extensionDerivatives||n.envMapCubeUV||n.bumpMap||n.tangentSpaceNormalMap||n.clearcoatNormalMap||n.flatShading||n.shaderID==="physical"?"#extension GL_OES_standard_derivatives : enable":"",(n.extensionFragDepth||n.logarithmicDepthBuffer)&&n.rendererExtensionFragDepth?"#extension GL_EXT_frag_depth : enable":"",n.extensionDrawBuffers&&n.rendererExtensionDrawBuffers?"#extension GL_EXT_draw_buffers : require":"",(n.extensionShaderTextureLOD||n.envMap)&&n.rendererExtensionShaderTextureLod?"#extension GL_EXT_shader_texture_lod : enable":""].filter(ia).join(`
`)}function _L(n){const t=[];for(const e in n){const i=n[e];i!==!1&&t.push("#define "+e+" "+i)}return t.join(`
`)}function bL(n,t){const e={},i=n.getProgramParameter(t,35721);for(let r=0;r<i;r++){const o=n.getActiveAttrib(t,r).name;e[o]=n.getAttribLocation(t,o)}return e}function ia(n){return n!==""}function $m(n,t){return n.replace(/NUM_DIR_LIGHTS/g,t.numDirLights).replace(/NUM_SPOT_LIGHTS/g,t.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,t.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,t.numPointLights).replace(/NUM_HEMI_LIGHTS/g,t.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,t.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g,t.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,t.numPointLightShadows)}function qm(n,t){return n.replace(/NUM_CLIPPING_PLANES/g,t.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,t.numClippingPlanes-t.numClipIntersection)}const ML=/^[ \t]*#include +<([\w\d./]+)>/gm;function Su(n){return n.replace(ML,wL)}function wL(n,t){const e=Jt[t];if(e===void 0)throw new Error("Can not resolve #include <"+t+">");return Su(e)}const SL=/#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g,EL=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function jm(n){return n.replace(EL,Xm).replace(SL,TL)}function TL(n,t,e,i){return console.warn("WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead."),Xm(n,t,e,i)}function Xm(n,t,e,i){let r="";for(let s=parseInt(t);s<parseInt(e);s++)r+=i.replace(/\[\s*i\s*\]/g,"[ "+s+" ]").replace(/UNROLLED_LOOP_INDEX/g,s);return r}function Ym(n){let t="precision "+n.precision+` float;
precision `+n.precision+" int;";return n.precision==="highp"?t+=`
#define HIGH_PRECISION`:n.precision==="mediump"?t+=`
#define MEDIUM_PRECISION`:n.precision==="lowp"&&(t+=`
#define LOW_PRECISION`),t}function AL(n){let t="SHADOWMAP_TYPE_BASIC";return n.shadowMapType===Gp?t="SHADOWMAP_TYPE_PCF":n.shadowMapType===nS?t="SHADOWMAP_TYPE_PCF_SOFT":n.shadowMapType===Oo&&(t="SHADOWMAP_TYPE_VSM"),t}function LL(n){let t="ENVMAP_TYPE_CUBE";if(n.envMap)switch(n.envMapMode){case Gh:case kh:t="ENVMAP_TYPE_CUBE";break;case Vh:case Wh:t="ENVMAP_TYPE_CUBE_UV";break}return t}function CL(n){let t="ENVMAP_MODE_REFLECTION";if(n.envMap)switch(n.envMapMode){case kh:case Wh:t="ENVMAP_MODE_REFRACTION";break}return t}function RL(n){let t="ENVMAP_BLENDING_NONE";if(n.envMap)switch(n.combine){case gl:t="ENVMAP_BLENDING_MULTIPLY";break;case MS:t="ENVMAP_BLENDING_MIX";break;case wS:t="ENVMAP_BLENDING_ADD";break}return t}function PL(n,t,e,i){const r=n.getContext(),s=e.defines;let o=e.vertexShader,a=e.fragmentShader;const l=AL(e),c=LL(e),h=CL(e),u=RL(e),d=n.gammaFactor>0?n.gammaFactor:1,f=e.isWebGL2?"":yL(e),g=_L(s),v=r.createProgram();let x,m,p=e.glslVersion?"#version "+e.glslVersion+`
`:"";e.isRawShaderMaterial?(x=[g].filter(ia).join(`
`),x.length>0&&(x+=`
`),m=[f,g].filter(ia).join(`
`),m.length>0&&(m+=`
`)):(x=[Ym(e),"#define SHADER_NAME "+e.shaderName,g,e.instancing?"#define USE_INSTANCING":"",e.instancingColor?"#define USE_INSTANCING_COLOR":"",e.supportsVertexTextures?"#define VERTEX_TEXTURES":"","#define GAMMA_FACTOR "+d,"#define MAX_BONES "+e.maxBones,e.useFog&&e.fog?"#define USE_FOG":"",e.useFog&&e.fogExp2?"#define FOG_EXP2":"",e.map?"#define USE_MAP":"",e.envMap?"#define USE_ENVMAP":"",e.envMap?"#define "+h:"",e.lightMap?"#define USE_LIGHTMAP":"",e.aoMap?"#define USE_AOMAP":"",e.emissiveMap?"#define USE_EMISSIVEMAP":"",e.bumpMap?"#define USE_BUMPMAP":"",e.normalMap?"#define USE_NORMALMAP":"",e.normalMap&&e.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",e.normalMap&&e.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",e.clearcoatMap?"#define USE_CLEARCOATMAP":"",e.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",e.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",e.displacementMap&&e.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",e.specularMap?"#define USE_SPECULARMAP":"",e.roughnessMap?"#define USE_ROUGHNESSMAP":"",e.metalnessMap?"#define USE_METALNESSMAP":"",e.alphaMap?"#define USE_ALPHAMAP":"",e.transmissionMap?"#define USE_TRANSMISSIONMAP":"",e.vertexTangents?"#define USE_TANGENT":"",e.vertexColors?"#define USE_COLOR":"",e.vertexUvs?"#define USE_UV":"",e.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",e.flatShading?"#define FLAT_SHADED":"",e.skinning?"#define USE_SKINNING":"",e.useVertexTexture?"#define BONE_TEXTURE":"",e.morphTargets?"#define USE_MORPHTARGETS":"",e.morphNormals&&e.flatShading===!1?"#define USE_MORPHNORMALS":"",e.doubleSided?"#define DOUBLE_SIDED":"",e.flipSided?"#define FLIP_SIDED":"",e.shadowMapEnabled?"#define USE_SHADOWMAP":"",e.shadowMapEnabled?"#define "+l:"",e.sizeAttenuation?"#define USE_SIZEATTENUATION":"",e.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",e.logarithmicDepthBuffer&&e.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","	attribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","	attribute vec3 instanceColor;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_TANGENT","	attribute vec4 tangent;","#endif","#ifdef USE_COLOR","	attribute vec3 color;","#endif","#ifdef USE_MORPHTARGETS","	attribute vec3 morphTarget0;","	attribute vec3 morphTarget1;","	attribute vec3 morphTarget2;","	attribute vec3 morphTarget3;","	#ifdef USE_MORPHNORMALS","		attribute vec3 morphNormal0;","		attribute vec3 morphNormal1;","		attribute vec3 morphNormal2;","		attribute vec3 morphNormal3;","	#else","		attribute vec3 morphTarget4;","		attribute vec3 morphTarget5;","		attribute vec3 morphTarget6;","		attribute vec3 morphTarget7;","	#endif","#endif","#ifdef USE_SKINNING","	attribute vec4 skinIndex;","	attribute vec4 skinWeight;","#endif",`
`].filter(ia).join(`
`),m=[f,Ym(e),"#define SHADER_NAME "+e.shaderName,g,e.alphaTest?"#define ALPHATEST "+e.alphaTest+(e.alphaTest%1?"":".0"):"","#define GAMMA_FACTOR "+d,e.useFog&&e.fog?"#define USE_FOG":"",e.useFog&&e.fogExp2?"#define FOG_EXP2":"",e.map?"#define USE_MAP":"",e.matcap?"#define USE_MATCAP":"",e.envMap?"#define USE_ENVMAP":"",e.envMap?"#define "+c:"",e.envMap?"#define "+h:"",e.envMap?"#define "+u:"",e.lightMap?"#define USE_LIGHTMAP":"",e.aoMap?"#define USE_AOMAP":"",e.emissiveMap?"#define USE_EMISSIVEMAP":"",e.bumpMap?"#define USE_BUMPMAP":"",e.normalMap?"#define USE_NORMALMAP":"",e.normalMap&&e.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",e.normalMap&&e.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",e.clearcoatMap?"#define USE_CLEARCOATMAP":"",e.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",e.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",e.specularMap?"#define USE_SPECULARMAP":"",e.roughnessMap?"#define USE_ROUGHNESSMAP":"",e.metalnessMap?"#define USE_METALNESSMAP":"",e.alphaMap?"#define USE_ALPHAMAP":"",e.sheen?"#define USE_SHEEN":"",e.transmissionMap?"#define USE_TRANSMISSIONMAP":"",e.vertexTangents?"#define USE_TANGENT":"",e.vertexColors||e.instancingColor?"#define USE_COLOR":"",e.vertexUvs?"#define USE_UV":"",e.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",e.gradientMap?"#define USE_GRADIENTMAP":"",e.flatShading?"#define FLAT_SHADED":"",e.doubleSided?"#define DOUBLE_SIDED":"",e.flipSided?"#define FLIP_SIDED":"",e.shadowMapEnabled?"#define USE_SHADOWMAP":"",e.shadowMapEnabled?"#define "+l:"",e.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",e.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",e.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",e.logarithmicDepthBuffer&&e.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"",(e.extensionShaderTextureLOD||e.envMap)&&e.rendererExtensionShaderTextureLod?"#define TEXTURE_LOD_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",e.toneMapping!==Ho?"#define TONE_MAPPING":"",e.toneMapping!==Ho?Jt.tonemapping_pars_fragment:"",e.toneMapping!==Ho?xL("toneMapping",e.toneMapping):"",e.dithering?"#define DITHERING":"",Jt.encodings_pars_fragment,e.map?na("mapTexelToLinear",e.mapEncoding):"",e.matcap?na("matcapTexelToLinear",e.matcapEncoding):"",e.envMap?na("envMapTexelToLinear",e.envMapEncoding):"",e.emissiveMap?na("emissiveMapTexelToLinear",e.emissiveMapEncoding):"",e.lightMap?na("lightMapTexelToLinear",e.lightMapEncoding):"",vL("linearToOutputTexel",e.outputEncoding),e.depthPacking?"#define DEPTH_PACKING "+e.depthPacking:"",`
`].filter(ia).join(`
`)),o=Su(o),o=$m(o,e),o=qm(o,e),a=Su(a),a=$m(a,e),a=qm(a,e),o=jm(o),a=jm(a),e.isWebGL2&&e.isRawShaderMaterial!==!0&&(p=`#version 300 es
`,x=["#define attribute in","#define varying out","#define texture2D texture"].join(`
`)+`
`+x,m=["#define varying in",e.glslVersion===fm?"":"out highp vec4 pc_fragColor;",e.glslVersion===fm?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join(`
`)+`
`+m);const b=p+x+o,_=p+m+a,w=km(r,35633,b),E=km(r,35632,_);if(r.attachShader(v,w),r.attachShader(v,E),e.index0AttributeName!==void 0?r.bindAttribLocation(v,0,e.index0AttributeName):e.morphTargets===!0&&r.bindAttribLocation(v,0,"position"),r.linkProgram(v),n.debug.checkShaderErrors){const W=r.getProgramInfoLog(v).trim(),B=r.getShaderInfoLog(w).trim(),T=r.getShaderInfoLog(E).trim();let k=!0,I=!0;if(r.getProgramParameter(v,35714)===!1){k=!1;const N=Wm(r,w,"vertex"),C=Wm(r,E,"fragment");console.error("THREE.WebGLProgram: shader error: ",r.getError(),"35715",r.getProgramParameter(v,35715),"gl.getProgramInfoLog",W,N,C)}else W!==""?console.warn("THREE.WebGLProgram: gl.getProgramInfoLog()",W):(B===""||T==="")&&(I=!1);I&&(this.diagnostics={runnable:k,programLog:W,vertexShader:{log:B,prefix:x},fragmentShader:{log:T,prefix:m}})}r.deleteShader(w),r.deleteShader(E);let S;this.getUniforms=function(){return S===void 0&&(S=new Ki(r,v)),S};let R;return this.getAttributes=function(){return R===void 0&&(R=bL(r,v)),R},this.destroy=function(){i.releaseStatesOfProgram(this),r.deleteProgram(v),this.program=void 0},this.name=e.shaderName,this.id=mL++,this.cacheKey=t,this.usedTimes=1,this.program=v,this.vertexShader=w,this.fragmentShader=E,this}function IL(n,t,e,i,r,s){const o=[],a=i.isWebGL2,l=i.logarithmicDepthBuffer,c=i.floatVertexTextures,h=i.maxVertexUniforms,u=i.vertexTextures;let d=i.precision;const f={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"},g=["precision","isWebGL2","supportsVertexTextures","outputEncoding","instancing","instancingColor","map","mapEncoding","matcap","matcapEncoding","envMap","envMapMode","envMapEncoding","envMapCubeUV","lightMap","lightMapEncoding","aoMap","emissiveMap","emissiveMapEncoding","bumpMap","normalMap","objectSpaceNormalMap","tangentSpaceNormalMap","clearcoatMap","clearcoatRoughnessMap","clearcoatNormalMap","displacementMap","specularMap","roughnessMap","metalnessMap","gradientMap","alphaMap","combine","vertexColors","vertexTangents","vertexUvs","uvsVertexOnly","fog","useFog","fogExp2","flatShading","sizeAttenuation","logarithmicDepthBuffer","skinning","maxBones","useVertexTexture","morphTargets","morphNormals","maxMorphTargets","maxMorphNormals","premultipliedAlpha","numDirLights","numPointLights","numSpotLights","numHemiLights","numRectAreaLights","numDirLightShadows","numPointLightShadows","numSpotLightShadows","shadowMapEnabled","shadowMapType","toneMapping","physicallyCorrectLights","alphaTest","doubleSided","flipSided","numClippingPlanes","numClipIntersection","depthPacking","dithering","sheen","transmissionMap"];function v(E){const R=E.skeleton.bones;if(c)return 1024;{const B=Math.floor((h-20)/4),T=Math.min(B,R.length);return T<R.length?(console.warn("THREE.WebGLRenderer: Skeleton has "+R.length+" bones. This GPU supports "+T+"."),0):T}}function x(E){let S;return E?E.isTexture?S=E.encoding:E.isWebGLRenderTarget&&(console.warn("THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."),S=E.texture.encoding):S=Vo,S}function m(E,S,R,W,B){const T=W.fog,k=E.isMeshStandardMaterial?W.environment:null,I=t.get(E.envMap||k),N=f[E.type],C=B.isSkinnedMesh?v(B):0;E.precision!==null&&(d=i.getMaxPrecision(E.precision),d!==E.precision&&console.warn("THREE.WebGLProgram.getParameters:",E.precision,"not supported, using",d,"instead."));let L,F;if(N){const pt=qn[N];L=pt.vertexShader,F=pt.fragmentShader}else L=E.vertexShader,F=E.fragmentShader;const q=n.getRenderTarget();return{isWebGL2:a,shaderID:N,shaderName:E.type,vertexShader:L,fragmentShader:F,defines:E.defines,isRawShaderMaterial:E.isRawShaderMaterial===!0,glslVersion:E.glslVersion,precision:d,instancing:B.isInstancedMesh===!0,instancingColor:B.isInstancedMesh===!0&&B.instanceColor!==null,supportsVertexTextures:u,outputEncoding:q!==null?x(q.texture):n.outputEncoding,map:!!E.map,mapEncoding:x(E.map),matcap:!!E.matcap,matcapEncoding:x(E.matcap),envMap:!!I,envMapMode:I&&I.mapping,envMapEncoding:x(I),envMapCubeUV:!!I&&(I.mapping===Vh||I.mapping===Wh),lightMap:!!E.lightMap,lightMapEncoding:x(E.lightMap),aoMap:!!E.aoMap,emissiveMap:!!E.emissiveMap,emissiveMapEncoding:x(E.emissiveMap),bumpMap:!!E.bumpMap,normalMap:!!E.normalMap,objectSpaceNormalMap:E.normalMapType===D1,tangentSpaceNormalMap:E.normalMapType===bs,clearcoatMap:!!E.clearcoatMap,clearcoatRoughnessMap:!!E.clearcoatRoughnessMap,clearcoatNormalMap:!!E.clearcoatNormalMap,displacementMap:!!E.displacementMap,roughnessMap:!!E.roughnessMap,metalnessMap:!!E.metalnessMap,specularMap:!!E.specularMap,alphaMap:!!E.alphaMap,gradientMap:!!E.gradientMap,sheen:!!E.sheen,transmissionMap:!!E.transmissionMap,combine:E.combine,vertexTangents:E.normalMap&&E.vertexTangents,vertexColors:E.vertexColors,vertexUvs:!!E.map||!!E.bumpMap||!!E.normalMap||!!E.specularMap||!!E.alphaMap||!!E.emissiveMap||!!E.roughnessMap||!!E.metalnessMap||!!E.clearcoatMap||!!E.clearcoatRoughnessMap||!!E.clearcoatNormalMap||!!E.displacementMap||!!E.transmissionMap,uvsVertexOnly:!(!!E.map||!!E.bumpMap||!!E.normalMap||!!E.specularMap||!!E.alphaMap||!!E.emissiveMap||!!E.roughnessMap||!!E.metalnessMap||!!E.clearcoatNormalMap||!!E.transmissionMap)&&!!E.displacementMap,fog:!!T,useFog:E.fog,fogExp2:T&&T.isFogExp2,flatShading:E.flatShading,sizeAttenuation:E.sizeAttenuation,logarithmicDepthBuffer:l,skinning:E.skinning&&C>0,maxBones:C,useVertexTexture:c,morphTargets:E.morphTargets,morphNormals:E.morphNormals,maxMorphTargets:n.maxMorphTargets,maxMorphNormals:n.maxMorphNormals,numDirLights:S.directional.length,numPointLights:S.point.length,numSpotLights:S.spot.length,numRectAreaLights:S.rectArea.length,numHemiLights:S.hemi.length,numDirLightShadows:S.directionalShadowMap.length,numPointLightShadows:S.pointShadowMap.length,numSpotLightShadows:S.spotShadowMap.length,numClippingPlanes:s.numPlanes,numClipIntersection:s.numIntersection,dithering:E.dithering,shadowMapEnabled:n.shadowMap.enabled&&R.length>0,shadowMapType:n.shadowMap.type,toneMapping:E.toneMapped?n.toneMapping:Ho,physicallyCorrectLights:n.physicallyCorrectLights,premultipliedAlpha:E.premultipliedAlpha,alphaTest:E.alphaTest,doubleSided:E.side===ml,flipSided:E.side===Ne,depthPacking:E.depthPacking!==void 0?E.depthPacking:!1,index0AttributeName:E.index0AttributeName,extensionDerivatives:E.extensions&&E.extensions.derivatives,extensionFragDepth:E.extensions&&E.extensions.fragDepth,extensionDrawBuffers:E.extensions&&E.extensions.drawBuffers,extensionShaderTextureLOD:E.extensions&&E.extensions.shaderTextureLOD,rendererExtensionFragDepth:a||e.has("EXT_frag_depth"),rendererExtensionDrawBuffers:a||e.has("WEBGL_draw_buffers"),rendererExtensionShaderTextureLod:a||e.has("EXT_shader_texture_lod"),customProgramCacheKey:E.customProgramCacheKey()}}function p(E){const S=[];if(E.shaderID?S.push(E.shaderID):(S.push(E.fragmentShader),S.push(E.vertexShader)),E.defines!==void 0)for(const R in E.defines)S.push(R),S.push(E.defines[R]);if(E.isRawShaderMaterial===!1){for(let R=0;R<g.length;R++)S.push(E[g[R]]);S.push(n.outputEncoding),S.push(n.gammaFactor)}return S.push(E.customProgramCacheKey),S.join()}function b(E){const S=f[E.type];let R;if(S){const W=qn[S];R=X1.clone(W.uniforms)}else R=E.uniforms;return R}function _(E,S){let R;for(let W=0,B=o.length;W<B;W++){const T=o[W];if(T.cacheKey===S){R=T,++R.usedTimes;break}}return R===void 0&&(R=new PL(n,S,E,r),o.push(R)),R}function w(E){if(--E.usedTimes==0){const S=o.indexOf(E);o[S]=o[o.length-1],o.pop(),E.destroy()}}return{getParameters:m,getProgramCacheKey:p,getUniforms:b,acquireProgram:_,releaseProgram:w,programs:o}}function DL(){let n=new WeakMap;function t(s){let o=n.get(s);return o===void 0&&(o={},n.set(s,o)),o}function e(s){n.delete(s)}function i(s,o,a){n.get(s)[o]=a}function r(){n=new WeakMap}return{get:t,remove:e,update:i,dispose:r}}function NL(n,t){return n.groupOrder!==t.groupOrder?n.groupOrder-t.groupOrder:n.renderOrder!==t.renderOrder?n.renderOrder-t.renderOrder:n.program!==t.program?n.program.id-t.program.id:n.material.id!==t.material.id?n.material.id-t.material.id:n.z!==t.z?n.z-t.z:n.id-t.id}function FL(n,t){return n.groupOrder!==t.groupOrder?n.groupOrder-t.groupOrder:n.renderOrder!==t.renderOrder?n.renderOrder-t.renderOrder:n.z!==t.z?t.z-n.z:n.id-t.id}function Zm(n){const t=[];let e=0;const i=[],r=[],s={id:-1};function o(){e=0,i.length=0,r.length=0}function a(d,f,g,v,x,m){let p=t[e];const b=n.get(g);return p===void 0?(p={id:d.id,object:d,geometry:f,material:g,program:b.program||s,groupOrder:v,renderOrder:d.renderOrder,z:x,group:m},t[e]=p):(p.id=d.id,p.object=d,p.geometry=f,p.material=g,p.program=b.program||s,p.groupOrder=v,p.renderOrder=d.renderOrder,p.z=x,p.group=m),e++,p}function l(d,f,g,v,x,m){const p=a(d,f,g,v,x,m);(g.transparent===!0?r:i).push(p)}function c(d,f,g,v,x,m){const p=a(d,f,g,v,x,m);(g.transparent===!0?r:i).unshift(p)}function h(d,f){i.length>1&&i.sort(d||NL),r.length>1&&r.sort(f||FL)}function u(){for(let d=e,f=t.length;d<f;d++){const g=t[d];if(g.id===null)break;g.id=null,g.object=null,g.geometry=null,g.material=null,g.program=null,g.group=null}}return{opaque:i,transparent:r,init:o,push:l,unshift:c,finish:u,sort:h}}function BL(n){let t=new WeakMap;function e(r,s){const o=t.get(r);let a;return o===void 0?(a=new Zm(n),t.set(r,new WeakMap),t.get(r).set(s,a)):(a=o.get(s),a===void 0&&(a=new Zm(n),o.set(s,a))),a}function i(){t=new WeakMap}return{get:e,dispose:i}}function OL(){const n={};return{get:function(t){if(n[t.id]!==void 0)return n[t.id];let e;switch(t.type){case"DirectionalLight":e={direction:new H,color:new Ot};break;case"SpotLight":e={position:new H,direction:new H,color:new Ot,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":e={position:new H,color:new Ot,distance:0,decay:0};break;case"HemisphereLight":e={direction:new H,skyColor:new Ot,groundColor:new Ot};break;case"RectAreaLight":e={color:new Ot,position:new H,halfWidth:new H,halfHeight:new H};break}return n[t.id]=e,e}}}function zL(){const n={};return{get:function(t){if(n[t.id]!==void 0)return n[t.id];let e;switch(t.type){case"DirectionalLight":e={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new wt};break;case"SpotLight":e={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new wt};break;case"PointLight":e={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new wt,shadowCameraNear:1,shadowCameraFar:1e3};break}return n[t.id]=e,e}}}let UL=0;function HL(n,t){return(t.castShadow?1:0)-(n.castShadow?1:0)}function GL(n,t){const e=new OL,i=zL(),r={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadow:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[]};for(let c=0;c<9;c++)r.probe.push(new H);const s=new H,o=new Wt,a=new Wt;function l(c,h,u){let d=0,f=0,g=0;for(let W=0;W<9;W++)r.probe[W].set(0,0,0);let v=0,x=0,m=0,p=0,b=0,_=0,w=0,E=0;const S=u.matrixWorldInverse;c.sort(HL);for(let W=0,B=c.length;W<B;W++){const T=c[W],k=T.color,I=T.intensity,N=T.distance,C=T.shadow&&T.shadow.map?T.shadow.map.texture:null;if(T.isAmbientLight)d+=k.r*I,f+=k.g*I,g+=k.b*I;else if(T.isLightProbe)for(let L=0;L<9;L++)r.probe[L].addScaledVector(T.sh.coefficients[L],I);else if(T.isDirectionalLight){const L=e.get(T);if(L.color.copy(T.color).multiplyScalar(T.intensity),L.direction.setFromMatrixPosition(T.matrixWorld),s.setFromMatrixPosition(T.target.matrixWorld),L.direction.sub(s),L.direction.transformDirection(S),T.castShadow){const F=T.shadow,q=i.get(T);q.shadowBias=F.bias,q.shadowNormalBias=F.normalBias,q.shadowRadius=F.radius,q.shadowMapSize=F.mapSize,r.directionalShadow[v]=q,r.directionalShadowMap[v]=C,r.directionalShadowMatrix[v]=T.shadow.matrix,_++}r.directional[v]=L,v++}else if(T.isSpotLight){const L=e.get(T);if(L.position.setFromMatrixPosition(T.matrixWorld),L.position.applyMatrix4(S),L.color.copy(k).multiplyScalar(I),L.distance=N,L.direction.setFromMatrixPosition(T.matrixWorld),s.setFromMatrixPosition(T.target.matrixWorld),L.direction.sub(s),L.direction.transformDirection(S),L.coneCos=Math.cos(T.angle),L.penumbraCos=Math.cos(T.angle*(1-T.penumbra)),L.decay=T.decay,T.castShadow){const F=T.shadow,q=i.get(T);q.shadowBias=F.bias,q.shadowNormalBias=F.normalBias,q.shadowRadius=F.radius,q.shadowMapSize=F.mapSize,r.spotShadow[m]=q,r.spotShadowMap[m]=C,r.spotShadowMatrix[m]=T.shadow.matrix,E++}r.spot[m]=L,m++}else if(T.isRectAreaLight){const L=e.get(T);L.color.copy(k).multiplyScalar(I),L.position.setFromMatrixPosition(T.matrixWorld),L.position.applyMatrix4(S),a.identity(),o.copy(T.matrixWorld),o.premultiply(S),a.extractRotation(o),L.halfWidth.set(T.width*.5,0,0),L.halfHeight.set(0,T.height*.5,0),L.halfWidth.applyMatrix4(a),L.halfHeight.applyMatrix4(a),r.rectArea[p]=L,p++}else if(T.isPointLight){const L=e.get(T);if(L.position.setFromMatrixPosition(T.matrixWorld),L.position.applyMatrix4(S),L.color.copy(T.color).multiplyScalar(T.intensity),L.distance=T.distance,L.decay=T.decay,T.castShadow){const F=T.shadow,q=i.get(T);q.shadowBias=F.bias,q.shadowNormalBias=F.normalBias,q.shadowRadius=F.radius,q.shadowMapSize=F.mapSize,q.shadowCameraNear=F.camera.near,q.shadowCameraFar=F.camera.far,r.pointShadow[x]=q,r.pointShadowMap[x]=C,r.pointShadowMatrix[x]=T.shadow.matrix,w++}r.point[x]=L,x++}else if(T.isHemisphereLight){const L=e.get(T);L.direction.setFromMatrixPosition(T.matrixWorld),L.direction.transformDirection(S),L.direction.normalize(),L.skyColor.copy(T.color).multiplyScalar(I),L.groundColor.copy(T.groundColor).multiplyScalar(I),r.hemi[b]=L,b++}}p>0&&(t.isWebGL2||n.has("OES_texture_float_linear")===!0?(r.rectAreaLTC1=Rt.LTC_FLOAT_1,r.rectAreaLTC2=Rt.LTC_FLOAT_2):n.has("OES_texture_half_float_linear")===!0?(r.rectAreaLTC1=Rt.LTC_HALF_1,r.rectAreaLTC2=Rt.LTC_HALF_2):console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")),r.ambient[0]=d,r.ambient[1]=f,r.ambient[2]=g;const R=r.hash;(R.directionalLength!==v||R.pointLength!==x||R.spotLength!==m||R.rectAreaLength!==p||R.hemiLength!==b||R.numDirectionalShadows!==_||R.numPointShadows!==w||R.numSpotShadows!==E)&&(r.directional.length=v,r.spot.length=m,r.rectArea.length=p,r.point.length=x,r.hemi.length=b,r.directionalShadow.length=_,r.directionalShadowMap.length=_,r.pointShadow.length=w,r.pointShadowMap.length=w,r.spotShadow.length=E,r.spotShadowMap.length=E,r.directionalShadowMatrix.length=_,r.pointShadowMatrix.length=w,r.spotShadowMatrix.length=E,R.directionalLength=v,R.pointLength=x,R.spotLength=m,R.rectAreaLength=p,R.hemiLength=b,R.numDirectionalShadows=_,R.numPointShadows=w,R.numSpotShadows=E,r.version=UL++)}return{setup:l,state:r}}function Jm(n,t){const e=new GL(n,t),i=[],r=[];function s(){i.length=0,r.length=0}function o(h){i.push(h)}function a(h){r.push(h)}function l(h){e.setup(i,r,h)}return{init:s,state:{lightsArray:i,shadowsArray:r,lights:e},setupLights:l,pushLight:o,pushShadow:a}}function kL(n,t){let e=new WeakMap;function i(s,o){let a;return e.has(s)===!1?(a=new Jm(n,t),e.set(s,new WeakMap),e.get(s).set(o,a)):e.get(s).has(o)===!1?(a=new Jm(n,t),e.get(s).set(o,a)):a=e.get(s).get(o),a}function r(){e=new WeakMap}return{get:i,dispose:r}}function br(n){Gt.call(this),this.type="MeshDepthMaterial",this.depthPacking=P1,this.skinning=!1,this.morphTargets=!1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.setValues(n)}br.prototype=Object.create(Gt.prototype);br.prototype.constructor=br;br.prototype.isMeshDepthMaterial=!0;br.prototype.copy=function(n){return Gt.prototype.copy.call(this,n),this.depthPacking=n.depthPacking,this.skinning=n.skinning,this.morphTargets=n.morphTargets,this.map=n.map,this.alphaMap=n.alphaMap,this.displacementMap=n.displacementMap,this.displacementScale=n.displacementScale,this.displacementBias=n.displacementBias,this.wireframe=n.wireframe,this.wireframeLinewidth=n.wireframeLinewidth,this};function Mr(n){Gt.call(this),this.type="MeshDistanceMaterial",this.referencePosition=new H,this.nearDistance=1,this.farDistance=1e3,this.skinning=!1,this.morphTargets=!1,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.fog=!1,this.setValues(n)}Mr.prototype=Object.create(Gt.prototype);Mr.prototype.constructor=Mr;Mr.prototype.isMeshDistanceMaterial=!0;Mr.prototype.copy=function(n){return Gt.prototype.copy.call(this,n),this.referencePosition.copy(n.referencePosition),this.nearDistance=n.nearDistance,this.farDistance=n.farDistance,this.skinning=n.skinning,this.morphTargets=n.morphTargets,this.map=n.map,this.alphaMap=n.alphaMap,this.displacementMap=n.displacementMap,this.displacementScale=n.displacementScale,this.displacementBias=n.displacementBias,this};var VL=`uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	float mean = 0.0;
	float squared_mean = 0.0;
	float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy ) / resolution ) );
	for ( float i = -1.0; i < 1.0 ; i += SAMPLE_RATE) {
		#ifdef HORIZONAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, i ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean * HALF_SAMPLE_RATE;
	squared_mean = squared_mean * HALF_SAMPLE_RATE;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`,WL=`void main() {
	gl_Position = vec4( position, 1.0 );
}`;function Qm(n,t,e){let i=new Hl;const r=new wt,s=new wt,o=new ae,a=[],l=[],c={},h={0:Ne,1:pl,2:ml},u=new rn({defines:{SAMPLE_RATE:2/8,HALF_SAMPLE_RATE:1/8},uniforms:{shadow_pass:{value:null},resolution:{value:new wt},radius:{value:4}},vertexShader:WL,fragmentShader:VL}),d=u.clone();d.defines.HORIZONAL_PASS=1;const f=new le;f.setAttribute("position",new kt(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const g=new $e(f,u),v=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=Gp,this.render=function(w,E,S){if(v.enabled===!1||v.autoUpdate===!1&&v.needsUpdate===!1||w.length===0)return;const R=n.getRenderTarget(),W=n.getActiveCubeFace(),B=n.getActiveMipmapLevel(),T=n.state;T.setBlending(zo),T.buffers.color.setClear(1,1,1,1),T.buffers.depth.setTest(!0),T.setScissorTest(!1);for(let k=0,I=w.length;k<I;k++){const N=w[k],C=N.shadow;if(C===void 0){console.warn("THREE.WebGLShadowMap:",N,"has no shadow.");continue}if(C.autoUpdate===!1&&C.needsUpdate===!1)continue;r.copy(C.mapSize);const L=C.getFrameExtents();if(r.multiply(L),s.copy(C.mapSize),(r.x>e||r.y>e)&&(r.x>e&&(s.x=Math.floor(e/L.x),r.x=s.x*L.x,C.mapSize.x=s.x),r.y>e&&(s.y=Math.floor(e/L.y),r.y=s.y*L.y,C.mapSize.y=s.y)),C.map===null&&!C.isPointLightShadow&&this.type===Oo){const q={minFilter:Ve,magFilter:Ve,format:Rn};C.map=new Pn(r.x,r.y,q),C.map.texture.name=N.name+".shadowMap",C.mapPass=new Pn(r.x,r.y,q),C.camera.updateProjectionMatrix()}if(C.map===null){const q={minFilter:Je,magFilter:Je,format:Rn};C.map=new Pn(r.x,r.y,q),C.map.texture.name=N.name+".shadowMap",C.camera.updateProjectionMatrix()}n.setRenderTarget(C.map),n.clear();const F=C.getViewportCount();for(let q=0;q<F;q++){const ot=C.getViewport(q);o.set(s.x*ot.x,s.y*ot.y,s.x*ot.z,s.y*ot.w),T.viewport(o),C.updateMatrices(N,q),i=C.getFrustum(),_(E,S,C.camera,N,this.type)}!C.isPointLightShadow&&this.type===Oo&&x(C,S),C.needsUpdate=!1}v.needsUpdate=!1,n.setRenderTarget(R,W,B)};function x(w,E){const S=t.update(g);u.uniforms.shadow_pass.value=w.map.texture,u.uniforms.resolution.value=w.mapSize,u.uniforms.radius.value=w.radius,n.setRenderTarget(w.mapPass),n.clear(),n.renderBufferDirect(E,null,S,u,g,null),d.uniforms.shadow_pass.value=w.mapPass.texture,d.uniforms.resolution.value=w.mapSize,d.uniforms.radius.value=w.radius,n.setRenderTarget(w.map),n.clear(),n.renderBufferDirect(E,null,S,d,g,null)}function m(w,E,S){const R=w<<0|E<<1|S<<2;let W=a[R];return W===void 0&&(W=new br({depthPacking:I1,morphTargets:w,skinning:E}),a[R]=W),W}function p(w,E,S){const R=w<<0|E<<1|S<<2;let W=l[R];return W===void 0&&(W=new Mr({morphTargets:w,skinning:E}),l[R]=W),W}function b(w,E,S,R,W,B,T){let k=null,I=m,N=w.customDepthMaterial;if(R.isPointLight===!0&&(I=p,N=w.customDistanceMaterial),N===void 0){let C=!1;S.morphTargets===!0&&(C=E.morphAttributes&&E.morphAttributes.position&&E.morphAttributes.position.length>0);let L=!1;w.isSkinnedMesh===!0&&(S.skinning===!0?L=!0:console.warn("THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:",w));const F=w.isInstancedMesh===!0;k=I(C,L,F)}else k=N;if(n.localClippingEnabled&&S.clipShadows===!0&&S.clippingPlanes.length!==0){const C=k.uuid,L=S.uuid;let F=c[C];F===void 0&&(F={},c[C]=F);let q=F[L];q===void 0&&(q=k.clone(),F[L]=q),k=q}return k.visible=S.visible,k.wireframe=S.wireframe,T===Oo?k.side=S.shadowSide!==null?S.shadowSide:S.side:k.side=S.shadowSide!==null?S.shadowSide:h[S.side],k.clipShadows=S.clipShadows,k.clippingPlanes=S.clippingPlanes,k.clipIntersection=S.clipIntersection,k.wireframeLinewidth=S.wireframeLinewidth,k.linewidth=S.linewidth,R.isPointLight===!0&&k.isMeshDistanceMaterial===!0&&(k.referencePosition.setFromMatrixPosition(R.matrixWorld),k.nearDistance=W,k.farDistance=B),k}function _(w,E,S,R,W){if(w.visible===!1)return;if(w.layers.test(E.layers)&&(w.isMesh||w.isLine||w.isPoints)&&(w.castShadow||w.receiveShadow&&W===Oo)&&(!w.frustumCulled||i.intersectsObject(w))){w.modelViewMatrix.multiplyMatrices(S.matrixWorldInverse,w.matrixWorld);const k=t.update(w),I=w.material;if(Array.isArray(I)){const N=k.groups;for(let C=0,L=N.length;C<L;C++){const F=N[C],q=I[F.materialIndex];if(q&&q.visible){const ot=b(w,k,q,R,S.near,S.far,W);n.renderBufferDirect(S,null,k,ot,w,F)}}}else if(I.visible){const N=b(w,k,I,R,S.near,S.far,W);n.renderBufferDirect(S,null,k,N,w,null)}}const T=w.children;for(let k=0,I=T.length;k<I;k++)_(T[k],E,S,R,W)}}function $L(n,t,e){const i=e.isWebGL2;function r(){let P=!1;const K=new ae;let ht=null;const gt=new ae(0,0,0,0);return{setMask:function(ct){ht!==ct&&!P&&(n.colorMask(ct,ct,ct,ct),ht=ct)},setLocked:function(ct){P=ct},setClear:function(ct,ut,U,dt,Z){Z===!0&&(ct*=dt,ut*=dt,U*=dt),K.set(ct,ut,U,dt),gt.equals(K)===!1&&(n.clearColor(ct,ut,U,dt),gt.copy(K))},reset:function(){P=!1,ht=null,gt.set(-1,0,0,0)}}}function s(){let P=!1,K=null,ht=null,gt=null;return{setTest:function(ct){ct?pt(2929):rt(2929)},setMask:function(ct){K!==ct&&!P&&(n.depthMask(ct),K=ct)},setFunc:function(ct){if(ht!==ct){if(ct)switch(ct){case mS:n.depthFunc(512);break;case gS:n.depthFunc(519);break;case vS:n.depthFunc(513);break;case Hh:n.depthFunc(515);break;case xS:n.depthFunc(514);break;case yS:n.depthFunc(518);break;case _S:n.depthFunc(516);break;case bS:n.depthFunc(517);break;default:n.depthFunc(515)}else n.depthFunc(515);ht=ct}},setLocked:function(ct){P=ct},setClear:function(ct){gt!==ct&&(n.clearDepth(ct),gt=ct)},reset:function(){P=!1,K=null,ht=null,gt=null}}}function o(){let P=!1,K=null,ht=null,gt=null,ct=null,ut=null,U=null,dt=null,Z=null;return{setTest:function(xt){P||(xt?pt(2960):rt(2960))},setMask:function(xt){K!==xt&&!P&&(n.stencilMask(xt),K=xt)},setFunc:function(xt,z,Mt){(ht!==xt||gt!==z||ct!==Mt)&&(n.stencilFunc(xt,z,Mt),ht=xt,gt=z,ct=Mt)},setOp:function(xt,z,Mt){(ut!==xt||U!==z||dt!==Mt)&&(n.stencilOp(xt,z,Mt),ut=xt,U=z,dt=Mt)},setLocked:function(xt){P=xt},setClear:function(xt){Z!==xt&&(n.clearStencil(xt),Z=xt)},reset:function(){P=!1,K=null,ht=null,gt=null,ct=null,ut=null,U=null,dt=null,Z=null}}}const a=new r,l=new s,c=new o;let h={},u=null,d=null,f=null,g=null,v=null,x=null,m=null,p=null,b=null,_=!1,w=null,E=null,S=null,R=null,W=null;const B=n.getParameter(35661);let T=!1,k=0;const I=n.getParameter(7938);I.indexOf("WebGL")!==-1?(k=parseFloat(/^WebGL\ ([0-9])/.exec(I)[1]),T=k>=1):I.indexOf("OpenGL ES")!==-1&&(k=parseFloat(/^OpenGL\ ES\ ([0-9])/.exec(I)[1]),T=k>=2);let N=null,C={};const L=new ae,F=new ae;function q(P,K,ht){const gt=new Uint8Array(4),ct=n.createTexture();n.bindTexture(P,ct),n.texParameteri(P,10241,9728),n.texParameteri(P,10240,9728);for(let ut=0;ut<ht;ut++)n.texImage2D(K+ut,0,6408,1,1,0,6408,5121,gt);return ct}const ot={};ot[3553]=q(3553,3553,1),ot[34067]=q(34067,34069,6),a.setClear(0,0,0,1),l.setClear(1),c.setClear(0),pt(2929),l.setFunc(Hh),_t(!1),Lt(Hp),pt(2884),Y(zo);function pt(P){h[P]!==!0&&(n.enable(P),h[P]=!0)}function rt(P){h[P]!==!1&&(n.disable(P),h[P]=!1)}function Et(P){return u!==P?(n.useProgram(P),u=P,!0):!1}const it={[vs]:32774,[rS]:32778,[sS]:32779};if(i)it[qp]=32775,it[jp]=32776;else{const P=t.get("EXT_blend_minmax");P!==null&&(it[qp]=P.MIN_EXT,it[jp]=P.MAX_EXT)}const vt={[oS]:0,[aS]:1,[lS]:768,[Xp]:770,[pS]:776,[dS]:774,[hS]:772,[cS]:769,[Yp]:771,[fS]:775,[uS]:773};function Y(P,K,ht,gt,ct,ut,U,dt){if(P===zo){d&&(rt(3042),d=!1);return}if(d||(pt(3042),d=!0),P!==iS){if(P!==f||dt!==_){if((g!==vs||m!==vs)&&(n.blendEquation(32774),g=vs,m=vs),dt)switch(P){case Uo:n.blendFuncSeparate(1,771,1,771);break;case Vp:n.blendFunc(1,1);break;case Wp:n.blendFuncSeparate(0,0,769,771);break;case $p:n.blendFuncSeparate(0,768,0,770);break;default:console.error("THREE.WebGLState: Invalid blending: ",P);break}else switch(P){case Uo:n.blendFuncSeparate(770,771,1,771);break;case Vp:n.blendFunc(770,1);break;case Wp:n.blendFunc(0,769);break;case $p:n.blendFunc(0,768);break;default:console.error("THREE.WebGLState: Invalid blending: ",P);break}v=null,x=null,p=null,b=null,f=P,_=dt}return}ct=ct||K,ut=ut||ht,U=U||gt,(K!==g||ct!==m)&&(n.blendEquationSeparate(it[K],it[ct]),g=K,m=ct),(ht!==v||gt!==x||ut!==p||U!==b)&&(n.blendFuncSeparate(vt[ht],vt[gt],vt[ut],vt[U]),v=ht,x=gt,p=ut,b=U),f=P,_=null}function st(P,K){P.side===ml?rt(2884):pt(2884);let ht=P.side===Ne;K&&(ht=!ht),_t(ht),P.blending===Uo&&P.transparent===!1?Y(zo):Y(P.blending,P.blendEquation,P.blendSrc,P.blendDst,P.blendEquationAlpha,P.blendSrcAlpha,P.blendDstAlpha,P.premultipliedAlpha),l.setFunc(P.depthFunc),l.setTest(P.depthTest),l.setMask(P.depthWrite),a.setMask(P.colorWrite);const gt=P.stencilWrite;c.setTest(gt),gt&&(c.setMask(P.stencilWriteMask),c.setFunc(P.stencilFunc,P.stencilRef,P.stencilFuncMask),c.setOp(P.stencilFail,P.stencilZFail,P.stencilZPass)),St(P.polygonOffset,P.polygonOffsetFactor,P.polygonOffsetUnits)}function _t(P){w!==P&&(P?n.frontFace(2304):n.frontFace(2305),w=P)}function Lt(P){P!==tS?(pt(2884),P!==E&&(P===Hp?n.cullFace(1029):P===eS?n.cullFace(1028):n.cullFace(1032))):rt(2884),E=P}function yt(P){P!==S&&(T&&n.lineWidth(P),S=P)}function St(P,K,ht){P?(pt(32823),(R!==K||W!==ht)&&(n.polygonOffset(K,ht),R=K,W=ht)):rt(32823)}function At(P){P?pt(3089):rt(3089)}function V(P){P===void 0&&(P=33984+B-1),N!==P&&(n.activeTexture(P),N=P)}function X(P,K){N===null&&V();let ht=C[N];ht===void 0&&(ht={type:void 0,texture:void 0},C[N]=ht),(ht.type!==P||ht.texture!==K)&&(n.bindTexture(P,K||ot[P]),ht.type=P,ht.texture=K)}function Q(){const P=C[N];P!==void 0&&P.type!==void 0&&(n.bindTexture(P.type,null),P.type=void 0,P.texture=void 0)}function mt(){try{n.compressedTexImage2D.apply(n,arguments)}catch(P){console.error("THREE.WebGLState:",P)}}function et(){try{n.texImage2D.apply(n,arguments)}catch(P){console.error("THREE.WebGLState:",P)}}function M(){try{n.texImage3D.apply(n,arguments)}catch(P){console.error("THREE.WebGLState:",P)}}function y(P){L.equals(P)===!1&&(n.scissor(P.x,P.y,P.z,P.w),L.copy(P))}function G(P){F.equals(P)===!1&&(n.viewport(P.x,P.y,P.z,P.w),F.copy(P))}function $(){h={},N=null,C={},u=null,f=null,w=null,E=null,a.reset(),l.reset(),c.reset()}return{buffers:{color:a,depth:l,stencil:c},enable:pt,disable:rt,useProgram:Et,setBlending:Y,setMaterial:st,setFlipSided:_t,setCullFace:Lt,setLineWidth:yt,setPolygonOffset:St,setScissorTest:At,activeTexture:V,bindTexture:X,unbindTexture:Q,compressedTexImage2D:mt,texImage2D:et,texImage3D:M,scissor:y,viewport:G,reset:$}}function qL(n,t,e,i,r,s,o){const a=r.isWebGL2,l=r.maxTextures,c=r.maxCubemapSize,h=r.maxTextureSize,u=r.maxSamples,d=new WeakMap;let f,g=!1;try{g=typeof OffscreenCanvas!="undefined"&&new OffscreenCanvas(1,1).getContext("2d")!==null}catch{}function v(M,y){return g?new OffscreenCanvas(M,y):document.createElementNS("http://www.w3.org/1999/xhtml","canvas")}function x(M,y,G,$){let P=1;if((M.width>$||M.height>$)&&(P=$/Math.max(M.width,M.height)),P<1||y===!0)if(typeof HTMLImageElement!="undefined"&&M instanceof HTMLImageElement||typeof HTMLCanvasElement!="undefined"&&M instanceof HTMLCanvasElement||typeof ImageBitmap!="undefined"&&M instanceof ImageBitmap){const K=y?Vt.floorPowerOfTwo:Math.floor,ht=K(P*M.width),gt=K(P*M.height);f===void 0&&(f=v(ht,gt));const ct=G?v(ht,gt):f;return ct.width=ht,ct.height=gt,ct.getContext("2d").drawImage(M,0,0,ht,gt),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+M.width+"x"+M.height+") to ("+ht+"x"+gt+")."),ct}else return"data"in M&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+M.width+"x"+M.height+")."),M;return M}function m(M){return Vt.isPowerOfTwo(M.width)&&Vt.isPowerOfTwo(M.height)}function p(M){return a?!1:M.wrapS!==cn||M.wrapT!==cn||M.minFilter!==Je&&M.minFilter!==Ve}function b(M,y){return M.generateMipmaps&&y&&M.minFilter!==Je&&M.minFilter!==Ve}function _(M,y,G,$){n.generateMipmap(M);const P=i.get(y);P.__maxMipLevel=Math.log(Math.max(G,$))*Math.LOG2E}function w(M,y,G){if(a===!1)return y;if(M!==null){if(n[M]!==void 0)return n[M];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+M+"'")}let $=y;return y===6403&&(G===5126&&($=33326),G===5131&&($=33325),G===5121&&($=33321)),y===6407&&(G===5126&&($=34837),G===5131&&($=34843),G===5121&&($=32849)),y===6408&&(G===5126&&($=34836),G===5131&&($=34842),G===5121&&($=32856)),($===33325||$===33326||$===34842||$===34836)&&t.get("EXT_color_buffer_float"),$}function E(M){return M===Je||M===Kp||M===tm?9728:9729}function S(M){const y=M.target;y.removeEventListener("dispose",S),W(y),y.isVideoTexture&&d.delete(y),o.memory.textures--}function R(M){const y=M.target;y.removeEventListener("dispose",R),B(y),o.memory.textures--}function W(M){const y=i.get(M);y.__webglInit!==void 0&&(n.deleteTexture(y.__webglTexture),i.remove(M))}function B(M){const y=i.get(M),G=i.get(M.texture);if(!!M){if(G.__webglTexture!==void 0&&n.deleteTexture(G.__webglTexture),M.depthTexture&&M.depthTexture.dispose(),M.isWebGLCubeRenderTarget)for(let $=0;$<6;$++)n.deleteFramebuffer(y.__webglFramebuffer[$]),y.__webglDepthbuffer&&n.deleteRenderbuffer(y.__webglDepthbuffer[$]);else n.deleteFramebuffer(y.__webglFramebuffer),y.__webglDepthbuffer&&n.deleteRenderbuffer(y.__webglDepthbuffer),y.__webglMultisampledFramebuffer&&n.deleteFramebuffer(y.__webglMultisampledFramebuffer),y.__webglColorRenderbuffer&&n.deleteRenderbuffer(y.__webglColorRenderbuffer),y.__webglDepthRenderbuffer&&n.deleteRenderbuffer(y.__webglDepthRenderbuffer);i.remove(M.texture),i.remove(M)}}let T=0;function k(){T=0}function I(){const M=T;return M>=l&&console.warn("THREE.WebGLTextures: Trying to use "+M+" texture units while this GPU supports only "+l),T+=1,M}function N(M,y){const G=i.get(M);if(M.isVideoTexture&&V(M),M.version>0&&G.__version!==M.version){const $=M.image;if($===void 0)console.warn("THREE.WebGLRenderer: Texture marked for update but image is undefined");else if($.complete===!1)console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");else{Et(G,M,y);return}}e.activeTexture(33984+y),e.bindTexture(3553,G.__webglTexture)}function C(M,y){const G=i.get(M);if(M.version>0&&G.__version!==M.version){Et(G,M,y);return}e.activeTexture(33984+y),e.bindTexture(35866,G.__webglTexture)}function L(M,y){const G=i.get(M);if(M.version>0&&G.__version!==M.version){Et(G,M,y);return}e.activeTexture(33984+y),e.bindTexture(32879,G.__webglTexture)}function F(M,y){const G=i.get(M);if(M.version>0&&G.__version!==M.version){it(G,M,y);return}e.activeTexture(33984+y),e.bindTexture(34067,G.__webglTexture)}const q={[$h]:10497,[cn]:33071,[qh]:33648},ot={[Je]:9728,[Kp]:9984,[tm]:9986,[Ve]:9729,[CS]:9985,[vl]:9987};function pt(M,y,G){G?(n.texParameteri(M,10242,q[y.wrapS]),n.texParameteri(M,10243,q[y.wrapT]),(M===32879||M===35866)&&n.texParameteri(M,32882,q[y.wrapR]),n.texParameteri(M,10240,ot[y.magFilter]),n.texParameteri(M,10241,ot[y.minFilter])):(n.texParameteri(M,10242,33071),n.texParameteri(M,10243,33071),(M===32879||M===35866)&&n.texParameteri(M,32882,33071),(y.wrapS!==cn||y.wrapT!==cn)&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),n.texParameteri(M,10240,E(y.magFilter)),n.texParameteri(M,10241,E(y.minFilter)),y.minFilter!==Je&&y.minFilter!==Ve&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter."));const $=t.get("EXT_texture_filter_anisotropic");if($){if(y.type===Gi&&t.get("OES_texture_float_linear")===null||y.type===_l&&(a||t.get("OES_texture_half_float_linear"))===null)return;(y.anisotropy>1||i.get(y).__currentAnisotropy)&&(n.texParameterf(M,$.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(y.anisotropy,r.getMaxAnisotropy())),i.get(y).__currentAnisotropy=y.anisotropy)}}function rt(M,y){M.__webglInit===void 0&&(M.__webglInit=!0,y.addEventListener("dispose",S),M.__webglTexture=n.createTexture(),o.memory.textures++)}function Et(M,y,G){let $=3553;y.isDataTexture2DArray&&($=35866),y.isDataTexture3D&&($=32879),rt(M,y),e.activeTexture(33984+G),e.bindTexture($,M.__webglTexture),n.pixelStorei(37440,y.flipY),n.pixelStorei(37441,y.premultiplyAlpha),n.pixelStorei(3317,y.unpackAlignment);const P=p(y)&&m(y.image)===!1,K=x(y.image,P,!1,h),ht=m(K)||a,gt=s.convert(y.format);let ct=s.convert(y.type),ut=w(y.internalFormat,gt,ct);pt($,y,ht);let U;const dt=y.mipmaps;if(y.isDepthTexture)ut=6402,a?y.type===Gi?ut=36012:y.type===yl?ut=33190:y.type===Go?ut=35056:ut=33189:y.type===Gi&&console.error("WebGLRenderer: Floating point depth texture requires WebGL2."),y.format===xs&&ut===6402&&y.type!==xl&&y.type!==yl&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),y.type=xl,ct=s.convert(y.type)),y.format===ko&&ut===6402&&(ut=34041,y.type!==Go&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),y.type=Go,ct=s.convert(y.type))),e.texImage2D(3553,0,ut,K.width,K.height,0,gt,ct,null);else if(y.isDataTexture)if(dt.length>0&&ht){for(let Z=0,xt=dt.length;Z<xt;Z++)U=dt[Z],e.texImage2D(3553,Z,ut,U.width,U.height,0,gt,ct,U.data);y.generateMipmaps=!1,M.__maxMipLevel=dt.length-1}else e.texImage2D(3553,0,ut,K.width,K.height,0,gt,ct,K.data),M.__maxMipLevel=0;else if(y.isCompressedTexture){for(let Z=0,xt=dt.length;Z<xt;Z++)U=dt[Z],y.format!==Rn&&y.format!==pr?gt!==null?e.compressedTexImage2D(3553,Z,ut,U.width,U.height,0,U.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):e.texImage2D(3553,Z,ut,U.width,U.height,0,gt,ct,U.data);M.__maxMipLevel=dt.length-1}else if(y.isDataTexture2DArray)e.texImage3D(35866,0,ut,K.width,K.height,K.depth,0,gt,ct,K.data),M.__maxMipLevel=0;else if(y.isDataTexture3D)e.texImage3D(32879,0,ut,K.width,K.height,K.depth,0,gt,ct,K.data),M.__maxMipLevel=0;else if(dt.length>0&&ht){for(let Z=0,xt=dt.length;Z<xt;Z++)U=dt[Z],e.texImage2D(3553,Z,ut,gt,ct,U);y.generateMipmaps=!1,M.__maxMipLevel=dt.length-1}else e.texImage2D(3553,0,ut,gt,ct,K),M.__maxMipLevel=0;b(y,ht)&&_($,y,K.width,K.height),M.__version=y.version,y.onUpdate&&y.onUpdate(y)}function it(M,y,G){if(y.image.length!==6)return;rt(M,y),e.activeTexture(33984+G),e.bindTexture(34067,M.__webglTexture),n.pixelStorei(37440,y.flipY);const $=y&&(y.isCompressedTexture||y.image[0].isCompressedTexture),P=y.image[0]&&y.image[0].isDataTexture,K=[];for(let Z=0;Z<6;Z++)!$&&!P?K[Z]=x(y.image[Z],!1,!0,c):K[Z]=P?y.image[Z].image:y.image[Z];const ht=K[0],gt=m(ht)||a,ct=s.convert(y.format),ut=s.convert(y.type),U=w(y.internalFormat,ct,ut);pt(34067,y,gt);let dt;if($){for(let Z=0;Z<6;Z++){dt=K[Z].mipmaps;for(let xt=0;xt<dt.length;xt++){const z=dt[xt];y.format!==Rn&&y.format!==pr?ct!==null?e.compressedTexImage2D(34069+Z,xt,U,z.width,z.height,0,z.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):e.texImage2D(34069+Z,xt,U,z.width,z.height,0,ct,ut,z.data)}}M.__maxMipLevel=dt.length-1}else{dt=y.mipmaps;for(let Z=0;Z<6;Z++)if(P){e.texImage2D(34069+Z,0,U,K[Z].width,K[Z].height,0,ct,ut,K[Z].data);for(let xt=0;xt<dt.length;xt++){const Mt=dt[xt].image[Z].image;e.texImage2D(34069+Z,xt+1,U,Mt.width,Mt.height,0,ct,ut,Mt.data)}}else{e.texImage2D(34069+Z,0,U,ct,ut,K[Z]);for(let xt=0;xt<dt.length;xt++){const z=dt[xt];e.texImage2D(34069+Z,xt+1,U,ct,ut,z.image[Z])}}M.__maxMipLevel=dt.length}b(y,gt)&&_(34067,y,ht.width,ht.height),M.__version=y.version,y.onUpdate&&y.onUpdate(y)}function vt(M,y,G,$){const P=s.convert(y.texture.format),K=s.convert(y.texture.type),ht=w(y.texture.internalFormat,P,K);e.texImage2D($,0,ht,y.width,y.height,0,P,K,null),n.bindFramebuffer(36160,M),n.framebufferTexture2D(36160,G,$,i.get(y.texture).__webglTexture,0),n.bindFramebuffer(36160,null)}function Y(M,y,G){if(n.bindRenderbuffer(36161,M),y.depthBuffer&&!y.stencilBuffer){let $=33189;if(G){const P=y.depthTexture;P&&P.isDepthTexture&&(P.type===Gi?$=36012:P.type===yl&&($=33190));const K=At(y);n.renderbufferStorageMultisample(36161,K,$,y.width,y.height)}else n.renderbufferStorage(36161,$,y.width,y.height);n.framebufferRenderbuffer(36160,36096,36161,M)}else if(y.depthBuffer&&y.stencilBuffer){if(G){const $=At(y);n.renderbufferStorageMultisample(36161,$,35056,y.width,y.height)}else n.renderbufferStorage(36161,34041,y.width,y.height);n.framebufferRenderbuffer(36160,33306,36161,M)}else{const $=s.convert(y.texture.format),P=s.convert(y.texture.type),K=w(y.texture.internalFormat,$,P);if(G){const ht=At(y);n.renderbufferStorageMultisample(36161,ht,K,y.width,y.height)}else n.renderbufferStorage(36161,K,y.width,y.height)}n.bindRenderbuffer(36161,null)}function st(M,y){if(y&&y.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(n.bindFramebuffer(36160,M),!(y.depthTexture&&y.depthTexture.isDepthTexture))throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");(!i.get(y.depthTexture).__webglTexture||y.depthTexture.image.width!==y.width||y.depthTexture.image.height!==y.height)&&(y.depthTexture.image.width=y.width,y.depthTexture.image.height=y.height,y.depthTexture.needsUpdate=!0),N(y.depthTexture,0);const $=i.get(y.depthTexture).__webglTexture;if(y.depthTexture.format===xs)n.framebufferTexture2D(36160,36096,3553,$,0);else if(y.depthTexture.format===ko)n.framebufferTexture2D(36160,33306,3553,$,0);else throw new Error("Unknown depthTexture format")}function _t(M){const y=i.get(M),G=M.isWebGLCubeRenderTarget===!0;if(M.depthTexture){if(G)throw new Error("target.depthTexture not supported in Cube render targets");st(y.__webglFramebuffer,M)}else if(G){y.__webglDepthbuffer=[];for(let $=0;$<6;$++)n.bindFramebuffer(36160,y.__webglFramebuffer[$]),y.__webglDepthbuffer[$]=n.createRenderbuffer(),Y(y.__webglDepthbuffer[$],M,!1)}else n.bindFramebuffer(36160,y.__webglFramebuffer),y.__webglDepthbuffer=n.createRenderbuffer(),Y(y.__webglDepthbuffer,M,!1);n.bindFramebuffer(36160,null)}function Lt(M){const y=i.get(M),G=i.get(M.texture);M.addEventListener("dispose",R),G.__webglTexture=n.createTexture(),o.memory.textures++;const $=M.isWebGLCubeRenderTarget===!0,P=M.isWebGLMultisampleRenderTarget===!0,K=m(M)||a;if(a&&M.texture.format===pr&&(M.texture.type===Gi||M.texture.type===_l)&&(M.texture.format=Rn,console.warn("THREE.WebGLRenderer: Rendering to textures with RGB format is not supported. Using RGBA format instead.")),$){y.__webglFramebuffer=[];for(let ht=0;ht<6;ht++)y.__webglFramebuffer[ht]=n.createFramebuffer()}else if(y.__webglFramebuffer=n.createFramebuffer(),P)if(a){y.__webglMultisampledFramebuffer=n.createFramebuffer(),y.__webglColorRenderbuffer=n.createRenderbuffer(),n.bindRenderbuffer(36161,y.__webglColorRenderbuffer);const ht=s.convert(M.texture.format),gt=s.convert(M.texture.type),ct=w(M.texture.internalFormat,ht,gt),ut=At(M);n.renderbufferStorageMultisample(36161,ut,ct,M.width,M.height),n.bindFramebuffer(36160,y.__webglMultisampledFramebuffer),n.framebufferRenderbuffer(36160,36064,36161,y.__webglColorRenderbuffer),n.bindRenderbuffer(36161,null),M.depthBuffer&&(y.__webglDepthRenderbuffer=n.createRenderbuffer(),Y(y.__webglDepthRenderbuffer,M,!0)),n.bindFramebuffer(36160,null)}else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.");if($){e.bindTexture(34067,G.__webglTexture),pt(34067,M.texture,K);for(let ht=0;ht<6;ht++)vt(y.__webglFramebuffer[ht],M,36064,34069+ht);b(M.texture,K)&&_(34067,M.texture,M.width,M.height),e.bindTexture(34067,null)}else e.bindTexture(3553,G.__webglTexture),pt(3553,M.texture,K),vt(y.__webglFramebuffer,M,36064,3553),b(M.texture,K)&&_(3553,M.texture,M.width,M.height),e.bindTexture(3553,null);M.depthBuffer&&_t(M)}function yt(M){const y=M.texture,G=m(M)||a;if(b(y,G)){const $=M.isWebGLCubeRenderTarget?34067:3553,P=i.get(y).__webglTexture;e.bindTexture($,P),_($,y,M.width,M.height),e.bindTexture($,null)}}function St(M){if(M.isWebGLMultisampleRenderTarget)if(a){const y=i.get(M);n.bindFramebuffer(36008,y.__webglMultisampledFramebuffer),n.bindFramebuffer(36009,y.__webglFramebuffer);const G=M.width,$=M.height;let P=16384;M.depthBuffer&&(P|=256),M.stencilBuffer&&(P|=1024),n.blitFramebuffer(0,0,G,$,0,0,G,$,P,9728),n.bindFramebuffer(36160,y.__webglMultisampledFramebuffer)}else console.warn("THREE.WebGLRenderer: WebGLMultisampleRenderTarget can only be used with WebGL2.")}function At(M){return a&&M.isWebGLMultisampleRenderTarget?Math.min(u,M.samples):0}function V(M){const y=o.render.frame;d.get(M)!==y&&(d.set(M,y),M.update())}let X=!1,Q=!1;function mt(M,y){M&&M.isWebGLRenderTarget&&(X===!1&&(console.warn("THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead."),X=!0),M=M.texture),N(M,y)}function et(M,y){M&&M.isWebGLCubeRenderTarget&&(Q===!1&&(console.warn("THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead."),Q=!0),M=M.texture),F(M,y)}this.allocateTextureUnit=I,this.resetTextureUnits=k,this.setTexture2D=N,this.setTexture2DArray=C,this.setTexture3D=L,this.setTextureCube=F,this.setupRenderTarget=Lt,this.updateRenderTargetMipmap=yt,this.updateMultisampleRenderTarget=St,this.safeSetTexture2D=mt,this.safeSetTextureCube=et}function jL(n,t,e){const i=e.isWebGL2;function r(s){let o;if(s===jh)return 5121;if(s===DS)return 32819;if(s===NS)return 32820;if(s===FS)return 33635;if(s===RS)return 5120;if(s===PS)return 5122;if(s===xl)return 5123;if(s===IS)return 5124;if(s===yl)return 5125;if(s===Gi)return 5126;if(s===_l)return i?5131:(o=t.get("OES_texture_half_float"),o!==null?o.HALF_FLOAT_OES:null);if(s===BS)return 6406;if(s===pr)return 6407;if(s===Rn)return 6408;if(s===OS)return 6409;if(s===zS)return 6410;if(s===xs)return 6402;if(s===ko)return 34041;if(s===US)return 6403;if(s===HS)return 36244;if(s===GS)return 33319;if(s===kS)return 33320;if(s===VS)return 36248;if(s===WS)return 36249;if(s===em||s===nm||s===im||s===rm)if(o=t.get("WEBGL_compressed_texture_s3tc"),o!==null){if(s===em)return o.COMPRESSED_RGB_S3TC_DXT1_EXT;if(s===nm)return o.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(s===im)return o.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(s===rm)return o.COMPRESSED_RGBA_S3TC_DXT5_EXT}else return null;if(s===sm||s===om||s===am||s===lm)if(o=t.get("WEBGL_compressed_texture_pvrtc"),o!==null){if(s===sm)return o.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(s===om)return o.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(s===am)return o.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(s===lm)return o.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}else return null;if(s===$S)return o=t.get("WEBGL_compressed_texture_etc1"),o!==null?o.COMPRESSED_RGB_ETC1_WEBGL:null;if((s===cm||s===hm)&&(o=t.get("WEBGL_compressed_texture_etc"),o!==null)){if(s===cm)return o.COMPRESSED_RGB8_ETC2;if(s===hm)return o.COMPRESSED_RGBA8_ETC2_EAC}if(s===qS||s===jS||s===XS||s===YS||s===ZS||s===JS||s===QS||s===KS||s===t1||s===e1||s===n1||s===i1||s===r1||s===s1||s===a1||s===l1||s===c1||s===h1||s===u1||s===d1||s===f1||s===p1||s===m1||s===g1||s===v1||s===x1||s===y1||s===_1)return o=t.get("WEBGL_compressed_texture_astc"),o!==null?s:null;if(s===o1)return o=t.get("EXT_texture_compression_bptc"),o!==null?s:null;if(s===Go)return i?34042:(o=t.get("WEBGL_depth_texture"),o!==null?o.UNSIGNED_INT_24_8_WEBGL:null)}return{convert:r}}function Eu(n){Be.call(this),this.cameras=n||[]}Eu.prototype=Object.assign(Object.create(Be.prototype),{constructor:Eu,isArrayCamera:!0});function Gs(){Ut.call(this),this.type="Group"}Gs.prototype=Object.assign(Object.create(Ut.prototype),{constructor:Gs,isGroup:!0});function ra(){this._targetRay=null,this._grip=null,this._hand=null}Object.assign(ra.prototype,{constructor:ra,getHandSpace:function(){if(this._hand===null&&(this._hand=new Gs,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints=[],this._hand.inputState={pinching:!1},window.XRHand))for(let n=0;n<=window.XRHand.LITTLE_PHALANX_TIP;n++){const t=new Gs;t.matrixAutoUpdate=!1,t.visible=!1,this._hand.joints.push(t),this._hand.add(t)}return this._hand},getTargetRaySpace:function(){return this._targetRay===null&&(this._targetRay=new Gs,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1),this._targetRay},getGripSpace:function(){return this._grip===null&&(this._grip=new Gs,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1),this._grip},dispatchEvent:function(n){return this._targetRay!==null&&this._targetRay.dispatchEvent(n),this._grip!==null&&this._grip.dispatchEvent(n),this._hand!==null&&this._hand.dispatchEvent(n),this},disconnect:function(n){return this.dispatchEvent({type:"disconnected",data:n}),this._targetRay!==null&&(this._targetRay.visible=!1),this._grip!==null&&(this._grip.visible=!1),this._hand!==null&&(this._hand.visible=!1),this},update:function(n,t,e){let i=null,r=null,s=null;const o=this._targetRay,a=this._grip,l=this._hand;if(n)if(l&&n.hand){s=!0;for(let c=0;c<=window.XRHand.LITTLE_PHALANX_TIP;c++)if(n.hand[c]){const h=t.getJointPose(n.hand[c],e),u=l.joints[c];h!==null&&(u.matrix.fromArray(h.transform.matrix),u.matrix.decompose(u.position,u.rotation,u.scale),u.jointRadius=h.radius),u.visible=h!==null;const d=l.joints[window.XRHand.INDEX_PHALANX_TIP],f=l.joints[window.XRHand.THUMB_PHALANX_TIP],g=d.position.distanceTo(f.position),v=.02,x=.005;l.inputState.pinching&&g>v+x?(l.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:n.handedness,target:this})):!l.inputState.pinching&&g<=v-x&&(l.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:n.handedness,target:this}))}}else o!==null&&(i=t.getPose(n.targetRaySpace,e),i!==null&&(o.matrix.fromArray(i.transform.matrix),o.matrix.decompose(o.position,o.rotation,o.scale))),a!==null&&n.gripSpace&&(r=t.getPose(n.gripSpace,e),r!==null&&(a.matrix.fromArray(r.transform.matrix),a.matrix.decompose(a.position,a.rotation,a.scale)));return o!==null&&(o.visible=i!==null),a!==null&&(a.visible=r!==null),l!==null&&(l.visible=s!==null),this}});function Km(n,t){const e=this;let i=null,r=1,s=null,o="local-floor",a=null;const l=[],c=new Map,h=new Be;h.layers.enable(1),h.viewport=new ae;const u=new Be;u.layers.enable(2),u.viewport=new ae;const d=[h,u],f=new Eu;f.layers.enable(1),f.layers.enable(2);let g=null,v=null;this.enabled=!1,this.isPresenting=!1,this.getController=function(T){let k=l[T];return k===void 0&&(k=new ra,l[T]=k),k.getTargetRaySpace()},this.getControllerGrip=function(T){let k=l[T];return k===void 0&&(k=new ra,l[T]=k),k.getGripSpace()},this.getHand=function(T){let k=l[T];return k===void 0&&(k=new ra,l[T]=k),k.getHandSpace()};function x(T){const k=c.get(T.inputSource);k&&k.dispatchEvent({type:T.type,data:T.inputSource})}function m(){c.forEach(function(T,k){T.disconnect(k)}),c.clear(),n.setFramebuffer(null),n.setRenderTarget(n.getRenderTarget()),B.stop(),e.isPresenting=!1,e.dispatchEvent({type:"sessionend"})}function p(T){s=T,B.setContext(i),B.start(),e.isPresenting=!0,e.dispatchEvent({type:"sessionstart"})}this.setFramebufferScaleFactor=function(T){r=T,e.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(T){o=T,e.isPresenting===!0&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return s},this.getSession=function(){return i},this.setSession=function(T){if(i=T,i!==null){i.addEventListener("select",x),i.addEventListener("selectstart",x),i.addEventListener("selectend",x),i.addEventListener("squeeze",x),i.addEventListener("squeezestart",x),i.addEventListener("squeezeend",x),i.addEventListener("end",m);const k=t.getContextAttributes();k.xrCompatible!==!0&&t.makeXRCompatible();const I={antialias:k.antialias,alpha:k.alpha,depth:k.depth,stencil:k.stencil,framebufferScaleFactor:r},N=new XRWebGLLayer(i,t,I);i.updateRenderState({baseLayer:N}),i.requestReferenceSpace(o).then(p),i.addEventListener("inputsourceschange",b)}};function b(T){const k=i.inputSources;for(let I=0;I<l.length;I++)c.set(k[I],l[I]);for(let I=0;I<T.removed.length;I++){const N=T.removed[I],C=c.get(N);C&&(C.dispatchEvent({type:"disconnected",data:N}),c.delete(N))}for(let I=0;I<T.added.length;I++){const N=T.added[I],C=c.get(N);C&&C.dispatchEvent({type:"connected",data:N})}}const _=new H,w=new H;function E(T,k,I){_.setFromMatrixPosition(k.matrixWorld),w.setFromMatrixPosition(I.matrixWorld);const N=_.distanceTo(w),C=k.projectionMatrix.elements,L=I.projectionMatrix.elements,F=C[14]/(C[10]-1),q=C[14]/(C[10]+1),ot=(C[9]+1)/C[5],pt=(C[9]-1)/C[5],rt=(C[8]-1)/C[0],Et=(L[8]+1)/L[0],it=F*rt,vt=F*Et,Y=N/(-rt+Et),st=Y*-rt;k.matrixWorld.decompose(T.position,T.quaternion,T.scale),T.translateX(st),T.translateZ(Y),T.matrixWorld.compose(T.position,T.quaternion,T.scale),T.matrixWorldInverse.getInverse(T.matrixWorld);const _t=F+Y,Lt=q+Y,yt=it-st,St=vt+(N-st),At=ot*q/Lt*_t,V=pt*q/Lt*_t;T.projectionMatrix.makePerspective(yt,St,At,V,_t,Lt)}function S(T,k){k===null?T.matrixWorld.copy(T.matrix):T.matrixWorld.multiplyMatrices(k.matrixWorld,T.matrix),T.matrixWorldInverse.getInverse(T.matrixWorld)}this.getCamera=function(T){f.near=u.near=h.near=T.near,f.far=u.far=h.far=T.far,(g!==f.near||v!==f.far)&&(i.updateRenderState({depthNear:f.near,depthFar:f.far}),g=f.near,v=f.far);const k=T.parent,I=f.cameras;S(f,k);for(let C=0;C<I.length;C++)S(I[C],k);T.matrixWorld.copy(f.matrixWorld);const N=T.children;for(let C=0,L=N.length;C<L;C++)N[C].updateMatrixWorld(!0);return I.length===2?E(f,h,u):f.projectionMatrix.copy(h.projectionMatrix),f};let R=null;function W(T,k){if(a=k.getViewerPose(s),a!==null){const N=a.views,C=i.renderState.baseLayer;n.setFramebuffer(C.framebuffer);let L=!1;N.length!==f.cameras.length&&(f.cameras.length=0,L=!0);for(let F=0;F<N.length;F++){const q=N[F],ot=C.getViewport(q),pt=d[F];pt.matrix.fromArray(q.transform.matrix),pt.projectionMatrix.fromArray(q.projectionMatrix),pt.viewport.set(ot.x,ot.y,ot.width,ot.height),F===0&&f.matrix.copy(pt.matrix),L===!0&&f.cameras.push(pt)}}const I=i.inputSources;for(let N=0;N<l.length;N++){const C=l[N],L=I[N];C.update(L,k,s)}R&&R(T,k)}const B=new Rm;B.setAnimationLoop(W),this.setAnimationLoop=function(T){R=T},this.dispose=function(){}}Object.assign(Km.prototype,ci.prototype);function XL(n){function t(m,p){m.fogColor.value.copy(p.color),p.isFog?(m.fogNear.value=p.near,m.fogFar.value=p.far):p.isFogExp2&&(m.fogDensity.value=p.density)}function e(m,p,b,_){p.isMeshBasicMaterial?i(m,p):p.isMeshLambertMaterial?(i(m,p),l(m,p)):p.isMeshToonMaterial?(i(m,p),h(m,p)):p.isMeshPhongMaterial?(i(m,p),c(m,p)):p.isMeshStandardMaterial?(i(m,p),p.isMeshPhysicalMaterial?d(m,p):u(m,p)):p.isMeshMatcapMaterial?(i(m,p),f(m,p)):p.isMeshDepthMaterial?(i(m,p),g(m,p)):p.isMeshDistanceMaterial?(i(m,p),v(m,p)):p.isMeshNormalMaterial?(i(m,p),x(m,p)):p.isLineBasicMaterial?(r(m,p),p.isLineDashedMaterial&&s(m,p)):p.isPointsMaterial?o(m,p,b,_):p.isSpriteMaterial?a(m,p):p.isShadowMaterial?(m.color.value.copy(p.color),m.opacity.value=p.opacity):p.isShaderMaterial&&(p.uniformsNeedUpdate=!1)}function i(m,p){m.opacity.value=p.opacity,p.color&&m.diffuse.value.copy(p.color),p.emissive&&m.emissive.value.copy(p.emissive).multiplyScalar(p.emissiveIntensity),p.map&&(m.map.value=p.map),p.alphaMap&&(m.alphaMap.value=p.alphaMap),p.specularMap&&(m.specularMap.value=p.specularMap);const b=n.get(p).envMap;if(b){m.envMap.value=b,m.flipEnvMap.value=b.isCubeTexture&&b._needsFlipEnvMap?-1:1,m.reflectivity.value=p.reflectivity,m.refractionRatio.value=p.refractionRatio;const E=n.get(b).__maxMipLevel;E!==void 0&&(m.maxMipLevel.value=E)}p.lightMap&&(m.lightMap.value=p.lightMap,m.lightMapIntensity.value=p.lightMapIntensity),p.aoMap&&(m.aoMap.value=p.aoMap,m.aoMapIntensity.value=p.aoMapIntensity);let _;p.map?_=p.map:p.specularMap?_=p.specularMap:p.displacementMap?_=p.displacementMap:p.normalMap?_=p.normalMap:p.bumpMap?_=p.bumpMap:p.roughnessMap?_=p.roughnessMap:p.metalnessMap?_=p.metalnessMap:p.alphaMap?_=p.alphaMap:p.emissiveMap?_=p.emissiveMap:p.clearcoatMap?_=p.clearcoatMap:p.clearcoatNormalMap?_=p.clearcoatNormalMap:p.clearcoatRoughnessMap&&(_=p.clearcoatRoughnessMap),_!==void 0&&(_.isWebGLRenderTarget&&(_=_.texture),_.matrixAutoUpdate===!0&&_.updateMatrix(),m.uvTransform.value.copy(_.matrix));let w;p.aoMap?w=p.aoMap:p.lightMap&&(w=p.lightMap),w!==void 0&&(w.isWebGLRenderTarget&&(w=w.texture),w.matrixAutoUpdate===!0&&w.updateMatrix(),m.uv2Transform.value.copy(w.matrix))}function r(m,p){m.diffuse.value.copy(p.color),m.opacity.value=p.opacity}function s(m,p){m.dashSize.value=p.dashSize,m.totalSize.value=p.dashSize+p.gapSize,m.scale.value=p.scale}function o(m,p,b,_){m.diffuse.value.copy(p.color),m.opacity.value=p.opacity,m.size.value=p.size*b,m.scale.value=_*.5,p.map&&(m.map.value=p.map),p.alphaMap&&(m.alphaMap.value=p.alphaMap);let w;p.map?w=p.map:p.alphaMap&&(w=p.alphaMap),w!==void 0&&(w.matrixAutoUpdate===!0&&w.updateMatrix(),m.uvTransform.value.copy(w.matrix))}function a(m,p){m.diffuse.value.copy(p.color),m.opacity.value=p.opacity,m.rotation.value=p.rotation,p.map&&(m.map.value=p.map),p.alphaMap&&(m.alphaMap.value=p.alphaMap);let b;p.map?b=p.map:p.alphaMap&&(b=p.alphaMap),b!==void 0&&(b.matrixAutoUpdate===!0&&b.updateMatrix(),m.uvTransform.value.copy(b.matrix))}function l(m,p){p.emissiveMap&&(m.emissiveMap.value=p.emissiveMap)}function c(m,p){m.specular.value.copy(p.specular),m.shininess.value=Math.max(p.shininess,1e-4),p.emissiveMap&&(m.emissiveMap.value=p.emissiveMap),p.bumpMap&&(m.bumpMap.value=p.bumpMap,m.bumpScale.value=p.bumpScale,p.side===Ne&&(m.bumpScale.value*=-1)),p.normalMap&&(m.normalMap.value=p.normalMap,m.normalScale.value.copy(p.normalScale),p.side===Ne&&m.normalScale.value.negate()),p.displacementMap&&(m.displacementMap.value=p.displacementMap,m.displacementScale.value=p.displacementScale,m.displacementBias.value=p.displacementBias)}function h(m,p){p.gradientMap&&(m.gradientMap.value=p.gradientMap),p.emissiveMap&&(m.emissiveMap.value=p.emissiveMap),p.bumpMap&&(m.bumpMap.value=p.bumpMap,m.bumpScale.value=p.bumpScale,p.side===Ne&&(m.bumpScale.value*=-1)),p.normalMap&&(m.normalMap.value=p.normalMap,m.normalScale.value.copy(p.normalScale),p.side===Ne&&m.normalScale.value.negate()),p.displacementMap&&(m.displacementMap.value=p.displacementMap,m.displacementScale.value=p.displacementScale,m.displacementBias.value=p.displacementBias)}function u(m,p){m.roughness.value=p.roughness,m.metalness.value=p.metalness,p.roughnessMap&&(m.roughnessMap.value=p.roughnessMap),p.metalnessMap&&(m.metalnessMap.value=p.metalnessMap),p.emissiveMap&&(m.emissiveMap.value=p.emissiveMap),p.bumpMap&&(m.bumpMap.value=p.bumpMap,m.bumpScale.value=p.bumpScale,p.side===Ne&&(m.bumpScale.value*=-1)),p.normalMap&&(m.normalMap.value=p.normalMap,m.normalScale.value.copy(p.normalScale),p.side===Ne&&m.normalScale.value.negate()),p.displacementMap&&(m.displacementMap.value=p.displacementMap,m.displacementScale.value=p.displacementScale,m.displacementBias.value=p.displacementBias),n.get(p).envMap&&(m.envMapIntensity.value=p.envMapIntensity)}function d(m,p){u(m,p),m.reflectivity.value=p.reflectivity,m.clearcoat.value=p.clearcoat,m.clearcoatRoughness.value=p.clearcoatRoughness,p.sheen&&m.sheen.value.copy(p.sheen),p.clearcoatMap&&(m.clearcoatMap.value=p.clearcoatMap),p.clearcoatRoughnessMap&&(m.clearcoatRoughnessMap.value=p.clearcoatRoughnessMap),p.clearcoatNormalMap&&(m.clearcoatNormalScale.value.copy(p.clearcoatNormalScale),m.clearcoatNormalMap.value=p.clearcoatNormalMap,p.side===Ne&&m.clearcoatNormalScale.value.negate()),m.transmission.value=p.transmission,p.transmissionMap&&(m.transmissionMap.value=p.transmissionMap)}function f(m,p){p.matcap&&(m.matcap.value=p.matcap),p.bumpMap&&(m.bumpMap.value=p.bumpMap,m.bumpScale.value=p.bumpScale,p.side===Ne&&(m.bumpScale.value*=-1)),p.normalMap&&(m.normalMap.value=p.normalMap,m.normalScale.value.copy(p.normalScale),p.side===Ne&&m.normalScale.value.negate()),p.displacementMap&&(m.displacementMap.value=p.displacementMap,m.displacementScale.value=p.displacementScale,m.displacementBias.value=p.displacementBias)}function g(m,p){p.displacementMap&&(m.displacementMap.value=p.displacementMap,m.displacementScale.value=p.displacementScale,m.displacementBias.value=p.displacementBias)}function v(m,p){p.displacementMap&&(m.displacementMap.value=p.displacementMap,m.displacementScale.value=p.displacementScale,m.displacementBias.value=p.displacementBias),m.referencePosition.value.copy(p.referencePosition),m.nearDistance.value=p.nearDistance,m.farDistance.value=p.farDistance}function x(m,p){p.bumpMap&&(m.bumpMap.value=p.bumpMap,m.bumpScale.value=p.bumpScale,p.side===Ne&&(m.bumpScale.value*=-1)),p.normalMap&&(m.normalMap.value=p.normalMap,m.normalScale.value.copy(p.normalScale),p.side===Ne&&m.normalScale.value.negate()),p.displacementMap&&(m.displacementMap.value=p.displacementMap,m.displacementScale.value=p.displacementScale,m.displacementBias.value=p.displacementBias)}return{refreshFogUniforms:t,refreshMaterialUniforms:e}}function Gl(n){n=n||{};const t=n.canvas!==void 0?n.canvas:document.createElementNS("http://www.w3.org/1999/xhtml","canvas"),e=n.context!==void 0?n.context:null,i=n.alpha!==void 0?n.alpha:!1,r=n.depth!==void 0?n.depth:!0,s=n.stencil!==void 0?n.stencil:!0,o=n.antialias!==void 0?n.antialias:!1,a=n.premultipliedAlpha!==void 0?n.premultipliedAlpha:!0,l=n.preserveDrawingBuffer!==void 0?n.preserveDrawingBuffer:!1,c=n.powerPreference!==void 0?n.powerPreference:"default",h=n.failIfMajorPerformanceCaveat!==void 0?n.failIfMajorPerformanceCaveat:!1;let u=null,d=null;this.domElement=t,this.debug={checkShaderErrors:!0},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.gammaFactor=2,this.outputEncoding=Vo,this.physicallyCorrectLights=!1,this.toneMapping=Ho,this.toneMappingExposure=1,this.maxMorphTargets=8,this.maxMorphNormals=4;const f=this;let g=!1,v=null,x=0,m=0,p=null,b=null,_=-1,w=null,E=null;const S=new ae,R=new ae;let W=null,B=t.width,T=t.height,k=1,I=null,N=null;const C=new ae(0,0,B,T),L=new ae(0,0,B,T);let F=!1;const q=new Hl;let ot=!1,pt=!1;const rt=new Wt,Et=new H,it={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};function vt(){return p===null?k:1}let Y=e;function st(D,at){for(let nt=0;nt<D.length;nt++){const ft=D[nt],Pt=t.getContext(ft,at);if(Pt!==null)return Pt}return null}try{const D={alpha:i,depth:r,stencil:s,antialias:o,premultipliedAlpha:a,preserveDrawingBuffer:l,powerPreference:c,failIfMajorPerformanceCaveat:h};if(t.addEventListener("webglcontextlost",z,!1),t.addEventListener("webglcontextrestored",Mt,!1),Y===null){const at=["webgl2","webgl","experimental-webgl"];if(f.isWebGL1Renderer===!0&&at.shift(),Y=st(at,D),Y===null)throw st(at)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}Y.getShaderPrecisionFormat===void 0&&(Y.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(D){throw console.error("THREE.WebGLRenderer: "+D.message),D}let _t,Lt,yt,St,At,V,X,Q,mt,et,M,y,G,$,P,K,ht,gt,ct,ut,U;function dt(){_t=new TA(Y),Lt=new wA(Y,_t,n),Lt.isWebGL2===!1&&(_t.get("WEBGL_depth_texture"),_t.get("OES_texture_float"),_t.get("OES_texture_half_float"),_t.get("OES_texture_half_float_linear"),_t.get("OES_standard_derivatives"),_t.get("OES_element_index_uint"),_t.get("OES_vertex_array_object"),_t.get("ANGLE_instanced_arrays")),_t.get("OES_texture_float_linear"),ut=new jL(Y,_t,Lt),yt=new $L(Y,_t,Lt),yt.scissor(R.copy(L).multiplyScalar(k).floor()),yt.viewport(S.copy(C).multiplyScalar(k).floor()),St=new CA(Y),At=new DL,V=new qL(Y,_t,yt,At,Lt,ut,St),X=new EA(f),Q=new J1(Y,Lt),U=new bA(Y,_t,Q,Lt),mt=new AA(Y,Q,St,U),et=new DA(Y,mt,Q,St),ht=new IA(Y),P=new SA(At),M=new IL(f,X,_t,Lt,U,P),y=new XL(At),G=new BL(At),$=new kL(_t,Lt),K=new _A(f,X,yt,et,a),gt=new MA(Y,_t,St,Lt),ct=new LA(Y,_t,St,Lt),St.programs=M.programs,f.capabilities=Lt,f.extensions=_t,f.properties=At,f.renderLists=G,f.state=yt,f.info=St}dt();const Z=new Km(f,Y);this.xr=Z;const xt=new Qm(f,et,Lt.maxTextureSize);this.shadowMap=xt,this.getContext=function(){return Y},this.getContextAttributes=function(){return Y.getContextAttributes()},this.forceContextLoss=function(){const D=_t.get("WEBGL_lose_context");D&&D.loseContext()},this.forceContextRestore=function(){const D=_t.get("WEBGL_lose_context");D&&D.restoreContext()},this.getPixelRatio=function(){return k},this.setPixelRatio=function(D){D!==void 0&&(k=D,this.setSize(B,T,!1))},this.getSize=function(D){return D===void 0&&(console.warn("WebGLRenderer: .getsize() now requires a Vector2 as an argument"),D=new wt),D.set(B,T)},this.setSize=function(D,at,nt){if(Z.isPresenting){console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");return}B=D,T=at,t.width=Math.floor(D*k),t.height=Math.floor(at*k),nt!==!1&&(t.style.width=D+"px",t.style.height=at+"px"),this.setViewport(0,0,D,at)},this.getDrawingBufferSize=function(D){return D===void 0&&(console.warn("WebGLRenderer: .getdrawingBufferSize() now requires a Vector2 as an argument"),D=new wt),D.set(B*k,T*k).floor()},this.setDrawingBufferSize=function(D,at,nt){B=D,T=at,k=nt,t.width=Math.floor(D*nt),t.height=Math.floor(at*nt),this.setViewport(0,0,D,at)},this.getCurrentViewport=function(D){return D===void 0&&(console.warn("WebGLRenderer: .getCurrentViewport() now requires a Vector4 as an argument"),D=new ae),D.copy(S)},this.getViewport=function(D){return D.copy(C)},this.setViewport=function(D,at,nt,ft){D.isVector4?C.set(D.x,D.y,D.z,D.w):C.set(D,at,nt,ft),yt.viewport(S.copy(C).multiplyScalar(k).floor())},this.getScissor=function(D){return D.copy(L)},this.setScissor=function(D,at,nt,ft){D.isVector4?L.set(D.x,D.y,D.z,D.w):L.set(D,at,nt,ft),yt.scissor(R.copy(L).multiplyScalar(k).floor())},this.getScissorTest=function(){return F},this.setScissorTest=function(D){yt.setScissorTest(F=D)},this.setOpaqueSort=function(D){I=D},this.setTransparentSort=function(D){N=D},this.getClearColor=function(){return K.getClearColor()},this.setClearColor=function(){K.setClearColor.apply(K,arguments)},this.getClearAlpha=function(){return K.getClearAlpha()},this.setClearAlpha=function(){K.setClearAlpha.apply(K,arguments)},this.clear=function(D,at,nt){let ft=0;(D===void 0||D)&&(ft|=16384),(at===void 0||at)&&(ft|=256),(nt===void 0||nt)&&(ft|=1024),Y.clear(ft)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){t.removeEventListener("webglcontextlost",z,!1),t.removeEventListener("webglcontextrestored",Mt,!1),G.dispose(),$.dispose(),At.dispose(),X.dispose(),et.dispose(),U.dispose(),Z.dispose(),Re.stop()};function z(D){D.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),g=!0}function Mt(){console.log("THREE.WebGLRenderer: Context Restored."),g=!1,dt()}function $t(D){const at=D.target;at.removeEventListener("dispose",$t),Qt(at)}function Qt(D){xe(D),At.remove(D)}function xe(D){const at=At.get(D).program;at!==void 0&&M.releaseProgram(at)}function te(D,at){D.render(function(nt){f.renderBufferImmediate(nt,at)})}this.renderBufferImmediate=function(D,at){U.initAttributes();const nt=At.get(D);D.hasPositions&&!nt.position&&(nt.position=Y.createBuffer()),D.hasNormals&&!nt.normal&&(nt.normal=Y.createBuffer()),D.hasUvs&&!nt.uv&&(nt.uv=Y.createBuffer()),D.hasColors&&!nt.color&&(nt.color=Y.createBuffer());const ft=at.getAttributes();D.hasPositions&&(Y.bindBuffer(34962,nt.position),Y.bufferData(34962,D.positionArray,35048),U.enableAttribute(ft.position),Y.vertexAttribPointer(ft.position,3,5126,!1,0,0)),D.hasNormals&&(Y.bindBuffer(34962,nt.normal),Y.bufferData(34962,D.normalArray,35048),U.enableAttribute(ft.normal),Y.vertexAttribPointer(ft.normal,3,5126,!1,0,0)),D.hasUvs&&(Y.bindBuffer(34962,nt.uv),Y.bufferData(34962,D.uvArray,35048),U.enableAttribute(ft.uv),Y.vertexAttribPointer(ft.uv,2,5126,!1,0,0)),D.hasColors&&(Y.bindBuffer(34962,nt.color),Y.bufferData(34962,D.colorArray,35048),U.enableAttribute(ft.color),Y.vertexAttribPointer(ft.color,3,5126,!1,0,0)),U.disableUnusedAttributes(),Y.drawArrays(4,0,D.count),D.count=0},this.renderBufferDirect=function(D,at,nt,ft,Pt,qt){at===null&&(at=it);const A=Pt.isMesh&&Pt.matrixWorld.determinant()<0,j=io(D,at,ft,Pt);yt.setMaterial(ft,A);let J=nt.index;const tt=nt.attributes.position;if(J===null){if(tt===void 0||tt.count===0)return}else if(J.count===0)return;let lt=1;ft.wireframe===!0&&(J=mt.getWireframeAttribute(nt),lt=2),(ft.morphTargets||ft.morphNormals)&&ht.update(Pt,nt,ft,j),U.setup(Pt,ft,j,nt,J);let Tt,It=gt;J!==null&&(Tt=Q.get(J),It=ct,It.setIndex(Tt));const Nt=J!==null?J.count:tt.count,Dt=nt.drawRange.start*lt,Xt=nt.drawRange.count*lt,Bt=qt!==null?qt.start*lt:0,Kt=qt!==null?qt.count*lt:1/0,Yt=Math.max(Dt,Bt),sn=Math.min(Nt,Dt+Xt,Bt+Kt)-1,jt=Math.max(0,sn-Yt+1);if(jt!==0){if(Pt.isMesh)ft.wireframe===!0?(yt.setLineWidth(ft.wireframeLinewidth*vt()),It.setMode(1)):It.setMode(4);else if(Pt.isLine){let Sn=ft.linewidth;Sn===void 0&&(Sn=1),yt.setLineWidth(Sn*vt()),Pt.isLineSegments?It.setMode(1):Pt.isLineLoop?It.setMode(2):It.setMode(3)}else Pt.isPoints?It.setMode(0):Pt.isSprite&&It.setMode(4);if(Pt.isInstancedMesh)It.renderInstances(Yt,jt,Pt.count);else if(nt.isInstancedBufferGeometry){const Sn=Math.min(nt.instanceCount,nt._maxInstanceCount);It.renderInstances(Yt,jt,Sn)}else It.render(Yt,jt)}},this.compile=function(D,at){d=$.get(D,at),d.init(),D.traverseVisible(function(ft){ft.isLight&&ft.layers.test(at.layers)&&(d.pushLight(ft),ft.castShadow&&d.pushShadow(ft))}),d.setupLights(at);const nt=new WeakMap;D.traverse(function(ft){const Pt=ft.material;if(Pt)if(Array.isArray(Pt))for(let qt=0;qt<Pt.length;qt++){const A=Pt[qt];nt.has(A)===!1&&(mn(A,D,ft),nt.set(A))}else nt.has(Pt)===!1&&(mn(Pt,D,ft),nt.set(Pt))})};let Te=null;function Oe(D){Z.isPresenting||Te&&Te(D)}const Re=new Rm;Re.setAnimationLoop(Oe),typeof window!="undefined"&&Re.setContext(window),this.setAnimationLoop=function(D){Te=D,Z.setAnimationLoop(D),D===null?Re.stop():Re.start()},this.render=function(D,at){let nt,ft;if(arguments[2]!==void 0&&(console.warn("THREE.WebGLRenderer.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead."),nt=arguments[2]),arguments[3]!==void 0&&(console.warn("THREE.WebGLRenderer.render(): the forceClear argument has been removed. Use .clear() instead."),ft=arguments[3]),at!==void 0&&at.isCamera!==!0){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(g===!0)return;U.resetDefaultState(),_=-1,w=null,D.autoUpdate===!0&&D.updateMatrixWorld(),at.parent===null&&at.updateMatrixWorld(),Z.enabled===!0&&Z.isPresenting===!0&&(at=Z.getCamera(at)),D.isScene===!0&&D.onBeforeRender(f,D,at,nt||p),d=$.get(D,at),d.init(),rt.multiplyMatrices(at.projectionMatrix,at.matrixWorldInverse),q.setFromProjectionMatrix(rt),pt=this.localClippingEnabled,ot=P.init(this.clippingPlanes,pt,at),u=G.get(D,at),u.init(),Xe(D,at,0,f.sortObjects),u.finish(),f.sortObjects===!0&&u.sort(I,N),ot===!0&&P.beginShadows();const Pt=d.state.shadowsArray;xt.render(Pt,D,at),d.setupLights(at),ot===!0&&P.endShadows(),this.info.autoReset===!0&&this.info.reset(),nt!==void 0&&this.setRenderTarget(nt),K.render(u,D,at,ft);const qt=u.opaque,A=u.transparent;qt.length>0&&no(qt,D,at),A.length>0&&no(A,D,at),D.isScene===!0&&D.onAfterRender(f,D,at),p!==null&&(V.updateRenderTargetMipmap(p),V.updateMultisampleRenderTarget(p)),yt.buffers.depth.setTest(!0),yt.buffers.depth.setMask(!0),yt.buffers.color.setMask(!0),yt.setPolygonOffset(!1),u=null,d=null};function Xe(D,at,nt,ft){if(D.visible===!1)return;if(D.layers.test(at.layers)){if(D.isGroup)nt=D.renderOrder;else if(D.isLOD)D.autoUpdate===!0&&D.update(at);else if(D.isLight)d.pushLight(D),D.castShadow&&d.pushShadow(D);else if(D.isSprite){if(!D.frustumCulled||q.intersectsSprite(D)){ft&&Et.setFromMatrixPosition(D.matrixWorld).applyMatrix4(rt);const A=et.update(D),j=D.material;j.visible&&u.push(D,A,j,nt,Et.z,null)}}else if(D.isImmediateRenderObject)ft&&Et.setFromMatrixPosition(D.matrixWorld).applyMatrix4(rt),u.push(D,null,D.material,nt,Et.z,null);else if((D.isMesh||D.isLine||D.isPoints)&&(D.isSkinnedMesh&&D.skeleton.frame!==St.render.frame&&(D.skeleton.update(),D.skeleton.frame=St.render.frame),!D.frustumCulled||q.intersectsObject(D))){ft&&Et.setFromMatrixPosition(D.matrixWorld).applyMatrix4(rt);const A=et.update(D),j=D.material;if(Array.isArray(j)){const J=A.groups;for(let tt=0,lt=J.length;tt<lt;tt++){const Tt=J[tt],It=j[Tt.materialIndex];It&&It.visible&&u.push(D,A,It,nt,Et.z,Tt)}}else j.visible&&u.push(D,A,j,nt,Et.z,null)}}const qt=D.children;for(let A=0,j=qt.length;A<j;A++)Xe(qt[A],at,nt,ft)}function no(D,at,nt){const ft=at.isScene===!0?at.overrideMaterial:null;for(let Pt=0,qt=D.length;Pt<qt;Pt++){const A=D[Pt],j=A.object,J=A.geometry,tt=ft===null?A.material:ft,lt=A.group;if(nt.isArrayCamera){E=nt;const Tt=nt.cameras;for(let It=0,Nt=Tt.length;It<Nt;It++){const Dt=Tt[It];j.layers.test(Dt.layers)&&(yt.viewport(S.copy(Dt.viewport)),d.setupLights(Dt),zn(j,at,Dt,J,tt,lt))}}else E=null,zn(j,at,nt,J,tt,lt)}}function zn(D,at,nt,ft,Pt,qt){if(D.onBeforeRender(f,at,nt,ft,Pt,qt),d=$.get(at,E||nt),D.modelViewMatrix.multiplyMatrices(nt.matrixWorldInverse,D.matrixWorld),D.normalMatrix.getNormalMatrix(D.modelViewMatrix),D.isImmediateRenderObject){const A=io(nt,at,Pt,D);yt.setMaterial(Pt),U.reset(),te(D,A)}else f.renderBufferDirect(nt,at,ft,Pt,D,qt);D.onAfterRender(f,at,nt,ft,Pt,qt),d=$.get(at,E||nt)}function mn(D,at,nt){at.isScene!==!0&&(at=it);const ft=At.get(D),Pt=d.state.lights,qt=d.state.shadowsArray,A=Pt.state.version,j=M.getParameters(D,Pt.state,qt,at,nt),J=M.getProgramCacheKey(j);let tt=ft.program,lt=!0;if(tt===void 0)D.addEventListener("dispose",$t);else if(tt.cacheKey!==J)xe(D);else if(ft.lightsStateVersion!==A)lt=!1;else if(j.shaderID!==void 0){const Dt=D.isMeshStandardMaterial?at.environment:null;ft.envMap=X.get(D.envMap||Dt);return}else lt=!1;lt&&(j.uniforms=M.getUniforms(D),D.onBeforeCompile(j,f),tt=M.acquireProgram(j,J),ft.program=tt,ft.uniforms=j.uniforms,ft.outputEncoding=j.outputEncoding);const Tt=ft.uniforms;(!D.isShaderMaterial&&!D.isRawShaderMaterial||D.clipping===!0)&&(ft.numClippingPlanes=P.numPlanes,ft.numIntersection=P.numIntersection,Tt.clippingPlanes=P.uniform),ft.environment=D.isMeshStandardMaterial?at.environment:null,ft.fog=at.fog,ft.envMap=X.get(D.envMap||ft.environment),ft.needsLights=Cr(D),ft.lightsStateVersion=A,ft.needsLights&&(Tt.ambientLightColor.value=Pt.state.ambient,Tt.lightProbe.value=Pt.state.probe,Tt.directionalLights.value=Pt.state.directional,Tt.directionalLightShadows.value=Pt.state.directionalShadow,Tt.spotLights.value=Pt.state.spot,Tt.spotLightShadows.value=Pt.state.spotShadow,Tt.rectAreaLights.value=Pt.state.rectArea,Tt.ltc_1.value=Pt.state.rectAreaLTC1,Tt.ltc_2.value=Pt.state.rectAreaLTC2,Tt.pointLights.value=Pt.state.point,Tt.pointLightShadows.value=Pt.state.pointShadow,Tt.hemisphereLights.value=Pt.state.hemi,Tt.directionalShadowMap.value=Pt.state.directionalShadowMap,Tt.directionalShadowMatrix.value=Pt.state.directionalShadowMatrix,Tt.spotShadowMap.value=Pt.state.spotShadowMap,Tt.spotShadowMatrix.value=Pt.state.spotShadowMatrix,Tt.pointShadowMap.value=Pt.state.pointShadowMap,Tt.pointShadowMatrix.value=Pt.state.pointShadowMatrix);const It=ft.program.getUniforms(),Nt=Ki.seqWithValue(It.seq,Tt);ft.uniformsList=Nt}function io(D,at,nt,ft){at.isScene!==!0&&(at=it),V.resetTextureUnits();const Pt=at.fog,qt=nt.isMeshStandardMaterial?at.environment:null,A=p===null?f.outputEncoding:p.texture.encoding,j=X.get(nt.envMap||qt),J=At.get(nt),tt=d.state.lights;if(ot===!0&&(pt===!0||D!==w)){const Bt=D===w&&nt.id===_;P.setState(nt,D,Bt)}nt.version===J.__version?(nt.fog&&J.fog!==Pt||J.environment!==qt||J.needsLights&&J.lightsStateVersion!==tt.state.version||J.numClippingPlanes!==void 0&&(J.numClippingPlanes!==P.numPlanes||J.numIntersection!==P.numIntersection)||J.outputEncoding!==A||J.envMap!==j)&&mn(nt,at,ft):(mn(nt,at,ft),J.__version=nt.version);let lt=!1,Tt=!1,It=!1;const Nt=J.program,Dt=Nt.getUniforms(),Xt=J.uniforms;if(yt.useProgram(Nt.program)&&(lt=!0,Tt=!0,It=!0),nt.id!==_&&(_=nt.id,Tt=!0),lt||w!==D){if(Dt.setValue(Y,"projectionMatrix",D.projectionMatrix),Lt.logarithmicDepthBuffer&&Dt.setValue(Y,"logDepthBufFC",2/(Math.log(D.far+1)/Math.LN2)),w!==D&&(w=D,Tt=!0,It=!0),nt.isShaderMaterial||nt.isMeshPhongMaterial||nt.isMeshToonMaterial||nt.isMeshStandardMaterial||nt.envMap){const Bt=Dt.map.cameraPosition;Bt!==void 0&&Bt.setValue(Y,Et.setFromMatrixPosition(D.matrixWorld))}(nt.isMeshPhongMaterial||nt.isMeshToonMaterial||nt.isMeshLambertMaterial||nt.isMeshBasicMaterial||nt.isMeshStandardMaterial||nt.isShaderMaterial)&&Dt.setValue(Y,"isOrthographic",D.isOrthographicCamera===!0),(nt.isMeshPhongMaterial||nt.isMeshToonMaterial||nt.isMeshLambertMaterial||nt.isMeshBasicMaterial||nt.isMeshStandardMaterial||nt.isShaderMaterial||nt.isShadowMaterial||nt.skinning)&&Dt.setValue(Y,"viewMatrix",D.matrixWorldInverse)}if(nt.skinning){Dt.setOptional(Y,ft,"bindMatrix"),Dt.setOptional(Y,ft,"bindMatrixInverse");const Bt=ft.skeleton;if(Bt){const Kt=Bt.bones;if(Lt.floatVertexTextures){if(Bt.boneTexture===void 0){let Yt=Math.sqrt(Kt.length*4);Yt=Vt.ceilPowerOfTwo(Yt),Yt=Math.max(Yt,4);const sn=new Float32Array(Yt*Yt*4);sn.set(Bt.boneMatrices);const jt=new zs(sn,Yt,Yt,Rn,Gi);Bt.boneMatrices=sn,Bt.boneTexture=jt,Bt.boneTextureSize=Yt}Dt.setValue(Y,"boneTexture",Bt.boneTexture,V),Dt.setValue(Y,"boneTextureSize",Bt.boneTextureSize)}else Dt.setOptional(Y,Bt,"boneMatrices")}}return(Tt||J.receiveShadow!==ft.receiveShadow)&&(J.receiveShadow=ft.receiveShadow,Dt.setValue(Y,"receiveShadow",ft.receiveShadow)),Tt&&(Dt.setValue(Y,"toneMappingExposure",f.toneMappingExposure),J.needsLights&&vc(Xt,It),Pt&&nt.fog&&y.refreshFogUniforms(Xt,Pt),y.refreshMaterialUniforms(Xt,nt,k,T),Ki.upload(Y,J.uniformsList,Xt,V)),nt.isShaderMaterial&&nt.uniformsNeedUpdate===!0&&(Ki.upload(Y,J.uniformsList,Xt,V),nt.uniformsNeedUpdate=!1),nt.isSpriteMaterial&&Dt.setValue(Y,"center",ft.center),Dt.setValue(Y,"modelViewMatrix",ft.modelViewMatrix),Dt.setValue(Y,"normalMatrix",ft.normalMatrix),Dt.setValue(Y,"modelMatrix",ft.matrixWorld),Nt}function vc(D,at){D.ambientLightColor.needsUpdate=at,D.lightProbe.needsUpdate=at,D.directionalLights.needsUpdate=at,D.directionalLightShadows.needsUpdate=at,D.pointLights.needsUpdate=at,D.pointLightShadows.needsUpdate=at,D.spotLights.needsUpdate=at,D.spotLightShadows.needsUpdate=at,D.rectAreaLights.needsUpdate=at,D.hemisphereLights.needsUpdate=at}function Cr(D){return D.isMeshLambertMaterial||D.isMeshToonMaterial||D.isMeshPhongMaterial||D.isMeshStandardMaterial||D.isShadowMaterial||D.isShaderMaterial&&D.lights===!0}this.setFramebuffer=function(D){v!==D&&p===null&&Y.bindFramebuffer(36160,D),v=D},this.getActiveCubeFace=function(){return x},this.getActiveMipmapLevel=function(){return m},this.getRenderList=function(){return u},this.setRenderList=function(D){u=D},this.getRenderState=function(){return d},this.setRenderState=function(D){d=D},this.getRenderTarget=function(){return p},this.setRenderTarget=function(D,at=0,nt=0){p=D,x=at,m=nt,D&&At.get(D).__webglFramebuffer===void 0&&V.setupRenderTarget(D);let ft=v,Pt=!1;if(D){const qt=At.get(D).__webglFramebuffer;D.isWebGLCubeRenderTarget?(ft=qt[at],Pt=!0):D.isWebGLMultisampleRenderTarget?ft=At.get(D).__webglMultisampledFramebuffer:ft=qt,S.copy(D.viewport),R.copy(D.scissor),W=D.scissorTest}else S.copy(C).multiplyScalar(k).floor(),R.copy(L).multiplyScalar(k).floor(),W=F;if(b!==ft&&(Y.bindFramebuffer(36160,ft),b=ft),yt.viewport(S),yt.scissor(R),yt.setScissorTest(W),Pt){const qt=At.get(D.texture);Y.framebufferTexture2D(36160,36064,34069+at,qt.__webglTexture,nt)}},this.readRenderTargetPixels=function(D,at,nt,ft,Pt,qt,A){if(!(D&&D.isWebGLRenderTarget)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let j=At.get(D).__webglFramebuffer;if(D.isWebGLCubeRenderTarget&&A!==void 0&&(j=j[A]),j){let J=!1;j!==b&&(Y.bindFramebuffer(36160,j),J=!0);try{const tt=D.texture,lt=tt.format,Tt=tt.type;if(lt!==Rn&&ut.convert(lt)!==Y.getParameter(35739)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}if(Tt!==jh&&ut.convert(Tt)!==Y.getParameter(35738)&&!(Tt===Gi&&(Lt.isWebGL2||_t.get("OES_texture_float")||_t.get("WEBGL_color_buffer_float")))&&!(Tt===_l&&(Lt.isWebGL2?_t.get("EXT_color_buffer_float"):_t.get("EXT_color_buffer_half_float")))){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}Y.checkFramebufferStatus(36160)===36053?at>=0&&at<=D.width-ft&&nt>=0&&nt<=D.height-Pt&&Y.readPixels(at,nt,ft,Pt,ut.convert(lt),ut.convert(Tt),qt):console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.")}finally{J&&Y.bindFramebuffer(36160,b)}}},this.copyFramebufferToTexture=function(D,at,nt){nt===void 0&&(nt=0);const ft=Math.pow(2,-nt),Pt=Math.floor(at.image.width*ft),qt=Math.floor(at.image.height*ft),A=ut.convert(at.format);V.setTexture2D(at,0),Y.copyTexImage2D(3553,nt,A,D.x,D.y,Pt,qt,0),yt.unbindTexture()},this.copyTextureToTexture=function(D,at,nt,ft){ft===void 0&&(ft=0);const Pt=at.image.width,qt=at.image.height,A=ut.convert(nt.format),j=ut.convert(nt.type);V.setTexture2D(nt,0),Y.pixelStorei(37440,nt.flipY),Y.pixelStorei(37441,nt.premultiplyAlpha),Y.pixelStorei(3317,nt.unpackAlignment),at.isDataTexture?Y.texSubImage2D(3553,ft,D.x,D.y,Pt,qt,A,j,at.image.data):at.isCompressedTexture?Y.compressedTexSubImage2D(3553,ft,D.x,D.y,at.mipmaps[0].width,at.mipmaps[0].height,A,at.mipmaps[0].data):Y.texSubImage2D(3553,ft,D.x,D.y,A,j,at.image),ft===0&&nt.generateMipmaps&&Y.generateMipmap(3553),yt.unbindTexture()},this.initTexture=function(D){V.setTexture2D(D,0),yt.unbindTexture()},typeof __THREE_DEVTOOLS__!="undefined"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}function tg(n){Gl.call(this,n)}tg.prototype=Object.assign(Object.create(Gl.prototype),{constructor:tg,isWebGL1Renderer:!0});class YL extends Ut{constructor(){super();Object.defineProperty(this,"isScene",{value:!0}),this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.overrideMaterial=null,this.autoUpdate=!0,typeof __THREE_DEVTOOLS__!="undefined"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(t,e){return super.copy(t,e),t.background!==null&&(this.background=t.background.clone()),t.environment!==null&&(this.environment=t.environment.clone()),t.fog!==null&&(this.fog=t.fog.clone()),t.overrideMaterial!==null&&(this.overrideMaterial=t.overrideMaterial.clone()),this.autoUpdate=t.autoUpdate,this.matrixAutoUpdate=t.matrixAutoUpdate,this}toJSON(t){const e=super.toJSON(t);return this.background!==null&&(e.object.background=this.background.toJSON(t)),this.environment!==null&&(e.object.environment=this.environment.toJSON(t)),this.fog!==null&&(e.object.fog=this.fog.toJSON()),e}}function _n(n,t){this.array=n,this.stride=t,this.count=n!==void 0?n.length/t:0,this.usage=Sl,this.updateRange={offset:0,count:-1},this.version=0,this.uuid=Vt.generateUUID()}Object.defineProperty(_n.prototype,"needsUpdate",{set:function(n){n===!0&&this.version++}});Object.assign(_n.prototype,{isInterleavedBuffer:!0,onUploadCallback:function(){},setUsage:function(n){return this.usage=n,this},copy:function(n){return this.array=new n.array.constructor(n.array),this.count=n.count,this.stride=n.stride,this.usage=n.usage,this},copyAt:function(n,t,e){n*=this.stride,e*=t.stride;for(let i=0,r=this.stride;i<r;i++)this.array[n+i]=t.array[e+i];return this},set:function(n,t){return t===void 0&&(t=0),this.array.set(n,t),this},clone:function(n){n.arrayBuffers===void 0&&(n.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=Vt.generateUUID()),n.arrayBuffers[this.array.buffer._uuid]===void 0&&(n.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer);const t=new this.array.constructor(n.arrayBuffers[this.array.buffer._uuid]),e=new _n(t,this.stride);return e.setUsage(this.usage),e},onUpload:function(n){return this.onUploadCallback=n,this},toJSON:function(n){return n.arrayBuffers===void 0&&(n.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=Vt.generateUUID()),n.arrayBuffers[this.array.buffer._uuid]===void 0&&(n.arrayBuffers[this.array.buffer._uuid]=Array.prototype.slice.call(new Uint32Array(this.array.buffer))),{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}});const wr=new H;function Sr(n,t,e,i){this.name="",this.data=n,this.itemSize=t,this.offset=e,this.normalized=i===!0}Object.defineProperties(Sr.prototype,{count:{get:function(){return this.data.count}},array:{get:function(){return this.data.array}},needsUpdate:{set:function(n){this.data.needsUpdate=n}}});Object.assign(Sr.prototype,{isInterleavedBufferAttribute:!0,applyMatrix4:function(n){for(let t=0,e=this.data.count;t<e;t++)wr.x=this.getX(t),wr.y=this.getY(t),wr.z=this.getZ(t),wr.applyMatrix4(n),this.setXYZ(t,wr.x,wr.y,wr.z);return this},setX:function(n,t){return this.data.array[n*this.data.stride+this.offset]=t,this},setY:function(n,t){return this.data.array[n*this.data.stride+this.offset+1]=t,this},setZ:function(n,t){return this.data.array[n*this.data.stride+this.offset+2]=t,this},setW:function(n,t){return this.data.array[n*this.data.stride+this.offset+3]=t,this},getX:function(n){return this.data.array[n*this.data.stride+this.offset]},getY:function(n){return this.data.array[n*this.data.stride+this.offset+1]},getZ:function(n){return this.data.array[n*this.data.stride+this.offset+2]},getW:function(n){return this.data.array[n*this.data.stride+this.offset+3]},setXY:function(n,t,e){return n=n*this.data.stride+this.offset,this.data.array[n+0]=t,this.data.array[n+1]=e,this},setXYZ:function(n,t,e,i){return n=n*this.data.stride+this.offset,this.data.array[n+0]=t,this.data.array[n+1]=e,this.data.array[n+2]=i,this},setXYZW:function(n,t,e,i,r){return n=n*this.data.stride+this.offset,this.data.array[n+0]=t,this.data.array[n+1]=e,this.data.array[n+2]=i,this.data.array[n+3]=r,this},clone:function(n){if(n===void 0){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.");const t=[];for(let e=0;e<this.count;e++){const i=e*this.data.stride+this.offset;for(let r=0;r<this.itemSize;r++)t.push(this.data.array[i+r])}return new kt(new this.array.constructor(t),this.itemSize,this.normalized)}else return n.interleavedBuffers===void 0&&(n.interleavedBuffers={}),n.interleavedBuffers[this.data.uuid]===void 0&&(n.interleavedBuffers[this.data.uuid]=this.data.clone(n)),new Sr(n.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)},toJSON:function(n){if(n===void 0){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.");const t=[];for(let e=0;e<this.count;e++){const i=e*this.data.stride+this.offset;for(let r=0;r<this.itemSize;r++)t.push(this.data.array[i+r])}return{itemSize:this.itemSize,type:this.array.constructor.name,array:t,normalized:this.normalized}}else return n.interleavedBuffers===void 0&&(n.interleavedBuffers={}),n.interleavedBuffers[this.data.uuid]===void 0&&(n.interleavedBuffers[this.data.uuid]=this.data.toJSON(n)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}});function Er(n){Gt.call(this),this.type="SpriteMaterial",this.color=new Ot(16777215),this.map=null,this.alphaMap=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.setValues(n)}Er.prototype=Object.create(Gt.prototype);Er.prototype.constructor=Er;Er.prototype.isSpriteMaterial=!0;Er.prototype.copy=function(n){return Gt.prototype.copy.call(this,n),this.color.copy(n.color),this.map=n.map,this.alphaMap=n.alphaMap,this.rotation=n.rotation,this.sizeAttenuation=n.sizeAttenuation,this};let ks;const sa=new H,Vs=new H,Ws=new H,$s=new wt,oa=new wt,eg=new Wt,kl=new H,aa=new H,Vl=new H,ng=new wt,Tu=new wt,ig=new wt;function rg(n){if(Ut.call(this),this.type="Sprite",ks===void 0){ks=new le;const t=new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]),e=new _n(t,5);ks.setIndex([0,1,2,0,2,3]),ks.setAttribute("position",new Sr(e,3,0,!1)),ks.setAttribute("uv",new Sr(e,2,3,!1))}this.geometry=ks,this.material=n!==void 0?n:new Er,this.center=new wt(.5,.5)}rg.prototype=Object.assign(Object.create(Ut.prototype),{constructor:rg,isSprite:!0,raycast:function(n,t){n.camera===null&&console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'),Vs.setFromMatrixScale(this.matrixWorld),eg.copy(n.camera.matrixWorld),this.modelViewMatrix.multiplyMatrices(n.camera.matrixWorldInverse,this.matrixWorld),Ws.setFromMatrixPosition(this.modelViewMatrix),n.camera.isPerspectiveCamera&&this.material.sizeAttenuation===!1&&Vs.multiplyScalar(-Ws.z);const e=this.material.rotation;let i,r;e!==0&&(r=Math.cos(e),i=Math.sin(e));const s=this.center;Wl(kl.set(-.5,-.5,0),Ws,s,Vs,i,r),Wl(aa.set(.5,-.5,0),Ws,s,Vs,i,r),Wl(Vl.set(.5,.5,0),Ws,s,Vs,i,r),ng.set(0,0),Tu.set(1,0),ig.set(1,1);let o=n.ray.intersectTriangle(kl,aa,Vl,!1,sa);if(o===null&&(Wl(aa.set(-.5,.5,0),Ws,s,Vs,i,r),Tu.set(0,1),o=n.ray.intersectTriangle(kl,Vl,aa,!1,sa),o===null))return;const a=n.ray.origin.distanceTo(sa);a<n.near||a>n.far||t.push({distance:a,point:sa.clone(),uv:We.getUV(sa,kl,aa,Vl,ng,Tu,ig,new wt),face:null,object:this})},copy:function(n){return Ut.prototype.copy.call(this,n),n.center!==void 0&&this.center.copy(n.center),this.material=n.material,this}});function Wl(n,t,e,i,r,s){$s.subVectors(n,e).addScalar(.5).multiply(i),r!==void 0?(oa.x=s*$s.x-r*$s.y,oa.y=r*$s.x+s*$s.y):oa.copy($s),n.copy(t),n.x+=oa.x,n.y+=oa.y,n.applyMatrix4(eg)}const $l=new H,sg=new H;function Au(){Ut.call(this),this._currentLevel=0,this.type="LOD",Object.defineProperties(this,{levels:{enumerable:!0,value:[]}}),this.autoUpdate=!0}Au.prototype=Object.assign(Object.create(Ut.prototype),{constructor:Au,isLOD:!0,copy:function(n){Ut.prototype.copy.call(this,n,!1);const t=n.levels;for(let e=0,i=t.length;e<i;e++){const r=t[e];this.addLevel(r.object.clone(),r.distance)}return this.autoUpdate=n.autoUpdate,this},addLevel:function(n,t){t===void 0&&(t=0),t=Math.abs(t);const e=this.levels;let i;for(i=0;i<e.length&&!(t<e[i].distance);i++);return e.splice(i,0,{distance:t,object:n}),this.add(n),this},getCurrentLevel:function(){return this._currentLevel},getObjectForDistance:function(n){const t=this.levels;if(t.length>0){let e,i;for(e=1,i=t.length;e<i&&!(n<t[e].distance);e++);return t[e-1].object}return null},raycast:function(n,t){if(this.levels.length>0){$l.setFromMatrixPosition(this.matrixWorld);const i=n.ray.origin.distanceTo($l);this.getObjectForDistance(i).raycast(n,t)}},update:function(n){const t=this.levels;if(t.length>1){$l.setFromMatrixPosition(n.matrixWorld),sg.setFromMatrixPosition(this.matrixWorld);const e=$l.distanceTo(sg)/n.zoom;t[0].object.visible=!0;let i,r;for(i=1,r=t.length;i<r&&e>=t[i].distance;i++)t[i-1].object.visible=!1,t[i].object.visible=!0;for(this._currentLevel=i-1;i<r;i++)t[i].object.visible=!1}},toJSON:function(n){const t=Ut.prototype.toJSON.call(this,n);this.autoUpdate===!1&&(t.object.autoUpdate=!1),t.object.levels=[];const e=this.levels;for(let i=0,r=e.length;i<r;i++){const s=e[i];t.object.levels.push({object:s.object.uuid,distance:s.distance})}return t}});function Lu(n,t){n&&n.isGeometry&&console.error("THREE.SkinnedMesh no longer supports THREE.Geometry. Use THREE.BufferGeometry instead."),$e.call(this,n,t),this.type="SkinnedMesh",this.bindMode="attached",this.bindMatrix=new Wt,this.bindMatrixInverse=new Wt}Lu.prototype=Object.assign(Object.create($e.prototype),{constructor:Lu,isSkinnedMesh:!0,copy:function(n){return $e.prototype.copy.call(this,n),this.bindMode=n.bindMode,this.bindMatrix.copy(n.bindMatrix),this.bindMatrixInverse.copy(n.bindMatrixInverse),this.skeleton=n.skeleton,this},bind:function(n,t){this.skeleton=n,t===void 0&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),t=this.matrixWorld),this.bindMatrix.copy(t),this.bindMatrixInverse.getInverse(t)},pose:function(){this.skeleton.pose()},normalizeSkinWeights:function(){const n=new ae,t=this.geometry.attributes.skinWeight;for(let e=0,i=t.count;e<i;e++){n.x=t.getX(e),n.y=t.getY(e),n.z=t.getZ(e),n.w=t.getW(e);const r=1/n.manhattanLength();r!==1/0?n.multiplyScalar(r):n.set(1,0,0,0),t.setXYZW(e,n.x,n.y,n.z,n.w)}},updateMatrixWorld:function(n){$e.prototype.updateMatrixWorld.call(this,n),this.bindMode==="attached"?this.bindMatrixInverse.getInverse(this.matrixWorld):this.bindMode==="detached"?this.bindMatrixInverse.getInverse(this.bindMatrix):console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)},boneTransform:function(){const n=new H,t=new ae,e=new ae,i=new H,r=new Wt;return function(s,o){const a=this.skeleton,l=this.geometry;t.fromBufferAttribute(l.attributes.skinIndex,s),e.fromBufferAttribute(l.attributes.skinWeight,s),n.fromBufferAttribute(l.attributes.position,s).applyMatrix4(this.bindMatrix),o.set(0,0,0);for(let c=0;c<4;c++){const h=e.getComponent(c);if(h!==0){const u=t.getComponent(c);r.multiplyMatrices(a.bones[u].matrixWorld,a.boneInverses[u]),o.addScaledVector(i.copy(n).applyMatrix4(r),h)}}return o.applyMatrix4(this.bindMatrixInverse)}}()});const og=new Wt,ZL=new Wt;function Cu(n,t){if(n=n||[],this.bones=n.slice(0),this.boneMatrices=new Float32Array(this.bones.length*16),this.frame=-1,t===void 0)this.calculateInverses();else if(this.bones.length===t.length)this.boneInverses=t.slice(0);else{console.warn("THREE.Skeleton boneInverses is the wrong length."),this.boneInverses=[];for(let e=0,i=this.bones.length;e<i;e++)this.boneInverses.push(new Wt)}}Object.assign(Cu.prototype,{calculateInverses:function(){this.boneInverses=[];for(let n=0,t=this.bones.length;n<t;n++){const e=new Wt;this.bones[n]&&e.getInverse(this.bones[n].matrixWorld),this.boneInverses.push(e)}},pose:function(){for(let n=0,t=this.bones.length;n<t;n++){const e=this.bones[n];e&&e.matrixWorld.getInverse(this.boneInverses[n])}for(let n=0,t=this.bones.length;n<t;n++){const e=this.bones[n];e&&(e.parent&&e.parent.isBone?(e.matrix.getInverse(e.parent.matrixWorld),e.matrix.multiply(e.matrixWorld)):e.matrix.copy(e.matrixWorld),e.matrix.decompose(e.position,e.quaternion,e.scale))}},update:function(){const n=this.bones,t=this.boneInverses,e=this.boneMatrices,i=this.boneTexture;for(let r=0,s=n.length;r<s;r++){const o=n[r]?n[r].matrixWorld:ZL;og.multiplyMatrices(o,t[r]),og.toArray(e,r*16)}i!==void 0&&(i.needsUpdate=!0)},clone:function(){return new Cu(this.bones,this.boneInverses)},getBoneByName:function(n){for(let t=0,e=this.bones.length;t<e;t++){const i=this.bones[t];if(i.name===n)return i}},dispose:function(){this.boneTexture&&(this.boneTexture.dispose(),this.boneTexture=void 0)}});function ag(){Ut.call(this),this.type="Bone"}ag.prototype=Object.assign(Object.create(Ut.prototype),{constructor:ag,isBone:!0});const lg=new Wt,cg=new Wt,ql=[],la=new $e;function hg(n,t,e){$e.call(this,n,t),this.instanceMatrix=new kt(new Float32Array(e*16),16),this.instanceColor=null,this.count=e,this.frustumCulled=!1}hg.prototype=Object.assign(Object.create($e.prototype),{constructor:hg,isInstancedMesh:!0,copy:function(n){return $e.prototype.copy.call(this,n),this.instanceMatrix.copy(n.instanceMatrix),this.count=n.count,this},setColorAt:function(n,t){this.instanceColor===null&&(this.instanceColor=new kt(new Float32Array(this.count*3),3)),t.toArray(this.instanceColor.array,n*3)},getMatrixAt:function(n,t){t.fromArray(this.instanceMatrix.array,n*16)},raycast:function(n,t){const e=this.matrixWorld,i=this.count;if(la.geometry=this.geometry,la.material=this.material,la.material!==void 0)for(let r=0;r<i;r++){this.getMatrixAt(r,lg),cg.multiplyMatrices(e,lg),la.matrixWorld=cg,la.raycast(n,ql);for(let s=0,o=ql.length;s<o;s++){const a=ql[s];a.instanceId=r,a.object=this,t.push(a)}ql.length=0}},setMatrixAt:function(n,t){t.toArray(this.instanceMatrix.array,n*16)},updateMorphTargets:function(){}});function bn(n){Gt.call(this),this.type="LineBasicMaterial",this.color=new Ot(16777215),this.linewidth=1,this.linecap="round",this.linejoin="round",this.morphTargets=!1,this.setValues(n)}bn.prototype=Object.create(Gt.prototype);bn.prototype.constructor=bn;bn.prototype.isLineBasicMaterial=!0;bn.prototype.copy=function(n){return Gt.prototype.copy.call(this,n),this.color.copy(n.color),this.linewidth=n.linewidth,this.linecap=n.linecap,this.linejoin=n.linejoin,this.morphTargets=n.morphTargets,this};const ug=new H,dg=new H,fg=new Wt,jl=new jo,Xl=new $i;function qs(n,t,e){e===1&&console.error("THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.LineSegments instead."),Ut.call(this),this.type="Line",this.geometry=n!==void 0?n:new le,this.material=t!==void 0?t:new bn,this.updateMorphTargets()}qs.prototype=Object.assign(Object.create(Ut.prototype),{constructor:qs,isLine:!0,copy:function(n){return Ut.prototype.copy.call(this,n),this.material=n.material,this.geometry=n.geometry,this},computeLineDistances:function(){const n=this.geometry;if(n.isBufferGeometry)if(n.index===null){const t=n.attributes.position,e=[0];for(let i=1,r=t.count;i<r;i++)ug.fromBufferAttribute(t,i-1),dg.fromBufferAttribute(t,i),e[i]=e[i-1],e[i]+=ug.distanceTo(dg);n.setAttribute("lineDistance",new ee(e,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else if(n.isGeometry){const t=n.vertices,e=n.lineDistances;e[0]=0;for(let i=1,r=t.length;i<r;i++)e[i]=e[i-1],e[i]+=t[i-1].distanceTo(t[i])}return this},raycast:function(n,t){const e=this.geometry,i=this.matrixWorld,r=n.params.Line.threshold;if(e.boundingSphere===null&&e.computeBoundingSphere(),Xl.copy(e.boundingSphere),Xl.applyMatrix4(i),Xl.radius+=r,n.ray.intersectsSphere(Xl)===!1)return;fg.getInverse(i),jl.copy(n.ray).applyMatrix4(fg);const s=r/((this.scale.x+this.scale.y+this.scale.z)/3),o=s*s,a=new H,l=new H,c=new H,h=new H,u=this.isLineSegments?2:1;if(e.isBufferGeometry){const d=e.index,g=e.attributes.position;if(d!==null){const v=d.array;for(let x=0,m=v.length-1;x<m;x+=u){const p=v[x],b=v[x+1];if(a.fromBufferAttribute(g,p),l.fromBufferAttribute(g,b),jl.distanceSqToSegment(a,l,h,c)>o)continue;h.applyMatrix4(this.matrixWorld);const w=n.ray.origin.distanceTo(h);w<n.near||w>n.far||t.push({distance:w,point:c.clone().applyMatrix4(this.matrixWorld),index:x,face:null,faceIndex:null,object:this})}}else for(let v=0,x=g.count-1;v<x;v+=u){if(a.fromBufferAttribute(g,v),l.fromBufferAttribute(g,v+1),jl.distanceSqToSegment(a,l,h,c)>o)continue;h.applyMatrix4(this.matrixWorld);const p=n.ray.origin.distanceTo(h);p<n.near||p>n.far||t.push({distance:p,point:c.clone().applyMatrix4(this.matrixWorld),index:v,face:null,faceIndex:null,object:this})}}else if(e.isGeometry){const d=e.vertices,f=d.length;for(let g=0;g<f-1;g+=u){if(jl.distanceSqToSegment(d[g],d[g+1],h,c)>o)continue;h.applyMatrix4(this.matrixWorld);const x=n.ray.origin.distanceTo(h);x<n.near||x>n.far||t.push({distance:x,point:c.clone().applyMatrix4(this.matrixWorld),index:g,face:null,faceIndex:null,object:this})}}},updateMorphTargets:function(){const n=this.geometry;if(n.isBufferGeometry){const t=n.morphAttributes,e=Object.keys(t);if(e.length>0){const i=t[e[0]];if(i!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let r=0,s=i.length;r<s;r++){const o=i[r].name||String(r);this.morphTargetInfluences.push(0),this.morphTargetDictionary[o]=r}}}}else{const t=n.morphTargets;t!==void 0&&t.length>0&&console.error("THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")}}});const Yl=new H,Zl=new H;function Jl(n,t){qs.call(this,n,t),this.type="LineSegments"}Jl.prototype=Object.assign(Object.create(qs.prototype),{constructor:Jl,isLineSegments:!0,computeLineDistances:function(){const n=this.geometry;if(n.isBufferGeometry)if(n.index===null){const t=n.attributes.position,e=[];for(let i=0,r=t.count;i<r;i+=2)Yl.fromBufferAttribute(t,i),Zl.fromBufferAttribute(t,i+1),e[i]=i===0?0:e[i-1],e[i+1]=e[i]+Yl.distanceTo(Zl);n.setAttribute("lineDistance",new ee(e,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else if(n.isGeometry){const t=n.vertices,e=n.lineDistances;for(let i=0,r=t.length;i<r;i+=2)Yl.copy(t[i]),Zl.copy(t[i+1]),e[i]=i===0?0:e[i-1],e[i+1]=e[i]+Yl.distanceTo(Zl)}return this}});function pg(n,t){qs.call(this,n,t),this.type="LineLoop"}pg.prototype=Object.assign(Object.create(qs.prototype),{constructor:pg,isLineLoop:!0});function Tr(n){Gt.call(this),this.type="PointsMaterial",this.color=new Ot(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.morphTargets=!1,this.setValues(n)}Tr.prototype=Object.create(Gt.prototype);Tr.prototype.constructor=Tr;Tr.prototype.isPointsMaterial=!0;Tr.prototype.copy=function(n){return Gt.prototype.copy.call(this,n),this.color.copy(n.color),this.map=n.map,this.alphaMap=n.alphaMap,this.size=n.size,this.sizeAttenuation=n.sizeAttenuation,this.morphTargets=n.morphTargets,this};const mg=new Wt,Ru=new jo,Ql=new $i,Kl=new H;function gg(n,t){Ut.call(this),this.type="Points",this.geometry=n!==void 0?n:new le,this.material=t!==void 0?t:new Tr,this.updateMorphTargets()}gg.prototype=Object.assign(Object.create(Ut.prototype),{constructor:gg,isPoints:!0,copy:function(n){return Ut.prototype.copy.call(this,n),this.material=n.material,this.geometry=n.geometry,this},raycast:function(n,t){const e=this.geometry,i=this.matrixWorld,r=n.params.Points.threshold;if(e.boundingSphere===null&&e.computeBoundingSphere(),Ql.copy(e.boundingSphere),Ql.applyMatrix4(i),Ql.radius+=r,n.ray.intersectsSphere(Ql)===!1)return;mg.getInverse(i),Ru.copy(n.ray).applyMatrix4(mg);const s=r/((this.scale.x+this.scale.y+this.scale.z)/3),o=s*s;if(e.isBufferGeometry){const a=e.index,c=e.attributes.position;if(a!==null){const h=a.array;for(let u=0,d=h.length;u<d;u++){const f=h[u];Kl.fromBufferAttribute(c,f),Pu(Kl,f,o,i,n,t,this)}}else for(let h=0,u=c.count;h<u;h++)Kl.fromBufferAttribute(c,h),Pu(Kl,h,o,i,n,t,this)}else{const a=e.vertices;for(let l=0,c=a.length;l<c;l++)Pu(a[l],l,o,i,n,t,this)}},updateMorphTargets:function(){const n=this.geometry;if(n.isBufferGeometry){const t=n.morphAttributes,e=Object.keys(t);if(e.length>0){const i=t[e[0]];if(i!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let r=0,s=i.length;r<s;r++){const o=i[r].name||String(r);this.morphTargetInfluences.push(0),this.morphTargetDictionary[o]=r}}}}else{const t=n.morphTargets;t!==void 0&&t.length>0&&console.error("THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")}}});function Pu(n,t,e,i,r,s,o){const a=Ru.distanceSqToPoint(n);if(a<e){const l=new H;Ru.closestPointToPoint(n,l),l.applyMatrix4(i);const c=r.ray.origin.distanceTo(l);if(c<r.near||c>r.far)return;s.push({distance:c,distanceToRay:Math.sqrt(a),point:l,index:t,face:null,object:o})}}function vg(n,t,e,i,r,s,o,a,l){de.call(this,n,t,e,i,r,s,o,a,l),this.format=o!==void 0?o:pr,this.minFilter=s!==void 0?s:Ve,this.magFilter=r!==void 0?r:Ve,this.generateMipmaps=!1;const c=this;function h(){c.needsUpdate=!0,n.requestVideoFrameCallback(h)}"requestVideoFrameCallback"in n&&n.requestVideoFrameCallback(h)}vg.prototype=Object.assign(Object.create(de.prototype),{constructor:vg,clone:function(){return new this.constructor(this.image).copy(this)},isVideoTexture:!0,update:function(){const n=this.image;"requestVideoFrameCallback"in n===!1&&n.readyState>=n.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}});function ca(n,t,e,i,r,s,o,a,l,c,h,u){de.call(this,null,s,o,a,l,c,i,r,h,u),this.image={width:t,height:e},this.mipmaps=n,this.flipY=!1,this.generateMipmaps=!1}ca.prototype=Object.create(de.prototype);ca.prototype.constructor=ca;ca.prototype.isCompressedTexture=!0;function tc(n,t,e,i,r,s,o,a,l){de.call(this,n,t,e,i,r,s,o,a,l),this.needsUpdate=!0}tc.prototype=Object.create(de.prototype);tc.prototype.constructor=tc;tc.prototype.isCanvasTexture=!0;function ec(n,t,e,i,r,s,o,a,l,c){if(c=c!==void 0?c:xs,c!==xs&&c!==ko)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");e===void 0&&c===xs&&(e=xl),e===void 0&&c===ko&&(e=Go),de.call(this,null,i,r,s,o,a,c,e,l),this.image={width:n,height:t},this.magFilter=o!==void 0?o:Je,this.minFilter=a!==void 0?a:Je,this.flipY=!1,this.generateMipmaps=!1}ec.prototype=Object.create(de.prototype);ec.prototype.constructor=ec;ec.prototype.isDepthTexture=!0;let JL=0;const jn=new Wt,Iu=new Ut,nc=new H;function Fn(){Object.defineProperty(this,"id",{value:JL+=2}),this.uuid=Vt.generateUUID(),this.name="",this.type="Geometry",this.vertices=[],this.colors=[],this.faces=[],this.faceVertexUvs=[[]],this.morphTargets=[],this.morphNormals=[],this.skinWeights=[],this.skinIndices=[],this.lineDistances=[],this.boundingBox=null,this.boundingSphere=null,this.elementsNeedUpdate=!1,this.verticesNeedUpdate=!1,this.uvsNeedUpdate=!1,this.normalsNeedUpdate=!1,this.colorsNeedUpdate=!1,this.lineDistancesNeedUpdate=!1,this.groupsNeedUpdate=!1}Fn.prototype=Object.assign(Object.create(ci.prototype),{constructor:Fn,isGeometry:!0,applyMatrix4:function(n){const t=new nn().getNormalMatrix(n);for(let e=0,i=this.vertices.length;e<i;e++)this.vertices[e].applyMatrix4(n);for(let e=0,i=this.faces.length;e<i;e++){const r=this.faces[e];r.normal.applyMatrix3(t).normalize();for(let s=0,o=r.vertexNormals.length;s<o;s++)r.vertexNormals[s].applyMatrix3(t).normalize()}return this.boundingBox!==null&&this.computeBoundingBox(),this.boundingSphere!==null&&this.computeBoundingSphere(),this.verticesNeedUpdate=!0,this.normalsNeedUpdate=!0,this},rotateX:function(n){return jn.makeRotationX(n),this.applyMatrix4(jn),this},rotateY:function(n){return jn.makeRotationY(n),this.applyMatrix4(jn),this},rotateZ:function(n){return jn.makeRotationZ(n),this.applyMatrix4(jn),this},translate:function(n,t,e){return jn.makeTranslation(n,t,e),this.applyMatrix4(jn),this},scale:function(n,t,e){return jn.makeScale(n,t,e),this.applyMatrix4(jn),this},lookAt:function(n){return Iu.lookAt(n),Iu.updateMatrix(),this.applyMatrix4(Iu.matrix),this},fromBufferGeometry:function(n){const t=this,e=n.index!==null?n.index:void 0,i=n.attributes;if(i.position===void 0)return console.error("THREE.Geometry.fromBufferGeometry(): Position attribute required for conversion."),this;const r=i.position,s=i.normal,o=i.color,a=i.uv,l=i.uv2;l!==void 0&&(this.faceVertexUvs[1]=[]);for(let u=0;u<r.count;u++)t.vertices.push(new H().fromBufferAttribute(r,u)),o!==void 0&&t.colors.push(new Ot().fromBufferAttribute(o,u));function c(u,d,f,g){const v=o===void 0?[]:[t.colors[u].clone(),t.colors[d].clone(),t.colors[f].clone()],x=s===void 0?[]:[new H().fromBufferAttribute(s,u),new H().fromBufferAttribute(s,d),new H().fromBufferAttribute(s,f)],m=new uu(u,d,f,x,v,g);t.faces.push(m),a!==void 0&&t.faceVertexUvs[0].push([new wt().fromBufferAttribute(a,u),new wt().fromBufferAttribute(a,d),new wt().fromBufferAttribute(a,f)]),l!==void 0&&t.faceVertexUvs[1].push([new wt().fromBufferAttribute(l,u),new wt().fromBufferAttribute(l,d),new wt().fromBufferAttribute(l,f)])}const h=n.groups;if(h.length>0)for(let u=0;u<h.length;u++){const d=h[u],f=d.start,g=d.count;for(let v=f,x=f+g;v<x;v+=3)e!==void 0?c(e.getX(v),e.getX(v+1),e.getX(v+2),d.materialIndex):c(v,v+1,v+2,d.materialIndex)}else if(e!==void 0)for(let u=0;u<e.count;u+=3)c(e.getX(u),e.getX(u+1),e.getX(u+2));else for(let u=0;u<r.count;u+=3)c(u,u+1,u+2);return this.computeFaceNormals(),n.boundingBox!==null&&(this.boundingBox=n.boundingBox.clone()),n.boundingSphere!==null&&(this.boundingSphere=n.boundingSphere.clone()),this},center:function(){return this.computeBoundingBox(),this.boundingBox.getCenter(nc).negate(),this.translate(nc.x,nc.y,nc.z),this},normalize:function(){this.computeBoundingSphere();const n=this.boundingSphere.center,t=this.boundingSphere.radius,e=t===0?1:1/t,i=new Wt;return i.set(e,0,0,-e*n.x,0,e,0,-e*n.y,0,0,e,-e*n.z,0,0,0,1),this.applyMatrix4(i),this},computeFaceNormals:function(){const n=new H,t=new H;for(let e=0,i=this.faces.length;e<i;e++){const r=this.faces[e],s=this.vertices[r.a],o=this.vertices[r.b],a=this.vertices[r.c];n.subVectors(a,o),t.subVectors(s,o),n.cross(t),n.normalize(),r.normal.copy(n)}},computeVertexNormals:function(n){n===void 0&&(n=!0);const t=new Array(this.vertices.length);for(let e=0,i=this.vertices.length;e<i;e++)t[e]=new H;if(n){const e=new H,i=new H;for(let r=0,s=this.faces.length;r<s;r++){const o=this.faces[r],a=this.vertices[o.a],l=this.vertices[o.b],c=this.vertices[o.c];e.subVectors(c,l),i.subVectors(a,l),e.cross(i),t[o.a].add(e),t[o.b].add(e),t[o.c].add(e)}}else{this.computeFaceNormals();for(let e=0,i=this.faces.length;e<i;e++){const r=this.faces[e];t[r.a].add(r.normal),t[r.b].add(r.normal),t[r.c].add(r.normal)}}for(let e=0,i=this.vertices.length;e<i;e++)t[e].normalize();for(let e=0,i=this.faces.length;e<i;e++){const r=this.faces[e],s=r.vertexNormals;s.length===3?(s[0].copy(t[r.a]),s[1].copy(t[r.b]),s[2].copy(t[r.c])):(s[0]=t[r.a].clone(),s[1]=t[r.b].clone(),s[2]=t[r.c].clone())}this.faces.length>0&&(this.normalsNeedUpdate=!0)},computeFlatVertexNormals:function(){this.computeFaceNormals();for(let n=0,t=this.faces.length;n<t;n++){const e=this.faces[n],i=e.vertexNormals;i.length===3?(i[0].copy(e.normal),i[1].copy(e.normal),i[2].copy(e.normal)):(i[0]=e.normal.clone(),i[1]=e.normal.clone(),i[2]=e.normal.clone())}this.faces.length>0&&(this.normalsNeedUpdate=!0)},computeMorphNormals:function(){for(let t=0,e=this.faces.length;t<e;t++){const i=this.faces[t];i.__originalFaceNormal?i.__originalFaceNormal.copy(i.normal):i.__originalFaceNormal=i.normal.clone(),i.__originalVertexNormals||(i.__originalVertexNormals=[]);for(let r=0,s=i.vertexNormals.length;r<s;r++)i.__originalVertexNormals[r]?i.__originalVertexNormals[r].copy(i.vertexNormals[r]):i.__originalVertexNormals[r]=i.vertexNormals[r].clone()}const n=new Fn;n.faces=this.faces;for(let t=0,e=this.morphTargets.length;t<e;t++){if(!this.morphNormals[t]){this.morphNormals[t]={},this.morphNormals[t].faceNormals=[],this.morphNormals[t].vertexNormals=[];const r=this.morphNormals[t].faceNormals,s=this.morphNormals[t].vertexNormals;for(let o=0,a=this.faces.length;o<a;o++){const l=new H,c={a:new H,b:new H,c:new H};r.push(l),s.push(c)}}const i=this.morphNormals[t];n.vertices=this.morphTargets[t].vertices,n.computeFaceNormals(),n.computeVertexNormals();for(let r=0,s=this.faces.length;r<s;r++){const o=this.faces[r],a=i.faceNormals[r],l=i.vertexNormals[r];a.copy(o.normal),l.a.copy(o.vertexNormals[0]),l.b.copy(o.vertexNormals[1]),l.c.copy(o.vertexNormals[2])}}for(let t=0,e=this.faces.length;t<e;t++){const i=this.faces[t];i.normal=i.__originalFaceNormal,i.vertexNormals=i.__originalVertexNormals}},computeBoundingBox:function(){this.boundingBox===null&&(this.boundingBox=new ki),this.boundingBox.setFromPoints(this.vertices)},computeBoundingSphere:function(){this.boundingSphere===null&&(this.boundingSphere=new $i),this.boundingSphere.setFromPoints(this.vertices)},merge:function(n,t,e){if(!(n&&n.isGeometry)){console.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.",n);return}let i;const r=this.vertices.length,s=this.vertices,o=n.vertices,a=this.faces,l=n.faces,c=this.colors,h=n.colors;e===void 0&&(e=0),t!==void 0&&(i=new nn().getNormalMatrix(t));for(let u=0,d=o.length;u<d;u++){const g=o[u].clone();t!==void 0&&g.applyMatrix4(t),s.push(g)}for(let u=0,d=h.length;u<d;u++)c.push(h[u].clone());for(let u=0,d=l.length;u<d;u++){const f=l[u];let g,v;const x=f.vertexNormals,m=f.vertexColors,p=new uu(f.a+r,f.b+r,f.c+r);p.normal.copy(f.normal),i!==void 0&&p.normal.applyMatrix3(i).normalize();for(let b=0,_=x.length;b<_;b++)g=x[b].clone(),i!==void 0&&g.applyMatrix3(i).normalize(),p.vertexNormals.push(g);p.color.copy(f.color);for(let b=0,_=m.length;b<_;b++)v=m[b],p.vertexColors.push(v.clone());p.materialIndex=f.materialIndex+e,a.push(p)}for(let u=0,d=n.faceVertexUvs.length;u<d;u++){const f=n.faceVertexUvs[u];this.faceVertexUvs[u]===void 0&&(this.faceVertexUvs[u]=[]);for(let g=0,v=f.length;g<v;g++){const x=f[g],m=[];for(let p=0,b=x.length;p<b;p++)m.push(x[p].clone());this.faceVertexUvs[u].push(m)}}},mergeMesh:function(n){if(!(n&&n.isMesh)){console.error("THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.",n);return}n.matrixAutoUpdate&&n.updateMatrix(),this.merge(n.geometry,n.matrix)},mergeVertices:function(){const n={},t=[],e=[],r=Math.pow(10,4);for(let a=0,l=this.vertices.length;a<l;a++){const c=this.vertices[a],h=Math.round(c.x*r)+"_"+Math.round(c.y*r)+"_"+Math.round(c.z*r);n[h]===void 0?(n[h]=a,t.push(this.vertices[a]),e[a]=t.length-1):e[a]=e[n[h]]}const s=[];for(let a=0,l=this.faces.length;a<l;a++){const c=this.faces[a];c.a=e[c.a],c.b=e[c.b],c.c=e[c.c];const h=[c.a,c.b,c.c];for(let u=0;u<3;u++)if(h[u]===h[(u+1)%3]){s.push(a);break}}for(let a=s.length-1;a>=0;a--){const l=s[a];this.faces.splice(l,1);for(let c=0,h=this.faceVertexUvs.length;c<h;c++)this.faceVertexUvs[c].splice(l,1)}const o=this.vertices.length-t.length;return this.vertices=t,o},setFromPoints:function(n){this.vertices=[];for(let t=0,e=n.length;t<e;t++){const i=n[t];this.vertices.push(new H(i.x,i.y,i.z||0))}return this},sortFacesByMaterialIndex:function(){const n=this.faces,t=n.length;for(let a=0;a<t;a++)n[a]._id=a;function e(a,l){return a.materialIndex-l.materialIndex}n.sort(e);const i=this.faceVertexUvs[0],r=this.faceVertexUvs[1];let s,o;i&&i.length===t&&(s=[]),r&&r.length===t&&(o=[]);for(let a=0;a<t;a++){const l=n[a]._id;s&&s.push(i[l]),o&&o.push(r[l])}s&&(this.faceVertexUvs[0]=s),o&&(this.faceVertexUvs[1]=o)},toJSON:function(){const n={metadata:{version:4.5,type:"Geometry",generator:"Geometry.toJSON"}};if(n.uuid=this.uuid,n.type=this.type,this.name!==""&&(n.name=this.name),this.parameters!==void 0){const f=this.parameters;for(const g in f)f[g]!==void 0&&(n[g]=f[g]);return n}const t=[];for(let f=0;f<this.vertices.length;f++){const g=this.vertices[f];t.push(g.x,g.y,g.z)}const e=[],i=[],r={},s=[],o={},a=[],l={};for(let f=0;f<this.faces.length;f++){const g=this.faces[f],v=!0,x=!1,m=this.faceVertexUvs[0][f]!==void 0,p=g.normal.length()>0,b=g.vertexNormals.length>0,_=g.color.r!==1||g.color.g!==1||g.color.b!==1,w=g.vertexColors.length>0;let E=0;if(E=c(E,0,0),E=c(E,1,v),E=c(E,2,x),E=c(E,3,m),E=c(E,4,p),E=c(E,5,b),E=c(E,6,_),E=c(E,7,w),e.push(E),e.push(g.a,g.b,g.c),e.push(g.materialIndex),m){const S=this.faceVertexUvs[0][f];e.push(d(S[0]),d(S[1]),d(S[2]))}if(p&&e.push(h(g.normal)),b){const S=g.vertexNormals;e.push(h(S[0]),h(S[1]),h(S[2]))}if(_&&e.push(u(g.color)),w){const S=g.vertexColors;e.push(u(S[0]),u(S[1]),u(S[2]))}}function c(f,g,v){return v?f|1<<g:f&~(1<<g)}function h(f){const g=f.x.toString()+f.y.toString()+f.z.toString();return r[g]!==void 0||(r[g]=i.length/3,i.push(f.x,f.y,f.z)),r[g]}function u(f){const g=f.r.toString()+f.g.toString()+f.b.toString();return o[g]!==void 0||(o[g]=s.length,s.push(f.getHex())),o[g]}function d(f){const g=f.x.toString()+f.y.toString();return l[g]!==void 0||(l[g]=a.length/2,a.push(f.x,f.y)),l[g]}return n.data={},n.data.vertices=t,n.data.normals=i,s.length>0&&(n.data.colors=s),a.length>0&&(n.data.uvs=[a]),n.data.faces=e,n},clone:function(){return new Fn().copy(this)},copy:function(n){this.vertices=[],this.colors=[],this.faces=[],this.faceVertexUvs=[[]],this.morphTargets=[],this.morphNormals=[],this.skinWeights=[],this.skinIndices=[],this.lineDistances=[],this.boundingBox=null,this.boundingSphere=null,this.name=n.name;const t=n.vertices;for(let u=0,d=t.length;u<d;u++)this.vertices.push(t[u].clone());const e=n.colors;for(let u=0,d=e.length;u<d;u++)this.colors.push(e[u].clone());const i=n.faces;for(let u=0,d=i.length;u<d;u++)this.faces.push(i[u].clone());for(let u=0,d=n.faceVertexUvs.length;u<d;u++){const f=n.faceVertexUvs[u];this.faceVertexUvs[u]===void 0&&(this.faceVertexUvs[u]=[]);for(let g=0,v=f.length;g<v;g++){const x=f[g],m=[];for(let p=0,b=x.length;p<b;p++){const _=x[p];m.push(_.clone())}this.faceVertexUvs[u].push(m)}}const r=n.morphTargets;for(let u=0,d=r.length;u<d;u++){const f={};if(f.name=r[u].name,r[u].vertices!==void 0){f.vertices=[];for(let g=0,v=r[u].vertices.length;g<v;g++)f.vertices.push(r[u].vertices[g].clone())}if(r[u].normals!==void 0){f.normals=[];for(let g=0,v=r[u].normals.length;g<v;g++)f.normals.push(r[u].normals[g].clone())}this.morphTargets.push(f)}const s=n.morphNormals;for(let u=0,d=s.length;u<d;u++){const f={};if(s[u].vertexNormals!==void 0){f.vertexNormals=[];for(let g=0,v=s[u].vertexNormals.length;g<v;g++){const x=s[u].vertexNormals[g],m={};m.a=x.a.clone(),m.b=x.b.clone(),m.c=x.c.clone(),f.vertexNormals.push(m)}}if(s[u].faceNormals!==void 0){f.faceNormals=[];for(let g=0,v=s[u].faceNormals.length;g<v;g++)f.faceNormals.push(s[u].faceNormals[g].clone())}this.morphNormals.push(f)}const o=n.skinWeights;for(let u=0,d=o.length;u<d;u++)this.skinWeights.push(o[u].clone());const a=n.skinIndices;for(let u=0,d=a.length;u<d;u++)this.skinIndices.push(a[u].clone());const l=n.lineDistances;for(let u=0,d=l.length;u<d;u++)this.lineDistances.push(l[u]);const c=n.boundingBox;c!==null&&(this.boundingBox=c.clone());const h=n.boundingSphere;return h!==null&&(this.boundingSphere=h.clone()),this.elementsNeedUpdate=n.elementsNeedUpdate,this.verticesNeedUpdate=n.verticesNeedUpdate,this.uvsNeedUpdate=n.uvsNeedUpdate,this.normalsNeedUpdate=n.normalsNeedUpdate,this.colorsNeedUpdate=n.colorsNeedUpdate,this.lineDistancesNeedUpdate=n.lineDistancesNeedUpdate,this.groupsNeedUpdate=n.groupsNeedUpdate,this},dispose:function(){this.dispatchEvent({type:"dispose"})}});new H;new H;new H;new We;const QL={triangulate:function(n,t,e){e=e||2;const i=t&&t.length,r=i?t[0]*e:n.length;let s=xg(n,0,r,e,!0);const o=[];if(!s||s.next===s.prev)return o;let a,l,c,h,u,d,f;if(i&&(s=i3(n,t,s,e)),n.length>80*e){a=c=n[0],l=h=n[1];for(let g=e;g<r;g+=e)u=n[g],d=n[g+1],u<a&&(a=u),d<l&&(l=d),u>c&&(c=u),d>h&&(h=d);f=Math.max(c-a,h-l),f=f!==0?1/f:0}return ha(s,o,e,a,l,f),o}};function xg(n,t,e,i,r){let s,o;if(r===p3(n,t,e,i)>0)for(s=t;s<e;s+=i)o=bg(s,n[s],n[s+1],o);else for(s=e-i;s>=t;s-=i)o=bg(s,n[s],n[s+1],o);return o&&ic(o,o.next)&&(da(o),o=o.next),o}function tr(n,t){if(!n)return n;t||(t=n);let e=n,i;do if(i=!1,!e.steiner&&(ic(e,e.next)||_e(e.prev,e,e.next)===0)){if(da(e),e=t=e.prev,e===e.next)break;i=!0}else e=e.next;while(i||e!==t);return t}function ha(n,t,e,i,r,s,o){if(!n)return;!o&&s&&l3(n,i,r,s);let a=n,l,c;for(;n.prev!==n.next;){if(l=n.prev,c=n.next,s?t3(n,i,r,s):KL(n)){t.push(l.i/e),t.push(n.i/e),t.push(c.i/e),da(n),n=c.next,a=c.next;continue}if(n=c,n===a){o?o===1?(n=e3(tr(n),t,e),ha(n,t,e,i,r,s,2)):o===2&&n3(n,t,e,i,r,s):ha(tr(n),t,e,i,r,s,1);break}}}function KL(n){const t=n.prev,e=n,i=n.next;if(_e(t,e,i)>=0)return!1;let r=n.next.next;for(;r!==n.prev;){if(js(t.x,t.y,e.x,e.y,i.x,i.y,r.x,r.y)&&_e(r.prev,r,r.next)>=0)return!1;r=r.next}return!0}function t3(n,t,e,i){const r=n.prev,s=n,o=n.next;if(_e(r,s,o)>=0)return!1;const a=r.x<s.x?r.x<o.x?r.x:o.x:s.x<o.x?s.x:o.x,l=r.y<s.y?r.y<o.y?r.y:o.y:s.y<o.y?s.y:o.y,c=r.x>s.x?r.x>o.x?r.x:o.x:s.x>o.x?s.x:o.x,h=r.y>s.y?r.y>o.y?r.y:o.y:s.y>o.y?s.y:o.y,u=Du(a,l,t,e,i),d=Du(c,h,t,e,i);let f=n.prevZ,g=n.nextZ;for(;f&&f.z>=u&&g&&g.z<=d;){if(f!==n.prev&&f!==n.next&&js(r.x,r.y,s.x,s.y,o.x,o.y,f.x,f.y)&&_e(f.prev,f,f.next)>=0||(f=f.prevZ,g!==n.prev&&g!==n.next&&js(r.x,r.y,s.x,s.y,o.x,o.y,g.x,g.y)&&_e(g.prev,g,g.next)>=0))return!1;g=g.nextZ}for(;f&&f.z>=u;){if(f!==n.prev&&f!==n.next&&js(r.x,r.y,s.x,s.y,o.x,o.y,f.x,f.y)&&_e(f.prev,f,f.next)>=0)return!1;f=f.prevZ}for(;g&&g.z<=d;){if(g!==n.prev&&g!==n.next&&js(r.x,r.y,s.x,s.y,o.x,o.y,g.x,g.y)&&_e(g.prev,g,g.next)>=0)return!1;g=g.nextZ}return!0}function e3(n,t,e){let i=n;do{const r=i.prev,s=i.next.next;!ic(r,s)&&yg(r,i,i.next,s)&&ua(r,s)&&ua(s,r)&&(t.push(r.i/e),t.push(i.i/e),t.push(s.i/e),da(i),da(i.next),i=n=s),i=i.next}while(i!==n);return tr(i)}function n3(n,t,e,i,r,s){let o=n;do{let a=o.next.next;for(;a!==o.prev;){if(o.i!==a.i&&u3(o,a)){let l=_g(o,a);o=tr(o,o.next),l=tr(l,l.next),ha(o,t,e,i,r,s),ha(l,t,e,i,r,s);return}a=a.next}o=o.next}while(o!==n)}function i3(n,t,e,i){const r=[];let s,o,a,l,c;for(s=0,o=t.length;s<o;s++)a=t[s]*i,l=s<o-1?t[s+1]*i:n.length,c=xg(n,a,l,i,!1),c===c.next&&(c.steiner=!0),r.push(h3(c));for(r.sort(r3),s=0;s<r.length;s++)s3(r[s],e),e=tr(e,e.next);return e}function r3(n,t){return n.x-t.x}function s3(n,t){if(t=o3(n,t),t){const e=_g(t,n);tr(t,t.next),tr(e,e.next)}}function o3(n,t){let e=t;const i=n.x,r=n.y;let s=-1/0,o;do{if(r<=e.y&&r>=e.next.y&&e.next.y!==e.y){const d=e.x+(r-e.y)*(e.next.x-e.x)/(e.next.y-e.y);if(d<=i&&d>s){if(s=d,d===i){if(r===e.y)return e;if(r===e.next.y)return e.next}o=e.x<e.next.x?e:e.next}}e=e.next}while(e!==t);if(!o)return null;if(i===s)return o;const a=o,l=o.x,c=o.y;let h=1/0,u;e=o;do i>=e.x&&e.x>=l&&i!==e.x&&js(r<c?i:s,r,l,c,r<c?s:i,r,e.x,e.y)&&(u=Math.abs(r-e.y)/(i-e.x),ua(e,n)&&(u<h||u===h&&(e.x>o.x||e.x===o.x&&a3(o,e)))&&(o=e,h=u)),e=e.next;while(e!==a);return o}function a3(n,t){return _e(n.prev,n,t.prev)<0&&_e(t.next,n,n.next)<0}function l3(n,t,e,i){let r=n;do r.z===null&&(r.z=Du(r.x,r.y,t,e,i)),r.prevZ=r.prev,r.nextZ=r.next,r=r.next;while(r!==n);r.prevZ.nextZ=null,r.prevZ=null,c3(r)}function c3(n){let t,e,i,r,s,o,a,l,c=1;do{for(e=n,n=null,s=null,o=0;e;){for(o++,i=e,a=0,t=0;t<c&&(a++,i=i.nextZ,!!i);t++);for(l=c;a>0||l>0&&i;)a!==0&&(l===0||!i||e.z<=i.z)?(r=e,e=e.nextZ,a--):(r=i,i=i.nextZ,l--),s?s.nextZ=r:n=r,r.prevZ=s,s=r;e=i}s.nextZ=null,c*=2}while(o>1);return n}function Du(n,t,e,i,r){return n=32767*(n-e)*r,t=32767*(t-i)*r,n=(n|n<<8)&16711935,n=(n|n<<4)&252645135,n=(n|n<<2)&858993459,n=(n|n<<1)&1431655765,t=(t|t<<8)&16711935,t=(t|t<<4)&252645135,t=(t|t<<2)&858993459,t=(t|t<<1)&1431655765,n|t<<1}function h3(n){let t=n,e=n;do(t.x<e.x||t.x===e.x&&t.y<e.y)&&(e=t),t=t.next;while(t!==n);return e}function js(n,t,e,i,r,s,o,a){return(r-o)*(t-a)-(n-o)*(s-a)>=0&&(n-o)*(i-a)-(e-o)*(t-a)>=0&&(e-o)*(s-a)-(r-o)*(i-a)>=0}function u3(n,t){return n.next.i!==t.i&&n.prev.i!==t.i&&!d3(n,t)&&(ua(n,t)&&ua(t,n)&&f3(n,t)&&(_e(n.prev,n,t.prev)||_e(n,t.prev,t))||ic(n,t)&&_e(n.prev,n,n.next)>0&&_e(t.prev,t,t.next)>0)}function _e(n,t,e){return(t.y-n.y)*(e.x-t.x)-(t.x-n.x)*(e.y-t.y)}function ic(n,t){return n.x===t.x&&n.y===t.y}function yg(n,t,e,i){const r=sc(_e(n,t,e)),s=sc(_e(n,t,i)),o=sc(_e(e,i,n)),a=sc(_e(e,i,t));return!!(r!==s&&o!==a||r===0&&rc(n,e,t)||s===0&&rc(n,i,t)||o===0&&rc(e,n,i)||a===0&&rc(e,t,i))}function rc(n,t,e){return t.x<=Math.max(n.x,e.x)&&t.x>=Math.min(n.x,e.x)&&t.y<=Math.max(n.y,e.y)&&t.y>=Math.min(n.y,e.y)}function sc(n){return n>0?1:n<0?-1:0}function d3(n,t){let e=n;do{if(e.i!==n.i&&e.next.i!==n.i&&e.i!==t.i&&e.next.i!==t.i&&yg(e,e.next,n,t))return!0;e=e.next}while(e!==n);return!1}function ua(n,t){return _e(n.prev,n,n.next)<0?_e(n,t,n.next)>=0&&_e(n,n.prev,t)>=0:_e(n,t,n.prev)<0||_e(n,n.next,t)<0}function f3(n,t){let e=n,i=!1;const r=(n.x+t.x)/2,s=(n.y+t.y)/2;do e.y>s!=e.next.y>s&&e.next.y!==e.y&&r<(e.next.x-e.x)*(s-e.y)/(e.next.y-e.y)+e.x&&(i=!i),e=e.next;while(e!==n);return i}function _g(n,t){const e=new Nu(n.i,n.x,n.y),i=new Nu(t.i,t.x,t.y),r=n.next,s=t.prev;return n.next=t,t.prev=n,e.next=r,r.prev=e,i.next=e,e.prev=i,s.next=i,i.prev=s,i}function bg(n,t,e,i){const r=new Nu(n,t,e);return i?(r.next=i.next,r.prev=i,i.next.prev=r,i.next=r):(r.prev=r,r.next=r),r}function da(n){n.next.prev=n.prev,n.prev.next=n.next,n.prevZ&&(n.prevZ.nextZ=n.nextZ),n.nextZ&&(n.nextZ.prevZ=n.prevZ)}function Nu(n,t,e){this.i=n,this.x=t,this.y=e,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}function p3(n,t,e,i){let r=0;for(let s=t,o=e-i;s<e;s+=i)r+=(n[o]-n[s])*(n[s+1]+n[o+1]),o=s;return r}const er={area:function(n){const t=n.length;let e=0;for(let i=t-1,r=0;r<t;i=r++)e+=n[i].x*n[r].y-n[r].x*n[i].y;return e*.5},isClockWise:function(n){return er.area(n)<0},triangulateShape:function(n,t){const e=[],i=[],r=[];Mg(n),wg(e,n);let s=n.length;t.forEach(Mg);for(let a=0;a<t.length;a++)i.push(s),s+=t[a].length,wg(e,t[a]);const o=QL.triangulate(e,i);for(let a=0;a<o.length;a+=3)r.push(o.slice(a,a+3));return r}};function Mg(n){const t=n.length;t>2&&n[t-1].equals(n[0])&&n.pop()}function wg(n,t){for(let e=0;e<t.length;e++)n.push(t[e].x),n.push(t[e].y)}class Sg extends le{constructor(t,e){super();this.type="ExtrudeBufferGeometry",this.parameters={shapes:t,options:e},t=Array.isArray(t)?t:[t];const i=this,r=[],s=[];for(let a=0,l=t.length;a<l;a++){const c=t[a];o(c)}this.setAttribute("position",new ee(r,3)),this.setAttribute("uv",new ee(s,2)),this.computeVertexNormals();function o(a){const l=[],c=e.curveSegments!==void 0?e.curveSegments:12,h=e.steps!==void 0?e.steps:1;let u=e.depth!==void 0?e.depth:100,d=e.bevelEnabled!==void 0?e.bevelEnabled:!0,f=e.bevelThickness!==void 0?e.bevelThickness:6,g=e.bevelSize!==void 0?e.bevelSize:f-2,v=e.bevelOffset!==void 0?e.bevelOffset:0,x=e.bevelSegments!==void 0?e.bevelSegments:3;const m=e.extrudePath,p=e.UVGenerator!==void 0?e.UVGenerator:m3;e.amount!==void 0&&(console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth."),u=e.amount);let b,_=!1,w,E,S,R;m&&(b=m.getSpacedPoints(h),_=!0,d=!1,w=m.computeFrenetFrames(h,!1),E=new H,S=new H,R=new H),d||(x=0,f=0,g=0,v=0);const W=a.extractPoints(c);let B=W.shape;const T=W.holes;if(!er.isClockWise(B)){B=B.reverse();for(let V=0,X=T.length;V<X;V++){const Q=T[V];er.isClockWise(Q)&&(T[V]=Q.reverse())}}const I=er.triangulateShape(B,T),N=B;for(let V=0,X=T.length;V<X;V++){const Q=T[V];B=B.concat(Q)}function C(V,X,Q){return X||console.error("THREE.ExtrudeGeometry: vec does not exist"),X.clone().multiplyScalar(Q).add(V)}const L=B.length,F=I.length;function q(V,X,Q){let mt,et,M;const y=V.x-X.x,G=V.y-X.y,$=Q.x-V.x,P=Q.y-V.y,K=y*y+G*G,ht=y*P-G*$;if(Math.abs(ht)>Number.EPSILON){const gt=Math.sqrt(K),ct=Math.sqrt($*$+P*P),ut=X.x-G/gt,U=X.y+y/gt,dt=Q.x-P/ct,Z=Q.y+$/ct,xt=((dt-ut)*P-(Z-U)*$)/(y*P-G*$);mt=ut+y*xt-V.x,et=U+G*xt-V.y;const z=mt*mt+et*et;if(z<=2)return new wt(mt,et);M=Math.sqrt(z/2)}else{let gt=!1;y>Number.EPSILON?$>Number.EPSILON&&(gt=!0):y<-Number.EPSILON?$<-Number.EPSILON&&(gt=!0):Math.sign(G)===Math.sign(P)&&(gt=!0),gt?(mt=-G,et=y,M=Math.sqrt(K)):(mt=y,et=G,M=Math.sqrt(K/2))}return new wt(mt/M,et/M)}const ot=[];for(let V=0,X=N.length,Q=X-1,mt=V+1;V<X;V++,Q++,mt++)Q===X&&(Q=0),mt===X&&(mt=0),ot[V]=q(N[V],N[Q],N[mt]);const pt=[];let rt,Et=ot.concat();for(let V=0,X=T.length;V<X;V++){const Q=T[V];rt=[];for(let mt=0,et=Q.length,M=et-1,y=mt+1;mt<et;mt++,M++,y++)M===et&&(M=0),y===et&&(y=0),rt[mt]=q(Q[mt],Q[M],Q[y]);pt.push(rt),Et=Et.concat(rt)}for(let V=0;V<x;V++){const X=V/x,Q=f*Math.cos(X*Math.PI/2),mt=g*Math.sin(X*Math.PI/2)+v;for(let et=0,M=N.length;et<M;et++){const y=C(N[et],ot[et],mt);_t(y.x,y.y,-Q)}for(let et=0,M=T.length;et<M;et++){const y=T[et];rt=pt[et];for(let G=0,$=y.length;G<$;G++){const P=C(y[G],rt[G],mt);_t(P.x,P.y,-Q)}}}const it=g+v;for(let V=0;V<L;V++){const X=d?C(B[V],Et[V],it):B[V];_?(S.copy(w.normals[0]).multiplyScalar(X.x),E.copy(w.binormals[0]).multiplyScalar(X.y),R.copy(b[0]).add(S).add(E),_t(R.x,R.y,R.z)):_t(X.x,X.y,0)}for(let V=1;V<=h;V++)for(let X=0;X<L;X++){const Q=d?C(B[X],Et[X],it):B[X];_?(S.copy(w.normals[V]).multiplyScalar(Q.x),E.copy(w.binormals[V]).multiplyScalar(Q.y),R.copy(b[V]).add(S).add(E),_t(R.x,R.y,R.z)):_t(Q.x,Q.y,u/h*V)}for(let V=x-1;V>=0;V--){const X=V/x,Q=f*Math.cos(X*Math.PI/2),mt=g*Math.sin(X*Math.PI/2)+v;for(let et=0,M=N.length;et<M;et++){const y=C(N[et],ot[et],mt);_t(y.x,y.y,u+Q)}for(let et=0,M=T.length;et<M;et++){const y=T[et];rt=pt[et];for(let G=0,$=y.length;G<$;G++){const P=C(y[G],rt[G],mt);_?_t(P.x,P.y+b[h-1].y,b[h-1].x+Q):_t(P.x,P.y,u+Q)}}}vt(),Y();function vt(){const V=r.length/3;if(d){let X=0,Q=L*X;for(let mt=0;mt<F;mt++){const et=I[mt];Lt(et[2]+Q,et[1]+Q,et[0]+Q)}X=h+x*2,Q=L*X;for(let mt=0;mt<F;mt++){const et=I[mt];Lt(et[0]+Q,et[1]+Q,et[2]+Q)}}else{for(let X=0;X<F;X++){const Q=I[X];Lt(Q[2],Q[1],Q[0])}for(let X=0;X<F;X++){const Q=I[X];Lt(Q[0]+L*h,Q[1]+L*h,Q[2]+L*h)}}i.addGroup(V,r.length/3-V,0)}function Y(){const V=r.length/3;let X=0;st(N,X),X+=N.length;for(let Q=0,mt=T.length;Q<mt;Q++){const et=T[Q];st(et,X),X+=et.length}i.addGroup(V,r.length/3-V,1)}function st(V,X){let Q=V.length;for(;--Q>=0;){const mt=Q;let et=Q-1;et<0&&(et=V.length-1);for(let M=0,y=h+x*2;M<y;M++){const G=L*M,$=L*(M+1),P=X+mt+G,K=X+et+G,ht=X+et+$,gt=X+mt+$;yt(P,K,ht,gt)}}}function _t(V,X,Q){l.push(V),l.push(X),l.push(Q)}function Lt(V,X,Q){St(V),St(X),St(Q);const mt=r.length/3,et=p.generateTopUV(i,r,mt-3,mt-2,mt-1);At(et[0]),At(et[1]),At(et[2])}function yt(V,X,Q,mt){St(V),St(X),St(mt),St(X),St(Q),St(mt);const et=r.length/3,M=p.generateSideWallUV(i,r,et-6,et-3,et-2,et-1);At(M[0]),At(M[1]),At(M[3]),At(M[1]),At(M[2]),At(M[3])}function St(V){r.push(l[V*3+0]),r.push(l[V*3+1]),r.push(l[V*3+2])}function At(V){s.push(V.x),s.push(V.y)}}}toJSON(){const t=le.prototype.toJSON.call(this),e=this.parameters.shapes,i=this.parameters.options;return g3(e,i,t)}}const m3={generateTopUV:function(n,t,e,i,r){const s=t[e*3],o=t[e*3+1],a=t[i*3],l=t[i*3+1],c=t[r*3],h=t[r*3+1];return[new wt(s,o),new wt(a,l),new wt(c,h)]},generateSideWallUV:function(n,t,e,i,r,s){const o=t[e*3],a=t[e*3+1],l=t[e*3+2],c=t[i*3],h=t[i*3+1],u=t[i*3+2],d=t[r*3],f=t[r*3+1],g=t[r*3+2],v=t[s*3],x=t[s*3+1],m=t[s*3+2];return Math.abs(a-h)<.01?[new wt(o,1-l),new wt(c,1-u),new wt(d,1-g),new wt(v,1-m)]:[new wt(a,1-l),new wt(h,1-u),new wt(f,1-g),new wt(x,1-m)]}};function g3(n,t,e){if(e.shapes=[],Array.isArray(n))for(let i=0,r=n.length;i<r;i++){const s=n[i];e.shapes.push(s.uuid)}else e.shapes.push(n.uuid);return t.extrudePath!==void 0&&(e.options.extrudePath=t.extrudePath.toJSON()),e}class v3 extends Fn{constructor(t,e){super();this.type="ExtrudeGeometry",this.parameters={shapes:t,options:e},this.fromBufferGeometry(new Sg(t,e)),this.mergeVertices()}toJSON(){const t=super.toJSON(),e=this.parameters.shapes,i=this.parameters.options;return x3(e,i,t)}}function x3(n,t,e){if(e.shapes=[],Array.isArray(n))for(let i=0,r=n.length;i<r;i++){const s=n[i];e.shapes.push(s.uuid)}else e.shapes.push(n.uuid);return t.extrudePath!==void 0&&(e.options.extrudePath=t.extrudePath.toJSON()),e}function oc(n,t,e){le.call(this),this.type="ParametricBufferGeometry",this.parameters={func:n,slices:t,stacks:e};const i=[],r=[],s=[],o=[],a=1e-5,l=new H,c=new H,h=new H,u=new H,d=new H;n.length<3&&console.error("THREE.ParametricGeometry: Function must now modify a Vector3 as third parameter.");const f=t+1;for(let g=0;g<=e;g++){const v=g/e;for(let x=0;x<=t;x++){const m=x/t;n(m,v,c),r.push(c.x,c.y,c.z),m-a>=0?(n(m-a,v,h),u.subVectors(c,h)):(n(m+a,v,h),u.subVectors(h,c)),v-a>=0?(n(m,v-a,h),d.subVectors(c,h)):(n(m,v+a,h),d.subVectors(h,c)),l.crossVectors(u,d).normalize(),s.push(l.x,l.y,l.z),o.push(m,v)}}for(let g=0;g<e;g++)for(let v=0;v<t;v++){const x=g*f+v,m=g*f+v+1,p=(g+1)*f+v+1,b=(g+1)*f+v;i.push(x,m,b),i.push(m,p,b)}this.setIndex(i),this.setAttribute("position",new ee(r,3)),this.setAttribute("normal",new ee(s,3)),this.setAttribute("uv",new ee(o,2))}oc.prototype=Object.create(le.prototype);oc.prototype.constructor=oc;function Fu(n,t,e){Fn.call(this),this.type="ParametricGeometry",this.parameters={func:n,slices:t,stacks:e},this.fromBufferGeometry(new oc(n,t,e)),this.mergeVertices()}Fu.prototype=Object.create(Fn.prototype);Fu.prototype.constructor=Fu;class y3 extends le{constructor(t,e){super();this.type="ShapeBufferGeometry",this.parameters={shapes:t,curveSegments:e},e=e||12;const i=[],r=[],s=[],o=[];let a=0,l=0;if(Array.isArray(t)===!1)c(t);else for(let h=0;h<t.length;h++)c(t[h]),this.addGroup(a,l,h),a+=l,l=0;this.setIndex(i),this.setAttribute("position",new ee(r,3)),this.setAttribute("normal",new ee(s,3)),this.setAttribute("uv",new ee(o,2));function c(h){const u=r.length/3,d=h.extractPoints(e);let f=d.shape;const g=d.holes;er.isClockWise(f)===!1&&(f=f.reverse());for(let x=0,m=g.length;x<m;x++){const p=g[x];er.isClockWise(p)===!0&&(g[x]=p.reverse())}const v=er.triangulateShape(f,g);for(let x=0,m=g.length;x<m;x++){const p=g[x];f=f.concat(p)}for(let x=0,m=f.length;x<m;x++){const p=f[x];r.push(p.x,p.y,0),s.push(0,0,1),o.push(p.x,p.y)}for(let x=0,m=v.length;x<m;x++){const p=v[x],b=p[0]+u,_=p[1]+u,w=p[2]+u;i.push(b,_,w),l+=3}}}toJSON(){const t=le.prototype.toJSON.call(this),e=this.parameters.shapes;return _3(e,t)}}function _3(n,t){if(t.shapes=[],Array.isArray(n))for(let e=0,i=n.length;e<i;e++){const r=n[e];t.shapes.push(r.uuid)}else t.shapes.push(n.uuid);return t}class b3 extends Fn{constructor(t,e){super();this.type="ShapeGeometry",typeof e=="object"&&(console.warn("THREE.ShapeGeometry: Options parameter has been removed."),e=e.curveSegments),this.parameters={shapes:t,curveSegments:e},this.fromBufferGeometry(new y3(t,e)),this.mergeVertices()}toJSON(){const t=Fn.prototype.toJSON.call(this),e=this.parameters.shapes;return M3(e,t)}}function M3(n,t){if(t.shapes=[],Array.isArray(n))for(let e=0,i=n.length;e<i;e++){const r=n[e];t.shapes.push(r.uuid)}else t.shapes.push(n.uuid);return t}function Xs(n){Gt.call(this),this.type="ShadowMaterial",this.color=new Ot(0),this.transparent=!0,this.setValues(n)}Xs.prototype=Object.create(Gt.prototype);Xs.prototype.constructor=Xs;Xs.prototype.isShadowMaterial=!0;Xs.prototype.copy=function(n){return Gt.prototype.copy.call(this,n),this.color.copy(n.color),this};function fa(n){rn.call(this,n),this.type="RawShaderMaterial"}fa.prototype=Object.create(rn.prototype);fa.prototype.constructor=fa;fa.prototype.isRawShaderMaterial=!0;function gi(n){Gt.call(this),this.defines={STANDARD:""},this.type="MeshStandardMaterial",this.color=new Ot(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Ot(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=bs,this.normalScale=new wt(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapIntensity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.vertexTangents=!1,this.setValues(n)}gi.prototype=Object.create(Gt.prototype);gi.prototype.constructor=gi;gi.prototype.isMeshStandardMaterial=!0;gi.prototype.copy=function(n){return Gt.prototype.copy.call(this,n),this.defines={STANDARD:""},this.color.copy(n.color),this.roughness=n.roughness,this.metalness=n.metalness,this.map=n.map,this.lightMap=n.lightMap,this.lightMapIntensity=n.lightMapIntensity,this.aoMap=n.aoMap,this.aoMapIntensity=n.aoMapIntensity,this.emissive.copy(n.emissive),this.emissiveMap=n.emissiveMap,this.emissiveIntensity=n.emissiveIntensity,this.bumpMap=n.bumpMap,this.bumpScale=n.bumpScale,this.normalMap=n.normalMap,this.normalMapType=n.normalMapType,this.normalScale.copy(n.normalScale),this.displacementMap=n.displacementMap,this.displacementScale=n.displacementScale,this.displacementBias=n.displacementBias,this.roughnessMap=n.roughnessMap,this.metalnessMap=n.metalnessMap,this.alphaMap=n.alphaMap,this.envMap=n.envMap,this.envMapIntensity=n.envMapIntensity,this.refractionRatio=n.refractionRatio,this.wireframe=n.wireframe,this.wireframeLinewidth=n.wireframeLinewidth,this.wireframeLinecap=n.wireframeLinecap,this.wireframeLinejoin=n.wireframeLinejoin,this.skinning=n.skinning,this.morphTargets=n.morphTargets,this.morphNormals=n.morphNormals,this.vertexTangents=n.vertexTangents,this};function Ar(n){gi.call(this),this.defines={STANDARD:"",PHYSICAL:""},this.type="MeshPhysicalMaterial",this.clearcoat=0,this.clearcoatMap=null,this.clearcoatRoughness=0,this.clearcoatRoughnessMap=null,this.clearcoatNormalScale=new wt(1,1),this.clearcoatNormalMap=null,this.reflectivity=.5,Object.defineProperty(this,"ior",{get:function(){return(1+.4*this.reflectivity)/(1-.4*this.reflectivity)},set:function(t){this.reflectivity=Vt.clamp(2.5*(t-1)/(t+1),0,1)}}),this.sheen=null,this.transmission=0,this.transmissionMap=null,this.setValues(n)}Ar.prototype=Object.create(gi.prototype);Ar.prototype.constructor=Ar;Ar.prototype.isMeshPhysicalMaterial=!0;Ar.prototype.copy=function(n){return gi.prototype.copy.call(this,n),this.defines={STANDARD:"",PHYSICAL:""},this.clearcoat=n.clearcoat,this.clearcoatMap=n.clearcoatMap,this.clearcoatRoughness=n.clearcoatRoughness,this.clearcoatRoughnessMap=n.clearcoatRoughnessMap,this.clearcoatNormalMap=n.clearcoatNormalMap,this.clearcoatNormalScale.copy(n.clearcoatNormalScale),this.reflectivity=n.reflectivity,n.sheen?this.sheen=(this.sheen||new Ot).copy(n.sheen):this.sheen=null,this.transmission=n.transmission,this.transmissionMap=n.transmissionMap,this};function Lr(n){Gt.call(this),this.type="MeshPhongMaterial",this.color=new Ot(16777215),this.specular=new Ot(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Ot(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=bs,this.normalScale=new wt(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=gl,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(n)}Lr.prototype=Object.create(Gt.prototype);Lr.prototype.constructor=Lr;Lr.prototype.isMeshPhongMaterial=!0;Lr.prototype.copy=function(n){return Gt.prototype.copy.call(this,n),this.color.copy(n.color),this.specular.copy(n.specular),this.shininess=n.shininess,this.map=n.map,this.lightMap=n.lightMap,this.lightMapIntensity=n.lightMapIntensity,this.aoMap=n.aoMap,this.aoMapIntensity=n.aoMapIntensity,this.emissive.copy(n.emissive),this.emissiveMap=n.emissiveMap,this.emissiveIntensity=n.emissiveIntensity,this.bumpMap=n.bumpMap,this.bumpScale=n.bumpScale,this.normalMap=n.normalMap,this.normalMapType=n.normalMapType,this.normalScale.copy(n.normalScale),this.displacementMap=n.displacementMap,this.displacementScale=n.displacementScale,this.displacementBias=n.displacementBias,this.specularMap=n.specularMap,this.alphaMap=n.alphaMap,this.envMap=n.envMap,this.combine=n.combine,this.reflectivity=n.reflectivity,this.refractionRatio=n.refractionRatio,this.wireframe=n.wireframe,this.wireframeLinewidth=n.wireframeLinewidth,this.wireframeLinecap=n.wireframeLinecap,this.wireframeLinejoin=n.wireframeLinejoin,this.skinning=n.skinning,this.morphTargets=n.morphTargets,this.morphNormals=n.morphNormals,this};function Ys(n){Gt.call(this),this.defines={TOON:""},this.type="MeshToonMaterial",this.color=new Ot(16777215),this.map=null,this.gradientMap=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Ot(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=bs,this.normalScale=new wt(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(n)}Ys.prototype=Object.create(Gt.prototype);Ys.prototype.constructor=Ys;Ys.prototype.isMeshToonMaterial=!0;Ys.prototype.copy=function(n){return Gt.prototype.copy.call(this,n),this.color.copy(n.color),this.map=n.map,this.gradientMap=n.gradientMap,this.lightMap=n.lightMap,this.lightMapIntensity=n.lightMapIntensity,this.aoMap=n.aoMap,this.aoMapIntensity=n.aoMapIntensity,this.emissive.copy(n.emissive),this.emissiveMap=n.emissiveMap,this.emissiveIntensity=n.emissiveIntensity,this.bumpMap=n.bumpMap,this.bumpScale=n.bumpScale,this.normalMap=n.normalMap,this.normalMapType=n.normalMapType,this.normalScale.copy(n.normalScale),this.displacementMap=n.displacementMap,this.displacementScale=n.displacementScale,this.displacementBias=n.displacementBias,this.alphaMap=n.alphaMap,this.wireframe=n.wireframe,this.wireframeLinewidth=n.wireframeLinewidth,this.wireframeLinecap=n.wireframeLinecap,this.wireframeLinejoin=n.wireframeLinejoin,this.skinning=n.skinning,this.morphTargets=n.morphTargets,this.morphNormals=n.morphNormals,this};function Zs(n){Gt.call(this),this.type="MeshNormalMaterial",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=bs,this.normalScale=new wt(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(n)}Zs.prototype=Object.create(Gt.prototype);Zs.prototype.constructor=Zs;Zs.prototype.isMeshNormalMaterial=!0;Zs.prototype.copy=function(n){return Gt.prototype.copy.call(this,n),this.bumpMap=n.bumpMap,this.bumpScale=n.bumpScale,this.normalMap=n.normalMap,this.normalMapType=n.normalMapType,this.normalScale.copy(n.normalScale),this.displacementMap=n.displacementMap,this.displacementScale=n.displacementScale,this.displacementBias=n.displacementBias,this.wireframe=n.wireframe,this.wireframeLinewidth=n.wireframeLinewidth,this.skinning=n.skinning,this.morphTargets=n.morphTargets,this.morphNormals=n.morphNormals,this};function Js(n){Gt.call(this),this.type="MeshLambertMaterial",this.color=new Ot(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new Ot(0),this.emissiveIntensity=1,this.emissiveMap=null,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=gl,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(n)}Js.prototype=Object.create(Gt.prototype);Js.prototype.constructor=Js;Js.prototype.isMeshLambertMaterial=!0;Js.prototype.copy=function(n){return Gt.prototype.copy.call(this,n),this.color.copy(n.color),this.map=n.map,this.lightMap=n.lightMap,this.lightMapIntensity=n.lightMapIntensity,this.aoMap=n.aoMap,this.aoMapIntensity=n.aoMapIntensity,this.emissive.copy(n.emissive),this.emissiveMap=n.emissiveMap,this.emissiveIntensity=n.emissiveIntensity,this.specularMap=n.specularMap,this.alphaMap=n.alphaMap,this.envMap=n.envMap,this.combine=n.combine,this.reflectivity=n.reflectivity,this.refractionRatio=n.refractionRatio,this.wireframe=n.wireframe,this.wireframeLinewidth=n.wireframeLinewidth,this.wireframeLinecap=n.wireframeLinecap,this.wireframeLinejoin=n.wireframeLinejoin,this.skinning=n.skinning,this.morphTargets=n.morphTargets,this.morphNormals=n.morphNormals,this};function Qs(n){Gt.call(this),this.defines={MATCAP:""},this.type="MeshMatcapMaterial",this.color=new Ot(16777215),this.matcap=null,this.map=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=bs,this.normalScale=new wt(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.skinning=!1,this.morphTargets=!1,this.morphNormals=!1,this.setValues(n)}Qs.prototype=Object.create(Gt.prototype);Qs.prototype.constructor=Qs;Qs.prototype.isMeshMatcapMaterial=!0;Qs.prototype.copy=function(n){return Gt.prototype.copy.call(this,n),this.defines={MATCAP:""},this.color.copy(n.color),this.matcap=n.matcap,this.map=n.map,this.bumpMap=n.bumpMap,this.bumpScale=n.bumpScale,this.normalMap=n.normalMap,this.normalMapType=n.normalMapType,this.normalScale.copy(n.normalScale),this.displacementMap=n.displacementMap,this.displacementScale=n.displacementScale,this.displacementBias=n.displacementBias,this.alphaMap=n.alphaMap,this.skinning=n.skinning,this.morphTargets=n.morphTargets,this.morphNormals=n.morphNormals,this};function Ks(n){bn.call(this),this.type="LineDashedMaterial",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(n)}Ks.prototype=Object.create(bn.prototype);Ks.prototype.constructor=Ks;Ks.prototype.isLineDashedMaterial=!0;Ks.prototype.copy=function(n){return bn.prototype.copy.call(this,n),this.scale=n.scale,this.dashSize=n.dashSize,this.gapSize=n.gapSize,this};var w3=Object.freeze({__proto__:null,ShadowMaterial:Xs,SpriteMaterial:Er,RawShaderMaterial:fa,ShaderMaterial:rn,PointsMaterial:Tr,MeshPhysicalMaterial:Ar,MeshStandardMaterial:gi,MeshPhongMaterial:Lr,MeshToonMaterial:Ys,MeshNormalMaterial:Zs,MeshLambertMaterial:Js,MeshDepthMaterial:br,MeshDistanceMaterial:Mr,MeshBasicMaterial:xr,MeshMatcapMaterial:Qs,LineDashedMaterial:Ks,LineBasicMaterial:bn,Material:Gt});const ve={arraySlice:function(n,t,e){return ve.isTypedArray(n)?new n.constructor(n.subarray(t,e!==void 0?e:n.length)):n.slice(t,e)},convertArray:function(n,t,e){return!n||!e&&n.constructor===t?n:typeof t.BYTES_PER_ELEMENT=="number"?new t(n):Array.prototype.slice.call(n)},isTypedArray:function(n){return ArrayBuffer.isView(n)&&!(n instanceof DataView)},getKeyframeOrder:function(n){function t(r,s){return n[r]-n[s]}const e=n.length,i=new Array(e);for(let r=0;r!==e;++r)i[r]=r;return i.sort(t),i},sortedArray:function(n,t,e){const i=n.length,r=new n.constructor(i);for(let s=0,o=0;o!==i;++s){const a=e[s]*t;for(let l=0;l!==t;++l)r[o++]=n[a+l]}return r},flattenJSON:function(n,t,e,i){let r=1,s=n[0];for(;s!==void 0&&s[i]===void 0;)s=n[r++];if(s===void 0)return;let o=s[i];if(o!==void 0)if(Array.isArray(o))do o=s[i],o!==void 0&&(t.push(s.time),e.push.apply(e,o)),s=n[r++];while(s!==void 0);else if(o.toArray!==void 0)do o=s[i],o!==void 0&&(t.push(s.time),o.toArray(e,e.length)),s=n[r++];while(s!==void 0);else do o=s[i],o!==void 0&&(t.push(s.time),e.push(o)),s=n[r++];while(s!==void 0)},subclip:function(n,t,e,i,r){r=r||30;const s=n.clone();s.name=t;const o=[];for(let l=0;l<s.tracks.length;++l){const c=s.tracks[l],h=c.getValueSize(),u=[],d=[];for(let f=0;f<c.times.length;++f){const g=c.times[f]*r;if(!(g<e||g>=i)){u.push(c.times[f]);for(let v=0;v<h;++v)d.push(c.values[f*h+v])}}u.length!==0&&(c.times=ve.convertArray(u,c.times.constructor),c.values=ve.convertArray(d,c.values.constructor),o.push(c))}s.tracks=o;let a=1/0;for(let l=0;l<s.tracks.length;++l)a>s.tracks[l].times[0]&&(a=s.tracks[l].times[0]);for(let l=0;l<s.tracks.length;++l)s.tracks[l].shift(-1*a);return s.resetDuration(),s},makeClipAdditive:function(n,t,e,i){t===void 0&&(t=0),e===void 0&&(e=n),(i===void 0||i<=0)&&(i=30);const r=e.tracks.length,s=t/i;for(let o=0;o<r;++o){const a=e.tracks[o],l=a.ValueTypeName;if(l==="bool"||l==="string")continue;const c=n.tracks.find(function(m){return m.name===a.name&&m.ValueTypeName===l});if(c===void 0)continue;let h=0;const u=a.getValueSize();a.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(h=u/3);let d=0;const f=c.getValueSize();c.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(d=f/3);const g=a.times.length-1;let v;if(s<=a.times[0]){const m=h,p=u-h;v=ve.arraySlice(a.values,m,p)}else if(s>=a.times[g]){const m=g*u+h,p=m+u-h;v=ve.arraySlice(a.values,m,p)}else{const m=a.createInterpolant(),p=h,b=u-h;m.evaluate(s),v=ve.arraySlice(m.resultBuffer,p,b)}l==="quaternion"&&new hn().fromArray(v).normalize().conjugate().toArray(v);const x=c.times.length;for(let m=0;m<x;++m){const p=m*f+d;if(l==="quaternion")hn.multiplyQuaternionsFlat(c.values,p,v,0,c.values,p);else{const b=f-d*2;for(let _=0;_<b;++_)c.values[p+_]-=v[_]}}}return n.blendMode=um,n}};function Mn(n,t,e,i){this.parameterPositions=n,this._cachedIndex=0,this.resultBuffer=i!==void 0?i:new t.constructor(e),this.sampleValues=t,this.valueSize=e}Object.assign(Mn.prototype,{evaluate:function(n){const t=this.parameterPositions;let e=this._cachedIndex,i=t[e],r=t[e-1];t:{e:{let s;n:{i:if(!(n<i)){for(let o=e+2;;){if(i===void 0){if(n<r)break i;return e=t.length,this._cachedIndex=e,this.afterEnd_(e-1,n,r)}if(e===o)break;if(r=i,i=t[++e],n<i)break e}s=t.length;break n}if(!(n>=r)){const o=t[1];n<o&&(e=2,r=o);for(let a=e-2;;){if(r===void 0)return this._cachedIndex=0,this.beforeStart_(0,n,i);if(e===a)break;if(i=r,r=t[--e-1],n>=r)break e}s=e,e=0;break n}break t}for(;e<s;){const o=e+s>>>1;n<t[o]?s=o:e=o+1}if(i=t[e],r=t[e-1],r===void 0)return this._cachedIndex=0,this.beforeStart_(0,n,i);if(i===void 0)return e=t.length,this._cachedIndex=e,this.afterEnd_(e-1,r,n)}this._cachedIndex=e,this.intervalChanged_(e,r,i)}return this.interpolate_(e,r,n,i)},settings:null,DefaultSettings_:{},getSettings_:function(){return this.settings||this.DefaultSettings_},copySampleValue_:function(n){const t=this.resultBuffer,e=this.sampleValues,i=this.valueSize,r=n*i;for(let s=0;s!==i;++s)t[s]=e[r+s];return t},interpolate_:function(){throw new Error("call to abstract method")},intervalChanged_:function(){}});Object.assign(Mn.prototype,{beforeStart_:Mn.prototype.copySampleValue_,afterEnd_:Mn.prototype.copySampleValue_});function Bu(n,t,e,i){Mn.call(this,n,t,e,i),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0}Bu.prototype=Object.assign(Object.create(Mn.prototype),{constructor:Bu,DefaultSettings_:{endingStart:ys,endingEnd:ys},intervalChanged_:function(n,t,e){const i=this.parameterPositions;let r=n-2,s=n+1,o=i[r],a=i[s];if(o===void 0)switch(this.getSettings_().endingStart){case _s:r=n,o=2*t-e;break;case wl:r=i.length-2,o=t+i[r]-i[r+1];break;default:r=n,o=e}if(a===void 0)switch(this.getSettings_().endingEnd){case _s:s=n,a=2*e-t;break;case wl:s=1,a=e+i[1]-i[0];break;default:s=n-1,a=t}const l=(e-t)*.5,c=this.valueSize;this._weightPrev=l/(t-o),this._weightNext=l/(a-e),this._offsetPrev=r*c,this._offsetNext=s*c},interpolate_:function(n,t,e,i){const r=this.resultBuffer,s=this.sampleValues,o=this.valueSize,a=n*o,l=a-o,c=this._offsetPrev,h=this._offsetNext,u=this._weightPrev,d=this._weightNext,f=(e-t)/(i-t),g=f*f,v=g*f,x=-u*v+2*u*g-u*f,m=(1+u)*v+(-1.5-2*u)*g+(-.5+u)*f+1,p=(-1-d)*v+(1.5+d)*g+.5*f,b=d*v-d*g;for(let _=0;_!==o;++_)r[_]=x*s[c+_]+m*s[l+_]+p*s[a+_]+b*s[h+_];return r}});function ac(n,t,e,i){Mn.call(this,n,t,e,i)}ac.prototype=Object.assign(Object.create(Mn.prototype),{constructor:ac,interpolate_:function(n,t,e,i){const r=this.resultBuffer,s=this.sampleValues,o=this.valueSize,a=n*o,l=a-o,c=(e-t)/(i-t),h=1-c;for(let u=0;u!==o;++u)r[u]=s[l+u]*h+s[a+u]*c;return r}});function Ou(n,t,e,i){Mn.call(this,n,t,e,i)}Ou.prototype=Object.assign(Object.create(Mn.prototype),{constructor:Ou,interpolate_:function(n){return this.copySampleValue_(n-1)}});function je(n,t,e,i){if(n===void 0)throw new Error("THREE.KeyframeTrack: track name is undefined");if(t===void 0||t.length===0)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+n);this.name=n,this.times=ve.convertArray(t,this.TimeBufferType),this.values=ve.convertArray(e,this.ValueBufferType),this.setInterpolation(i||this.DefaultInterpolation)}Object.assign(je,{toJSON:function(n){const t=n.constructor;let e;if(t.toJSON!==void 0)e=t.toJSON(n);else{e={name:n.name,times:ve.convertArray(n.times,Array),values:ve.convertArray(n.values,Array)};const i=n.getInterpolation();i!==n.DefaultInterpolation&&(e.interpolation=i)}return e.type=n.ValueTypeName,e}});Object.assign(je.prototype,{constructor:je,TimeBufferType:Float32Array,ValueBufferType:Float32Array,DefaultInterpolation:Ml,InterpolantFactoryMethodDiscrete:function(n){return new Ou(this.times,this.values,this.getValueSize(),n)},InterpolantFactoryMethodLinear:function(n){return new ac(this.times,this.values,this.getValueSize(),n)},InterpolantFactoryMethodSmooth:function(n){return new Bu(this.times,this.values,this.getValueSize(),n)},setInterpolation:function(n){let t;switch(n){case bl:t=this.InterpolantFactoryMethodDiscrete;break;case Ml:t=this.InterpolantFactoryMethodLinear;break;case Xh:t=this.InterpolantFactoryMethodSmooth;break}if(t===void 0){const e="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(this.createInterpolant===void 0)if(n!==this.DefaultInterpolation)this.setInterpolation(this.DefaultInterpolation);else throw new Error(e);return console.warn("THREE.KeyframeTrack:",e),this}return this.createInterpolant=t,this},getInterpolation:function(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return bl;case this.InterpolantFactoryMethodLinear:return Ml;case this.InterpolantFactoryMethodSmooth:return Xh}},getValueSize:function(){return this.values.length/this.times.length},shift:function(n){if(n!==0){const t=this.times;for(let e=0,i=t.length;e!==i;++e)t[e]+=n}return this},scale:function(n){if(n!==1){const t=this.times;for(let e=0,i=t.length;e!==i;++e)t[e]*=n}return this},trim:function(n,t){const e=this.times,i=e.length;let r=0,s=i-1;for(;r!==i&&e[r]<n;)++r;for(;s!==-1&&e[s]>t;)--s;if(++s,r!==0||s!==i){r>=s&&(s=Math.max(s,1),r=s-1);const o=this.getValueSize();this.times=ve.arraySlice(e,r,s),this.values=ve.arraySlice(this.values,r*o,s*o)}return this},validate:function(){let n=!0;const t=this.getValueSize();t-Math.floor(t)!=0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),n=!1);const e=this.times,i=this.values,r=e.length;r===0&&(console.error("THREE.KeyframeTrack: Track is empty.",this),n=!1);let s=null;for(let o=0;o!==r;o++){const a=e[o];if(typeof a=="number"&&isNaN(a)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,o,a),n=!1;break}if(s!==null&&s>a){console.error("THREE.KeyframeTrack: Out of order keys.",this,o,a,s),n=!1;break}s=a}if(i!==void 0&&ve.isTypedArray(i))for(let o=0,a=i.length;o!==a;++o){const l=i[o];if(isNaN(l)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,o,l),n=!1;break}}return n},optimize:function(){const n=ve.arraySlice(this.times),t=ve.arraySlice(this.values),e=this.getValueSize(),i=this.getInterpolation()===Xh,r=n.length-1;let s=1;for(let o=1;o<r;++o){let a=!1;const l=n[o],c=n[o+1];if(l!==c&&(o!==1||l!==l[0]))if(i)a=!0;else{const h=o*e,u=h-e,d=h+e;for(let f=0;f!==e;++f){const g=t[h+f];if(g!==t[u+f]||g!==t[d+f]){a=!0;break}}}if(a){if(o!==s){n[s]=n[o];const h=o*e,u=s*e;for(let d=0;d!==e;++d)t[u+d]=t[h+d]}++s}}if(r>0){n[s]=n[r];for(let o=r*e,a=s*e,l=0;l!==e;++l)t[a+l]=t[o+l];++s}return s!==n.length?(this.times=ve.arraySlice(n,0,s),this.values=ve.arraySlice(t,0,s*e)):(this.times=n,this.values=t),this},clone:function(){const n=ve.arraySlice(this.times,0),t=ve.arraySlice(this.values,0),e=this.constructor,i=new e(this.name,n,t);return i.createInterpolant=this.createInterpolant,i}});function zu(n,t,e){je.call(this,n,t,e)}zu.prototype=Object.assign(Object.create(je.prototype),{constructor:zu,ValueTypeName:"bool",ValueBufferType:Array,DefaultInterpolation:bl,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0});function Uu(n,t,e,i){je.call(this,n,t,e,i)}Uu.prototype=Object.assign(Object.create(je.prototype),{constructor:Uu,ValueTypeName:"color"});function pa(n,t,e,i){je.call(this,n,t,e,i)}pa.prototype=Object.assign(Object.create(je.prototype),{constructor:pa,ValueTypeName:"number"});function Hu(n,t,e,i){Mn.call(this,n,t,e,i)}Hu.prototype=Object.assign(Object.create(Mn.prototype),{constructor:Hu,interpolate_:function(n,t,e,i){const r=this.resultBuffer,s=this.sampleValues,o=this.valueSize,a=(e-t)/(i-t);let l=n*o;for(let c=l+o;l!==c;l+=4)hn.slerpFlat(r,0,s,l-o,s,l,a);return r}});function lc(n,t,e,i){je.call(this,n,t,e,i)}lc.prototype=Object.assign(Object.create(je.prototype),{constructor:lc,ValueTypeName:"quaternion",DefaultInterpolation:Ml,InterpolantFactoryMethodLinear:function(n){return new Hu(this.times,this.values,this.getValueSize(),n)},InterpolantFactoryMethodSmooth:void 0});function Gu(n,t,e,i){je.call(this,n,t,e,i)}Gu.prototype=Object.assign(Object.create(je.prototype),{constructor:Gu,ValueTypeName:"string",ValueBufferType:Array,DefaultInterpolation:bl,InterpolantFactoryMethodLinear:void 0,InterpolantFactoryMethodSmooth:void 0});function ma(n,t,e,i){je.call(this,n,t,e,i)}ma.prototype=Object.assign(Object.create(je.prototype),{constructor:ma,ValueTypeName:"vector"});function Xn(n,t,e,i){this.name=n,this.tracks=e,this.duration=t!==void 0?t:-1,this.blendMode=i!==void 0?i:Yh,this.uuid=Vt.generateUUID(),this.duration<0&&this.resetDuration()}function S3(n){switch(n.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return pa;case"vector":case"vector2":case"vector3":case"vector4":return ma;case"color":return Uu;case"quaternion":return lc;case"bool":case"boolean":return zu;case"string":return Gu}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+n)}function E3(n){if(n.type===void 0)throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");const t=S3(n.type);if(n.times===void 0){const e=[],i=[];ve.flattenJSON(n.keys,e,i,"value"),n.times=e,n.values=i}return t.parse!==void 0?t.parse(n):new t(n.name,n.times,n.values,n.interpolation)}Object.assign(Xn,{parse:function(n){const t=[],e=n.tracks,i=1/(n.fps||1);for(let r=0,s=e.length;r!==s;++r)t.push(E3(e[r]).scale(i));return new Xn(n.name,n.duration,t,n.blendMode)},toJSON:function(n){const t=[],e=n.tracks,i={name:n.name,duration:n.duration,tracks:t,uuid:n.uuid,blendMode:n.blendMode};for(let r=0,s=e.length;r!==s;++r)t.push(je.toJSON(e[r]));return i},CreateFromMorphTargetSequence:function(n,t,e,i){const r=t.length,s=[];for(let o=0;o<r;o++){let a=[],l=[];a.push((o+r-1)%r,o,(o+1)%r),l.push(0,1,0);const c=ve.getKeyframeOrder(a);a=ve.sortedArray(a,1,c),l=ve.sortedArray(l,1,c),!i&&a[0]===0&&(a.push(r),l.push(l[0])),s.push(new pa(".morphTargetInfluences["+t[o].name+"]",a,l).scale(1/e))}return new Xn(n,-1,s)},findByName:function(n,t){let e=n;if(!Array.isArray(n)){const i=n;e=i.geometry&&i.geometry.animations||i.animations}for(let i=0;i<e.length;i++)if(e[i].name===t)return e[i];return null},CreateClipsFromMorphTargetSequences:function(n,t,e){const i={},r=/^([\w-]*?)([\d]+)$/;for(let o=0,a=n.length;o<a;o++){const l=n[o],c=l.name.match(r);if(c&&c.length>1){const h=c[1];let u=i[h];u||(i[h]=u=[]),u.push(l)}}const s=[];for(const o in i)s.push(Xn.CreateFromMorphTargetSequence(o,i[o],t,e));return s},parseAnimation:function(n,t){if(!n)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;const e=function(h,u,d,f,g){if(d.length!==0){const v=[],x=[];ve.flattenJSON(d,v,x,f),v.length!==0&&g.push(new h(u,v,x))}},i=[],r=n.name||"default",s=n.fps||30,o=n.blendMode;let a=n.length||-1;const l=n.hierarchy||[];for(let h=0;h<l.length;h++){const u=l[h].keys;if(!(!u||u.length===0))if(u[0].morphTargets){const d={};let f;for(f=0;f<u.length;f++)if(u[f].morphTargets)for(let g=0;g<u[f].morphTargets.length;g++)d[u[f].morphTargets[g]]=-1;for(const g in d){const v=[],x=[];for(let m=0;m!==u[f].morphTargets.length;++m){const p=u[f];v.push(p.time),x.push(p.morphTarget===g?1:0)}i.push(new pa(".morphTargetInfluence["+g+"]",v,x))}a=d.length*(s||1)}else{const d=".bones["+t[h].name+"]";e(ma,d+".position",u,"pos",i),e(lc,d+".quaternion",u,"rot",i),e(ma,d+".scale",u,"scl",i)}}return i.length===0?null:new Xn(r,a,i,o)}});Object.assign(Xn.prototype,{resetDuration:function(){const n=this.tracks;let t=0;for(let e=0,i=n.length;e!==i;++e){const r=this.tracks[e];t=Math.max(t,r.times[r.times.length-1])}return this.duration=t,this},trim:function(){for(let n=0;n<this.tracks.length;n++)this.tracks[n].trim(0,this.duration);return this},validate:function(){let n=!0;for(let t=0;t<this.tracks.length;t++)n=n&&this.tracks[t].validate();return n},optimize:function(){for(let n=0;n<this.tracks.length;n++)this.tracks[n].optimize();return this},clone:function(){const n=[];for(let t=0;t<this.tracks.length;t++)n.push(this.tracks[t].clone());return new Xn(this.name,this.duration,n,this.blendMode)}});const to={enabled:!1,files:{},add:function(n,t){this.enabled!==!1&&(this.files[n]=t)},get:function(n){if(this.enabled!==!1)return this.files[n]},remove:function(n){delete this.files[n]},clear:function(){this.files={}}};function T3(n,t,e){const i=this;let r=!1,s=0,o=0,a;const l=[];this.onStart=void 0,this.onLoad=n,this.onProgress=t,this.onError=e,this.itemStart=function(c){o++,r===!1&&i.onStart!==void 0&&i.onStart(c,s,o),r=!0},this.itemEnd=function(c){s++,i.onProgress!==void 0&&i.onProgress(c,s,o),s===o&&(r=!1,i.onLoad!==void 0&&i.onLoad())},this.itemError=function(c){i.onError!==void 0&&i.onError(c)},this.resolveURL=function(c){return a?a(c):c},this.setURLModifier=function(c){return a=c,this},this.addHandler=function(c,h){return l.push(c,h),this},this.removeHandler=function(c){const h=l.indexOf(c);return h!==-1&&l.splice(h,2),this},this.getHandler=function(c){for(let h=0,u=l.length;h<u;h+=2){const d=l[h],f=l[h+1];if(d.global&&(d.lastIndex=0),d.test(c))return f}return null}}const A3=new T3;function ce(n){this.manager=n!==void 0?n:A3,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={}}Object.assign(ce.prototype,{load:function(){},loadAsync:function(n,t){const e=this;return new Promise(function(i,r){e.load(n,i,t,r)})},parse:function(){},setCrossOrigin:function(n){return this.crossOrigin=n,this},setWithCredentials:function(n){return this.withCredentials=n,this},setPath:function(n){return this.path=n,this},setResourcePath:function(n){return this.resourcePath=n,this},setRequestHeader:function(n){return this.requestHeader=n,this}});const Bn={};function vi(n){ce.call(this,n)}vi.prototype=Object.assign(Object.create(ce.prototype),{constructor:vi,load:function(n,t,e,i){n===void 0&&(n=""),this.path!==void 0&&(n=this.path+n),n=this.manager.resolveURL(n);const r=this,s=to.get(n);if(s!==void 0)return r.manager.itemStart(n),setTimeout(function(){t&&t(s),r.manager.itemEnd(n)},0),s;if(Bn[n]!==void 0){Bn[n].push({onLoad:t,onProgress:e,onError:i});return}const o=/^data:(.*?)(;base64)?,(.*)$/,a=n.match(o);let l;if(a){const c=a[1],h=!!a[2];let u=a[3];u=decodeURIComponent(u),h&&(u=atob(u));try{let d;const f=(this.responseType||"").toLowerCase();switch(f){case"arraybuffer":case"blob":const g=new Uint8Array(u.length);for(let x=0;x<u.length;x++)g[x]=u.charCodeAt(x);f==="blob"?d=new Blob([g.buffer],{type:c}):d=g.buffer;break;case"document":d=new DOMParser().parseFromString(u,c);break;case"json":d=JSON.parse(u);break;default:d=u;break}setTimeout(function(){t&&t(d),r.manager.itemEnd(n)},0)}catch(d){setTimeout(function(){i&&i(d),r.manager.itemError(n),r.manager.itemEnd(n)},0)}}else{Bn[n]=[],Bn[n].push({onLoad:t,onProgress:e,onError:i}),l=new XMLHttpRequest,l.open("GET",n,!0),l.addEventListener("load",function(c){const h=this.response,u=Bn[n];if(delete Bn[n],this.status===200||this.status===0){this.status===0&&console.warn("THREE.FileLoader: HTTP Status 0 received."),to.add(n,h);for(let d=0,f=u.length;d<f;d++){const g=u[d];g.onLoad&&g.onLoad(h)}r.manager.itemEnd(n)}else{for(let d=0,f=u.length;d<f;d++){const g=u[d];g.onError&&g.onError(c)}r.manager.itemError(n),r.manager.itemEnd(n)}},!1),l.addEventListener("progress",function(c){const h=Bn[n];for(let u=0,d=h.length;u<d;u++){const f=h[u];f.onProgress&&f.onProgress(c)}},!1),l.addEventListener("error",function(c){const h=Bn[n];delete Bn[n];for(let u=0,d=h.length;u<d;u++){const f=h[u];f.onError&&f.onError(c)}r.manager.itemError(n),r.manager.itemEnd(n)},!1),l.addEventListener("abort",function(c){const h=Bn[n];delete Bn[n];for(let u=0,d=h.length;u<d;u++){const f=h[u];f.onError&&f.onError(c)}r.manager.itemError(n),r.manager.itemEnd(n)},!1),this.responseType!==void 0&&(l.responseType=this.responseType),this.withCredentials!==void 0&&(l.withCredentials=this.withCredentials),l.overrideMimeType&&l.overrideMimeType(this.mimeType!==void 0?this.mimeType:"text/plain");for(const c in this.requestHeader)l.setRequestHeader(c,this.requestHeader[c]);l.send(null)}return r.manager.itemStart(n),l},setResponseType:function(n){return this.responseType=n,this},setMimeType:function(n){return this.mimeType=n,this}});function Eg(n){ce.call(this,n)}Eg.prototype=Object.assign(Object.create(ce.prototype),{constructor:Eg,load:function(n,t,e,i){const r=this,s=new vi(r.manager);s.setPath(r.path),s.setRequestHeader(r.requestHeader),s.setWithCredentials(r.withCredentials),s.load(n,function(o){try{t(r.parse(JSON.parse(o)))}catch(a){i?i(a):console.error(a),r.manager.itemError(n)}},e,i)},parse:function(n){const t=[];for(let e=0;e<n.length;e++){const i=Xn.parse(n[e]);t.push(i)}return t}});function Tg(n){ce.call(this,n)}Tg.prototype=Object.assign(Object.create(ce.prototype),{constructor:Tg,load:function(n,t,e,i){const r=this,s=[],o=new ca;o.image=s;const a=new vi(this.manager);a.setPath(this.path),a.setResponseType("arraybuffer"),a.setRequestHeader(this.requestHeader),a.setWithCredentials(r.withCredentials);let l=0;function c(h){a.load(n[h],function(u){const d=r.parse(u,!0);s[h]={width:d.width,height:d.height,format:d.format,mipmaps:d.mipmaps},l+=1,l===6&&(d.mipmapCount===1&&(o.minFilter=Ve),o.format=d.format,o.needsUpdate=!0,t&&t(o))},e,i)}if(Array.isArray(n))for(let h=0,u=n.length;h<u;++h)c(h);else a.load(n,function(h){const u=r.parse(h,!0);if(u.isCubemap){const d=u.mipmaps.length/u.mipmapCount;for(let f=0;f<d;f++){s[f]={mipmaps:[]};for(let g=0;g<u.mipmapCount;g++)s[f].mipmaps.push(u.mipmaps[f*u.mipmapCount+g]),s[f].format=u.format,s[f].width=u.width,s[f].height=u.height}}else o.image.width=u.width,o.image.height=u.height,o.mipmaps=u.mipmaps;u.mipmapCount===1&&(o.minFilter=Ve),o.format=u.format,o.needsUpdate=!0,t&&t(o)},e,i);return o}});function cc(n){ce.call(this,n)}cc.prototype=Object.assign(Object.create(ce.prototype),{constructor:cc,load:function(n,t,e,i){this.path!==void 0&&(n=this.path+n),n=this.manager.resolveURL(n);const r=this,s=to.get(n);if(s!==void 0)return r.manager.itemStart(n),setTimeout(function(){t&&t(s),r.manager.itemEnd(n)},0),s;const o=document.createElementNS("http://www.w3.org/1999/xhtml","img");function a(){o.removeEventListener("load",a,!1),o.removeEventListener("error",l,!1),to.add(n,this),t&&t(this),r.manager.itemEnd(n)}function l(c){o.removeEventListener("load",a,!1),o.removeEventListener("error",l,!1),i&&i(c),r.manager.itemError(n),r.manager.itemEnd(n)}return o.addEventListener("load",a,!1),o.addEventListener("error",l,!1),n.substr(0,5)!=="data:"&&this.crossOrigin!==void 0&&(o.crossOrigin=this.crossOrigin),r.manager.itemStart(n),o.src=n,o}});function ku(n){ce.call(this,n)}ku.prototype=Object.assign(Object.create(ce.prototype),{constructor:ku,load:function(n,t,e,i){const r=new Qi,s=new cc(this.manager);s.setCrossOrigin(this.crossOrigin),s.setPath(this.path);let o=0;function a(l){s.load(n[l],function(c){r.images[l]=c,o++,o===6&&(r.needsUpdate=!0,t&&t(r))},void 0,i)}for(let l=0;l<n.length;++l)a(l);return r}});function Ag(n){ce.call(this,n)}Ag.prototype=Object.assign(Object.create(ce.prototype),{constructor:Ag,load:function(n,t,e,i){const r=this,s=new zs,o=new vi(this.manager);return o.setResponseType("arraybuffer"),o.setRequestHeader(this.requestHeader),o.setPath(this.path),o.setWithCredentials(r.withCredentials),o.load(n,function(a){const l=r.parse(a);!l||(l.image!==void 0?s.image=l.image:l.data!==void 0&&(s.image.width=l.width,s.image.height=l.height,s.image.data=l.data),s.wrapS=l.wrapS!==void 0?l.wrapS:cn,s.wrapT=l.wrapT!==void 0?l.wrapT:cn,s.magFilter=l.magFilter!==void 0?l.magFilter:Ve,s.minFilter=l.minFilter!==void 0?l.minFilter:Ve,s.anisotropy=l.anisotropy!==void 0?l.anisotropy:1,l.format!==void 0&&(s.format=l.format),l.type!==void 0&&(s.type=l.type),l.mipmaps!==void 0&&(s.mipmaps=l.mipmaps,s.minFilter=vl),l.mipmapCount===1&&(s.minFilter=Ve),s.needsUpdate=!0,t&&t(s,l))},e,i),s}});function Vu(n){ce.call(this,n)}Vu.prototype=Object.assign(Object.create(ce.prototype),{constructor:Vu,load:function(n,t,e,i){const r=new de,s=new cc(this.manager);return s.setCrossOrigin(this.crossOrigin),s.setPath(this.path),s.load(n,function(o){r.image=o;const a=n.search(/\.jpe?g($|\?)/i)>0||n.search(/^data\:image\/jpeg/)===0;r.format=a?pr:Rn,r.needsUpdate=!0,t!==void 0&&t(r)},e,i),r}});function zt(){this.type="Curve",this.arcLengthDivisions=200}Object.assign(zt.prototype,{getPoint:function(){return console.warn("THREE.Curve: .getPoint() not implemented."),null},getPointAt:function(n,t){const e=this.getUtoTmapping(n);return this.getPoint(e,t)},getPoints:function(n){n===void 0&&(n=5);const t=[];for(let e=0;e<=n;e++)t.push(this.getPoint(e/n));return t},getSpacedPoints:function(n){n===void 0&&(n=5);const t=[];for(let e=0;e<=n;e++)t.push(this.getPointAt(e/n));return t},getLength:function(){const n=this.getLengths();return n[n.length-1]},getLengths:function(n){if(n===void 0&&(n=this.arcLengthDivisions),this.cacheArcLengths&&this.cacheArcLengths.length===n+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;const t=[];let e,i=this.getPoint(0),r=0;t.push(0);for(let s=1;s<=n;s++)e=this.getPoint(s/n),r+=e.distanceTo(i),t.push(r),i=e;return this.cacheArcLengths=t,t},updateArcLengths:function(){this.needsUpdate=!0,this.getLengths()},getUtoTmapping:function(n,t){const e=this.getLengths();let i=0;const r=e.length;let s;t?s=t:s=n*e[r-1];let o=0,a=r-1,l;for(;o<=a;)if(i=Math.floor(o+(a-o)/2),l=e[i]-s,l<0)o=i+1;else if(l>0)a=i-1;else{a=i;break}if(i=a,e[i]===s)return i/(r-1);const c=e[i],u=e[i+1]-c,d=(s-c)/u;return(i+d)/(r-1)},getTangent:function(n,t){const e=1e-4;let i=n-e,r=n+e;i<0&&(i=0),r>1&&(r=1);const s=this.getPoint(i),o=this.getPoint(r),a=t||(s.isVector2?new wt:new H);return a.copy(o).sub(s).normalize(),a},getTangentAt:function(n,t){const e=this.getUtoTmapping(n);return this.getTangent(e,t)},computeFrenetFrames:function(n,t){const e=new H,i=[],r=[],s=[],o=new H,a=new Wt;for(let d=0;d<=n;d++){const f=d/n;i[d]=this.getTangentAt(f,new H),i[d].normalize()}r[0]=new H,s[0]=new H;let l=Number.MAX_VALUE;const c=Math.abs(i[0].x),h=Math.abs(i[0].y),u=Math.abs(i[0].z);c<=l&&(l=c,e.set(1,0,0)),h<=l&&(l=h,e.set(0,1,0)),u<=l&&e.set(0,0,1),o.crossVectors(i[0],e).normalize(),r[0].crossVectors(i[0],o),s[0].crossVectors(i[0],r[0]);for(let d=1;d<=n;d++){if(r[d]=r[d-1].clone(),s[d]=s[d-1].clone(),o.crossVectors(i[d-1],i[d]),o.length()>Number.EPSILON){o.normalize();const f=Math.acos(Vt.clamp(i[d-1].dot(i[d]),-1,1));r[d].applyMatrix4(a.makeRotationAxis(o,f))}s[d].crossVectors(i[d],r[d])}if(t===!0){let d=Math.acos(Vt.clamp(r[0].dot(r[n]),-1,1));d/=n,i[0].dot(o.crossVectors(r[0],r[n]))>0&&(d=-d);for(let f=1;f<=n;f++)r[f].applyMatrix4(a.makeRotationAxis(i[f],d*f)),s[f].crossVectors(i[f],r[f])}return{tangents:i,normals:r,binormals:s}},clone:function(){return new this.constructor().copy(this)},copy:function(n){return this.arcLengthDivisions=n.arcLengthDivisions,this},toJSON:function(){const n={metadata:{version:4.5,type:"Curve",generator:"Curve.toJSON"}};return n.arcLengthDivisions=this.arcLengthDivisions,n.type=this.type,n},fromJSON:function(n){return this.arcLengthDivisions=n.arcLengthDivisions,this}});function wn(n,t,e,i,r,s,o,a){zt.call(this),this.type="EllipseCurve",this.aX=n||0,this.aY=t||0,this.xRadius=e||1,this.yRadius=i||1,this.aStartAngle=r||0,this.aEndAngle=s||2*Math.PI,this.aClockwise=o||!1,this.aRotation=a||0}wn.prototype=Object.create(zt.prototype);wn.prototype.constructor=wn;wn.prototype.isEllipseCurve=!0;wn.prototype.getPoint=function(n,t){const e=t||new wt,i=Math.PI*2;let r=this.aEndAngle-this.aStartAngle;const s=Math.abs(r)<Number.EPSILON;for(;r<0;)r+=i;for(;r>i;)r-=i;r<Number.EPSILON&&(s?r=0:r=i),this.aClockwise===!0&&!s&&(r===i?r=-i:r=r-i);const o=this.aStartAngle+n*r;let a=this.aX+this.xRadius*Math.cos(o),l=this.aY+this.yRadius*Math.sin(o);if(this.aRotation!==0){const c=Math.cos(this.aRotation),h=Math.sin(this.aRotation),u=a-this.aX,d=l-this.aY;a=u*c-d*h+this.aX,l=u*h+d*c+this.aY}return e.set(a,l)};wn.prototype.copy=function(n){return zt.prototype.copy.call(this,n),this.aX=n.aX,this.aY=n.aY,this.xRadius=n.xRadius,this.yRadius=n.yRadius,this.aStartAngle=n.aStartAngle,this.aEndAngle=n.aEndAngle,this.aClockwise=n.aClockwise,this.aRotation=n.aRotation,this};wn.prototype.toJSON=function(){const n=zt.prototype.toJSON.call(this);return n.aX=this.aX,n.aY=this.aY,n.xRadius=this.xRadius,n.yRadius=this.yRadius,n.aStartAngle=this.aStartAngle,n.aEndAngle=this.aEndAngle,n.aClockwise=this.aClockwise,n.aRotation=this.aRotation,n};wn.prototype.fromJSON=function(n){return zt.prototype.fromJSON.call(this,n),this.aX=n.aX,this.aY=n.aY,this.xRadius=n.xRadius,this.yRadius=n.yRadius,this.aStartAngle=n.aStartAngle,this.aEndAngle=n.aEndAngle,this.aClockwise=n.aClockwise,this.aRotation=n.aRotation,this};function ga(n,t,e,i,r,s){wn.call(this,n,t,e,e,i,r,s),this.type="ArcCurve"}ga.prototype=Object.create(wn.prototype);ga.prototype.constructor=ga;ga.prototype.isArcCurve=!0;function Wu(){let n=0,t=0,e=0,i=0;function r(s,o,a,l){n=s,t=a,e=-3*s+3*o-2*a-l,i=2*s-2*o+a+l}return{initCatmullRom:function(s,o,a,l,c){r(o,a,c*(a-s),c*(l-o))},initNonuniformCatmullRom:function(s,o,a,l,c,h,u){let d=(o-s)/c-(a-s)/(c+h)+(a-o)/h,f=(a-o)/h-(l-o)/(h+u)+(l-a)/u;d*=h,f*=h,r(o,a,d,f)},calc:function(s){const o=s*s,a=o*s;return n+t*s+e*o+i*a}}}const hc=new H,$u=new Wu,qu=new Wu,ju=new Wu;function On(n,t,e,i){zt.call(this),this.type="CatmullRomCurve3",this.points=n||[],this.closed=t||!1,this.curveType=e||"centripetal",this.tension=i!==void 0?i:.5}On.prototype=Object.create(zt.prototype);On.prototype.constructor=On;On.prototype.isCatmullRomCurve3=!0;On.prototype.getPoint=function(n,t){const e=t||new H,i=this.points,r=i.length,s=(r-(this.closed?0:1))*n;let o=Math.floor(s),a=s-o;this.closed?o+=o>0?0:(Math.floor(Math.abs(o)/r)+1)*r:a===0&&o===r-1&&(o=r-2,a=1);let l,c;this.closed||o>0?l=i[(o-1)%r]:(hc.subVectors(i[0],i[1]).add(i[0]),l=hc);const h=i[o%r],u=i[(o+1)%r];if(this.closed||o+2<r?c=i[(o+2)%r]:(hc.subVectors(i[r-1],i[r-2]).add(i[r-1]),c=hc),this.curveType==="centripetal"||this.curveType==="chordal"){const d=this.curveType==="chordal"?.5:.25;let f=Math.pow(l.distanceToSquared(h),d),g=Math.pow(h.distanceToSquared(u),d),v=Math.pow(u.distanceToSquared(c),d);g<1e-4&&(g=1),f<1e-4&&(f=g),v<1e-4&&(v=g),$u.initNonuniformCatmullRom(l.x,h.x,u.x,c.x,f,g,v),qu.initNonuniformCatmullRom(l.y,h.y,u.y,c.y,f,g,v),ju.initNonuniformCatmullRom(l.z,h.z,u.z,c.z,f,g,v)}else this.curveType==="catmullrom"&&($u.initCatmullRom(l.x,h.x,u.x,c.x,this.tension),qu.initCatmullRom(l.y,h.y,u.y,c.y,this.tension),ju.initCatmullRom(l.z,h.z,u.z,c.z,this.tension));return e.set($u.calc(a),qu.calc(a),ju.calc(a)),e};On.prototype.copy=function(n){zt.prototype.copy.call(this,n),this.points=[];for(let t=0,e=n.points.length;t<e;t++){const i=n.points[t];this.points.push(i.clone())}return this.closed=n.closed,this.curveType=n.curveType,this.tension=n.tension,this};On.prototype.toJSON=function(){const n=zt.prototype.toJSON.call(this);n.points=[];for(let t=0,e=this.points.length;t<e;t++){const i=this.points[t];n.points.push(i.toArray())}return n.closed=this.closed,n.curveType=this.curveType,n.tension=this.tension,n};On.prototype.fromJSON=function(n){zt.prototype.fromJSON.call(this,n),this.points=[];for(let t=0,e=n.points.length;t<e;t++){const i=n.points[t];this.points.push(new H().fromArray(i))}return this.closed=n.closed,this.curveType=n.curveType,this.tension=n.tension,this};function Lg(n,t,e,i,r){const s=(i-t)*.5,o=(r-e)*.5,a=n*n,l=n*a;return(2*e-2*i+s+o)*l+(-3*e+3*i-2*s-o)*a+s*n+e}function L3(n,t){const e=1-n;return e*e*t}function C3(n,t){return 2*(1-n)*n*t}function R3(n,t){return n*n*t}function va(n,t,e,i){return L3(n,t)+C3(n,e)+R3(n,i)}function P3(n,t){const e=1-n;return e*e*e*t}function I3(n,t){const e=1-n;return 3*e*e*n*t}function D3(n,t){return 3*(1-n)*n*n*t}function N3(n,t){return n*n*n*t}function xa(n,t,e,i,r){return P3(n,t)+I3(n,e)+D3(n,i)+N3(n,r)}function Yn(n,t,e,i){zt.call(this),this.type="CubicBezierCurve",this.v0=n||new wt,this.v1=t||new wt,this.v2=e||new wt,this.v3=i||new wt}Yn.prototype=Object.create(zt.prototype);Yn.prototype.constructor=Yn;Yn.prototype.isCubicBezierCurve=!0;Yn.prototype.getPoint=function(n,t){const e=t||new wt,i=this.v0,r=this.v1,s=this.v2,o=this.v3;return e.set(xa(n,i.x,r.x,s.x,o.x),xa(n,i.y,r.y,s.y,o.y)),e};Yn.prototype.copy=function(n){return zt.prototype.copy.call(this,n),this.v0.copy(n.v0),this.v1.copy(n.v1),this.v2.copy(n.v2),this.v3.copy(n.v3),this};Yn.prototype.toJSON=function(){const n=zt.prototype.toJSON.call(this);return n.v0=this.v0.toArray(),n.v1=this.v1.toArray(),n.v2=this.v2.toArray(),n.v3=this.v3.toArray(),n};Yn.prototype.fromJSON=function(n){return zt.prototype.fromJSON.call(this,n),this.v0.fromArray(n.v0),this.v1.fromArray(n.v1),this.v2.fromArray(n.v2),this.v3.fromArray(n.v3),this};function xi(n,t,e,i){zt.call(this),this.type="CubicBezierCurve3",this.v0=n||new H,this.v1=t||new H,this.v2=e||new H,this.v3=i||new H}xi.prototype=Object.create(zt.prototype);xi.prototype.constructor=xi;xi.prototype.isCubicBezierCurve3=!0;xi.prototype.getPoint=function(n,t){const e=t||new H,i=this.v0,r=this.v1,s=this.v2,o=this.v3;return e.set(xa(n,i.x,r.x,s.x,o.x),xa(n,i.y,r.y,s.y,o.y),xa(n,i.z,r.z,s.z,o.z)),e};xi.prototype.copy=function(n){return zt.prototype.copy.call(this,n),this.v0.copy(n.v0),this.v1.copy(n.v1),this.v2.copy(n.v2),this.v3.copy(n.v3),this};xi.prototype.toJSON=function(){const n=zt.prototype.toJSON.call(this);return n.v0=this.v0.toArray(),n.v1=this.v1.toArray(),n.v2=this.v2.toArray(),n.v3=this.v3.toArray(),n};xi.prototype.fromJSON=function(n){return zt.prototype.fromJSON.call(this,n),this.v0.fromArray(n.v0),this.v1.fromArray(n.v1),this.v2.fromArray(n.v2),this.v3.fromArray(n.v3),this};function pn(n,t){zt.call(this),this.type="LineCurve",this.v1=n||new wt,this.v2=t||new wt}pn.prototype=Object.create(zt.prototype);pn.prototype.constructor=pn;pn.prototype.isLineCurve=!0;pn.prototype.getPoint=function(n,t){const e=t||new wt;return n===1?e.copy(this.v2):(e.copy(this.v2).sub(this.v1),e.multiplyScalar(n).add(this.v1)),e};pn.prototype.getPointAt=function(n,t){return this.getPoint(n,t)};pn.prototype.getTangent=function(n,t){const e=t||new wt;return e.copy(this.v2).sub(this.v1).normalize(),e};pn.prototype.copy=function(n){return zt.prototype.copy.call(this,n),this.v1.copy(n.v1),this.v2.copy(n.v2),this};pn.prototype.toJSON=function(){const n=zt.prototype.toJSON.call(this);return n.v1=this.v1.toArray(),n.v2=this.v2.toArray(),n};pn.prototype.fromJSON=function(n){return zt.prototype.fromJSON.call(this,n),this.v1.fromArray(n.v1),this.v2.fromArray(n.v2),this};function Zn(n,t){zt.call(this),this.type="LineCurve3",this.v1=n||new H,this.v2=t||new H}Zn.prototype=Object.create(zt.prototype);Zn.prototype.constructor=Zn;Zn.prototype.isLineCurve3=!0;Zn.prototype.getPoint=function(n,t){const e=t||new H;return n===1?e.copy(this.v2):(e.copy(this.v2).sub(this.v1),e.multiplyScalar(n).add(this.v1)),e};Zn.prototype.getPointAt=function(n,t){return this.getPoint(n,t)};Zn.prototype.copy=function(n){return zt.prototype.copy.call(this,n),this.v1.copy(n.v1),this.v2.copy(n.v2),this};Zn.prototype.toJSON=function(){const n=zt.prototype.toJSON.call(this);return n.v1=this.v1.toArray(),n.v2=this.v2.toArray(),n};Zn.prototype.fromJSON=function(n){return zt.prototype.fromJSON.call(this,n),this.v1.fromArray(n.v1),this.v2.fromArray(n.v2),this};function Jn(n,t,e){zt.call(this),this.type="QuadraticBezierCurve",this.v0=n||new wt,this.v1=t||new wt,this.v2=e||new wt}Jn.prototype=Object.create(zt.prototype);Jn.prototype.constructor=Jn;Jn.prototype.isQuadraticBezierCurve=!0;Jn.prototype.getPoint=function(n,t){const e=t||new wt,i=this.v0,r=this.v1,s=this.v2;return e.set(va(n,i.x,r.x,s.x),va(n,i.y,r.y,s.y)),e};Jn.prototype.copy=function(n){return zt.prototype.copy.call(this,n),this.v0.copy(n.v0),this.v1.copy(n.v1),this.v2.copy(n.v2),this};Jn.prototype.toJSON=function(){const n=zt.prototype.toJSON.call(this);return n.v0=this.v0.toArray(),n.v1=this.v1.toArray(),n.v2=this.v2.toArray(),n};Jn.prototype.fromJSON=function(n){return zt.prototype.fromJSON.call(this,n),this.v0.fromArray(n.v0),this.v1.fromArray(n.v1),this.v2.fromArray(n.v2),this};function yi(n,t,e){zt.call(this),this.type="QuadraticBezierCurve3",this.v0=n||new H,this.v1=t||new H,this.v2=e||new H}yi.prototype=Object.create(zt.prototype);yi.prototype.constructor=yi;yi.prototype.isQuadraticBezierCurve3=!0;yi.prototype.getPoint=function(n,t){const e=t||new H,i=this.v0,r=this.v1,s=this.v2;return e.set(va(n,i.x,r.x,s.x),va(n,i.y,r.y,s.y),va(n,i.z,r.z,s.z)),e};yi.prototype.copy=function(n){return zt.prototype.copy.call(this,n),this.v0.copy(n.v0),this.v1.copy(n.v1),this.v2.copy(n.v2),this};yi.prototype.toJSON=function(){const n=zt.prototype.toJSON.call(this);return n.v0=this.v0.toArray(),n.v1=this.v1.toArray(),n.v2=this.v2.toArray(),n};yi.prototype.fromJSON=function(n){return zt.prototype.fromJSON.call(this,n),this.v0.fromArray(n.v0),this.v1.fromArray(n.v1),this.v2.fromArray(n.v2),this};function Qn(n){zt.call(this),this.type="SplineCurve",this.points=n||[]}Qn.prototype=Object.create(zt.prototype);Qn.prototype.constructor=Qn;Qn.prototype.isSplineCurve=!0;Qn.prototype.getPoint=function(n,t){const e=t||new wt,i=this.points,r=(i.length-1)*n,s=Math.floor(r),o=r-s,a=i[s===0?s:s-1],l=i[s],c=i[s>i.length-2?i.length-1:s+1],h=i[s>i.length-3?i.length-1:s+2];return e.set(Lg(o,a.x,l.x,c.x,h.x),Lg(o,a.y,l.y,c.y,h.y)),e};Qn.prototype.copy=function(n){zt.prototype.copy.call(this,n),this.points=[];for(let t=0,e=n.points.length;t<e;t++){const i=n.points[t];this.points.push(i.clone())}return this};Qn.prototype.toJSON=function(){const n=zt.prototype.toJSON.call(this);n.points=[];for(let t=0,e=this.points.length;t<e;t++){const i=this.points[t];n.points.push(i.toArray())}return n};Qn.prototype.fromJSON=function(n){zt.prototype.fromJSON.call(this,n),this.points=[];for(let t=0,e=n.points.length;t<e;t++){const i=n.points[t];this.points.push(new wt().fromArray(i))}return this};var F3=Object.freeze({__proto__:null,ArcCurve:ga,CatmullRomCurve3:On,CubicBezierCurve:Yn,CubicBezierCurve3:xi,EllipseCurve:wn,LineCurve:pn,LineCurve3:Zn,QuadraticBezierCurve:Jn,QuadraticBezierCurve3:yi,SplineCurve:Qn});function nr(){zt.call(this),this.type="CurvePath",this.curves=[],this.autoClose=!1}nr.prototype=Object.assign(Object.create(zt.prototype),{constructor:nr,add:function(n){this.curves.push(n)},closePath:function(){const n=this.curves[0].getPoint(0),t=this.curves[this.curves.length-1].getPoint(1);n.equals(t)||this.curves.push(new pn(t,n))},getPoint:function(n){const t=n*this.getLength(),e=this.getCurveLengths();let i=0;for(;i<e.length;){if(e[i]>=t){const r=e[i]-t,s=this.curves[i],o=s.getLength(),a=o===0?0:1-r/o;return s.getPointAt(a)}i++}return null},getLength:function(){const n=this.getCurveLengths();return n[n.length-1]},updateArcLengths:function(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()},getCurveLengths:function(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;const n=[];let t=0;for(let e=0,i=this.curves.length;e<i;e++)t+=this.curves[e].getLength(),n.push(t);return this.cacheLengths=n,n},getSpacedPoints:function(n){n===void 0&&(n=40);const t=[];for(let e=0;e<=n;e++)t.push(this.getPoint(e/n));return this.autoClose&&t.push(t[0]),t},getPoints:function(n){n=n||12;const t=[];let e;for(let i=0,r=this.curves;i<r.length;i++){const s=r[i],o=s&&s.isEllipseCurve?n*2:s&&(s.isLineCurve||s.isLineCurve3)?1:s&&s.isSplineCurve?n*s.points.length:n,a=s.getPoints(o);for(let l=0;l<a.length;l++){const c=a[l];e&&e.equals(c)||(t.push(c),e=c)}}return this.autoClose&&t.length>1&&!t[t.length-1].equals(t[0])&&t.push(t[0]),t},copy:function(n){zt.prototype.copy.call(this,n),this.curves=[];for(let t=0,e=n.curves.length;t<e;t++){const i=n.curves[t];this.curves.push(i.clone())}return this.autoClose=n.autoClose,this},toJSON:function(){const n=zt.prototype.toJSON.call(this);n.autoClose=this.autoClose,n.curves=[];for(let t=0,e=this.curves.length;t<e;t++){const i=this.curves[t];n.curves.push(i.toJSON())}return n},fromJSON:function(n){zt.prototype.fromJSON.call(this,n),this.autoClose=n.autoClose,this.curves=[];for(let t=0,e=n.curves.length;t<e;t++){const i=n.curves[t];this.curves.push(new F3[i.type]().fromJSON(i))}return this}});function Kn(n){nr.call(this),this.type="Path",this.currentPoint=new wt,n&&this.setFromPoints(n)}Kn.prototype=Object.assign(Object.create(nr.prototype),{constructor:Kn,setFromPoints:function(n){this.moveTo(n[0].x,n[0].y);for(let t=1,e=n.length;t<e;t++)this.lineTo(n[t].x,n[t].y);return this},moveTo:function(n,t){return this.currentPoint.set(n,t),this},lineTo:function(n,t){const e=new pn(this.currentPoint.clone(),new wt(n,t));return this.curves.push(e),this.currentPoint.set(n,t),this},quadraticCurveTo:function(n,t,e,i){const r=new Jn(this.currentPoint.clone(),new wt(n,t),new wt(e,i));return this.curves.push(r),this.currentPoint.set(e,i),this},bezierCurveTo:function(n,t,e,i,r,s){const o=new Yn(this.currentPoint.clone(),new wt(n,t),new wt(e,i),new wt(r,s));return this.curves.push(o),this.currentPoint.set(r,s),this},splineThru:function(n){const t=[this.currentPoint.clone()].concat(n),e=new Qn(t);return this.curves.push(e),this.currentPoint.copy(n[n.length-1]),this},arc:function(n,t,e,i,r,s){const o=this.currentPoint.x,a=this.currentPoint.y;return this.absarc(n+o,t+a,e,i,r,s),this},absarc:function(n,t,e,i,r,s){return this.absellipse(n,t,e,e,i,r,s),this},ellipse:function(n,t,e,i,r,s,o,a){const l=this.currentPoint.x,c=this.currentPoint.y;return this.absellipse(n+l,t+c,e,i,r,s,o,a),this},absellipse:function(n,t,e,i,r,s,o,a){const l=new wn(n,t,e,i,r,s,o,a);if(this.curves.length>0){const h=l.getPoint(0);h.equals(this.currentPoint)||this.lineTo(h.x,h.y)}this.curves.push(l);const c=l.getPoint(1);return this.currentPoint.copy(c),this},copy:function(n){return nr.prototype.copy.call(this,n),this.currentPoint.copy(n.currentPoint),this},toJSON:function(){const n=nr.prototype.toJSON.call(this);return n.currentPoint=this.currentPoint.toArray(),n},fromJSON:function(n){return nr.prototype.fromJSON.call(this,n),this.currentPoint.fromArray(n.currentPoint),this}});function eo(n){Kn.call(this,n),this.uuid=Vt.generateUUID(),this.type="Shape",this.holes=[]}eo.prototype=Object.assign(Object.create(Kn.prototype),{constructor:eo,getPointsHoles:function(n){const t=[];for(let e=0,i=this.holes.length;e<i;e++)t[e]=this.holes[e].getPoints(n);return t},extractPoints:function(n){return{shape:this.getPoints(n),holes:this.getPointsHoles(n)}},copy:function(n){Kn.prototype.copy.call(this,n),this.holes=[];for(let t=0,e=n.holes.length;t<e;t++){const i=n.holes[t];this.holes.push(i.clone())}return this},toJSON:function(){const n=Kn.prototype.toJSON.call(this);n.uuid=this.uuid,n.holes=[];for(let t=0,e=this.holes.length;t<e;t++){const i=this.holes[t];n.holes.push(i.toJSON())}return n},fromJSON:function(n){Kn.prototype.fromJSON.call(this,n),this.uuid=n.uuid,this.holes=[];for(let t=0,e=n.holes.length;t<e;t++){const i=n.holes[t];this.holes.push(new Kn().fromJSON(i))}return this}});function me(n,t){Ut.call(this),this.type="Light",this.color=new Ot(n),this.intensity=t!==void 0?t:1}me.prototype=Object.assign(Object.create(Ut.prototype),{constructor:me,isLight:!0,copy:function(n){return Ut.prototype.copy.call(this,n),this.color.copy(n.color),this.intensity=n.intensity,this},toJSON:function(n){const t=Ut.prototype.toJSON.call(this,n);return t.object.color=this.color.getHex(),t.object.intensity=this.intensity,this.groundColor!==void 0&&(t.object.groundColor=this.groundColor.getHex()),this.distance!==void 0&&(t.object.distance=this.distance),this.angle!==void 0&&(t.object.angle=this.angle),this.decay!==void 0&&(t.object.decay=this.decay),this.penumbra!==void 0&&(t.object.penumbra=this.penumbra),this.shadow!==void 0&&(t.object.shadow=this.shadow.toJSON()),t}});function Cg(n,t,e){me.call(this,n,e),this.type="HemisphereLight",this.position.copy(Ut.DefaultUp),this.updateMatrix(),this.groundColor=new Ot(t)}Cg.prototype=Object.assign(Object.create(me.prototype),{constructor:Cg,isHemisphereLight:!0,copy:function(n){return me.prototype.copy.call(this,n),this.groundColor.copy(n.groundColor),this}});function _i(n){this.camera=n,this.bias=0,this.normalBias=0,this.radius=1,this.mapSize=new wt(512,512),this.map=null,this.mapPass=null,this.matrix=new Wt,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new Hl,this._frameExtents=new wt(1,1),this._viewportCount=1,this._viewports=[new ae(0,0,1,1)]}Object.assign(_i.prototype,{_projScreenMatrix:new Wt,_lightPositionWorld:new H,_lookTarget:new H,getViewportCount:function(){return this._viewportCount},getFrustum:function(){return this._frustum},updateMatrices:function(n){const t=this.camera,e=this.matrix,i=this._projScreenMatrix,r=this._lookTarget,s=this._lightPositionWorld;s.setFromMatrixPosition(n.matrixWorld),t.position.copy(s),r.setFromMatrixPosition(n.target.matrixWorld),t.lookAt(r),t.updateMatrixWorld(),i.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),this._frustum.setFromProjectionMatrix(i),e.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),e.multiply(t.projectionMatrix),e.multiply(t.matrixWorldInverse)},getViewport:function(n){return this._viewports[n]},getFrameExtents:function(){return this._frameExtents},copy:function(n){return this.camera=n.camera.clone(),this.bias=n.bias,this.radius=n.radius,this.mapSize.copy(n.mapSize),this},clone:function(){return new this.constructor().copy(this)},toJSON:function(){const n={};return this.bias!==0&&(n.bias=this.bias),this.normalBias!==0&&(n.normalBias=this.normalBias),this.radius!==1&&(n.radius=this.radius),(this.mapSize.x!==512||this.mapSize.y!==512)&&(n.mapSize=this.mapSize.toArray()),n.camera=this.camera.toJSON(!1).object,delete n.camera.matrix,n}});function Xu(){_i.call(this,new Be(50,1,.5,500)),this.focus=1}Xu.prototype=Object.assign(Object.create(_i.prototype),{constructor:Xu,isSpotLightShadow:!0,updateMatrices:function(n){const t=this.camera,e=Vt.RAD2DEG*2*n.angle*this.focus,i=this.mapSize.width/this.mapSize.height,r=n.distance||t.far;(e!==t.fov||i!==t.aspect||r!==t.far)&&(t.fov=e,t.aspect=i,t.far=r,t.updateProjectionMatrix()),_i.prototype.updateMatrices.call(this,n)}});function Rg(n,t,e,i,r,s){me.call(this,n,t),this.type="SpotLight",this.position.copy(Ut.DefaultUp),this.updateMatrix(),this.target=new Ut,Object.defineProperty(this,"power",{get:function(){return this.intensity*Math.PI},set:function(o){this.intensity=o/Math.PI}}),this.distance=e!==void 0?e:0,this.angle=i!==void 0?i:Math.PI/3,this.penumbra=r!==void 0?r:0,this.decay=s!==void 0?s:1,this.shadow=new Xu}Rg.prototype=Object.assign(Object.create(me.prototype),{constructor:Rg,isSpotLight:!0,copy:function(n){return me.prototype.copy.call(this,n),this.distance=n.distance,this.angle=n.angle,this.penumbra=n.penumbra,this.decay=n.decay,this.target=n.target.clone(),this.shadow=n.shadow.clone(),this}});function Yu(){_i.call(this,new Be(90,1,.5,500)),this._frameExtents=new wt(4,2),this._viewportCount=6,this._viewports=[new ae(2,1,1,1),new ae(0,1,1,1),new ae(3,1,1,1),new ae(1,1,1,1),new ae(3,0,1,1),new ae(1,0,1,1)],this._cubeDirections=[new H(1,0,0),new H(-1,0,0),new H(0,0,1),new H(0,0,-1),new H(0,1,0),new H(0,-1,0)],this._cubeUps=[new H(0,1,0),new H(0,1,0),new H(0,1,0),new H(0,1,0),new H(0,0,1),new H(0,0,-1)]}Yu.prototype=Object.assign(Object.create(_i.prototype),{constructor:Yu,isPointLightShadow:!0,updateMatrices:function(n,t){t===void 0&&(t=0);const e=this.camera,i=this.matrix,r=this._lightPositionWorld,s=this._lookTarget,o=this._projScreenMatrix;r.setFromMatrixPosition(n.matrixWorld),e.position.copy(r),s.copy(e.position),s.add(this._cubeDirections[t]),e.up.copy(this._cubeUps[t]),e.lookAt(s),e.updateMatrixWorld(),i.makeTranslation(-r.x,-r.y,-r.z),o.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),this._frustum.setFromProjectionMatrix(o)}});function Pg(n,t,e,i){me.call(this,n,t),this.type="PointLight",Object.defineProperty(this,"power",{get:function(){return this.intensity*4*Math.PI},set:function(r){this.intensity=r/(4*Math.PI)}}),this.distance=e!==void 0?e:0,this.decay=i!==void 0?i:1,this.shadow=new Yu}Pg.prototype=Object.assign(Object.create(me.prototype),{constructor:Pg,isPointLight:!0,copy:function(n){return me.prototype.copy.call(this,n),this.distance=n.distance,this.decay=n.decay,this.shadow=n.shadow.clone(),this}});function Zu(n,t,e,i,r,s){Ji.call(this),this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=n!==void 0?n:-1,this.right=t!==void 0?t:1,this.top=e!==void 0?e:1,this.bottom=i!==void 0?i:-1,this.near=r!==void 0?r:.1,this.far=s!==void 0?s:2e3,this.updateProjectionMatrix()}Zu.prototype=Object.assign(Object.create(Ji.prototype),{constructor:Zu,isOrthographicCamera:!0,copy:function(n,t){return Ji.prototype.copy.call(this,n,t),this.left=n.left,this.right=n.right,this.top=n.top,this.bottom=n.bottom,this.near=n.near,this.far=n.far,this.zoom=n.zoom,this.view=n.view===null?null:Object.assign({},n.view),this},setViewOffset:function(n,t,e,i,r,s){this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=n,this.view.fullHeight=t,this.view.offsetX=e,this.view.offsetY=i,this.view.width=r,this.view.height=s,this.updateProjectionMatrix()},clearViewOffset:function(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()},updateProjectionMatrix:function(){const n=(this.right-this.left)/(2*this.zoom),t=(this.top-this.bottom)/(2*this.zoom),e=(this.right+this.left)/2,i=(this.top+this.bottom)/2;let r=e-n,s=e+n,o=i+t,a=i-t;if(this.view!==null&&this.view.enabled){const l=(this.right-this.left)/this.view.fullWidth/this.zoom,c=(this.top-this.bottom)/this.view.fullHeight/this.zoom;r+=l*this.view.offsetX,s=r+l*this.view.width,o-=c*this.view.offsetY,a=o-c*this.view.height}this.projectionMatrix.makeOrthographic(r,s,o,a,this.near,this.far),this.projectionMatrixInverse.getInverse(this.projectionMatrix)},toJSON:function(n){const t=Ut.prototype.toJSON.call(this,n);return t.object.zoom=this.zoom,t.object.left=this.left,t.object.right=this.right,t.object.top=this.top,t.object.bottom=this.bottom,t.object.near=this.near,t.object.far=this.far,this.view!==null&&(t.object.view=Object.assign({},this.view)),t}});function Ju(){_i.call(this,new Zu(-5,5,5,-5,.5,500))}Ju.prototype=Object.assign(Object.create(_i.prototype),{constructor:Ju,isDirectionalLightShadow:!0,updateMatrices:function(n){_i.prototype.updateMatrices.call(this,n)}});function Ig(n,t){me.call(this,n,t),this.type="DirectionalLight",this.position.copy(Ut.DefaultUp),this.updateMatrix(),this.target=new Ut,this.shadow=new Ju}Ig.prototype=Object.assign(Object.create(me.prototype),{constructor:Ig,isDirectionalLight:!0,copy:function(n){return me.prototype.copy.call(this,n),this.target=n.target.clone(),this.shadow=n.shadow.clone(),this}});function Dg(n,t){me.call(this,n,t),this.type="AmbientLight"}Dg.prototype=Object.assign(Object.create(me.prototype),{constructor:Dg,isAmbientLight:!0});function Ng(n,t,e,i){me.call(this,n,t),this.type="RectAreaLight",this.width=e!==void 0?e:10,this.height=i!==void 0?i:10}Ng.prototype=Object.assign(Object.create(me.prototype),{constructor:Ng,isRectAreaLight:!0,copy:function(n){return me.prototype.copy.call(this,n),this.width=n.width,this.height=n.height,this},toJSON:function(n){const t=me.prototype.toJSON.call(this,n);return t.object.width=this.width,t.object.height=this.height,t}});class B3{constructor(){Object.defineProperty(this,"isSphericalHarmonics3",{value:!0}),this.coefficients=[];for(let t=0;t<9;t++)this.coefficients.push(new H)}set(t){for(let e=0;e<9;e++)this.coefficients[e].copy(t[e]);return this}zero(){for(let t=0;t<9;t++)this.coefficients[t].set(0,0,0);return this}getAt(t,e){const i=t.x,r=t.y,s=t.z,o=this.coefficients;return e.copy(o[0]).multiplyScalar(.282095),e.addScaledVector(o[1],.488603*r),e.addScaledVector(o[2],.488603*s),e.addScaledVector(o[3],.488603*i),e.addScaledVector(o[4],1.092548*(i*r)),e.addScaledVector(o[5],1.092548*(r*s)),e.addScaledVector(o[6],.315392*(3*s*s-1)),e.addScaledVector(o[7],1.092548*(i*s)),e.addScaledVector(o[8],.546274*(i*i-r*r)),e}getIrradianceAt(t,e){const i=t.x,r=t.y,s=t.z,o=this.coefficients;return e.copy(o[0]).multiplyScalar(.886227),e.addScaledVector(o[1],2*.511664*r),e.addScaledVector(o[2],2*.511664*s),e.addScaledVector(o[3],2*.511664*i),e.addScaledVector(o[4],2*.429043*i*r),e.addScaledVector(o[5],2*.429043*r*s),e.addScaledVector(o[6],.743125*s*s-.247708),e.addScaledVector(o[7],2*.429043*i*s),e.addScaledVector(o[8],.429043*(i*i-r*r)),e}add(t){for(let e=0;e<9;e++)this.coefficients[e].add(t.coefficients[e]);return this}addScaledSH(t,e){for(let i=0;i<9;i++)this.coefficients[i].addScaledVector(t.coefficients[i],e);return this}scale(t){for(let e=0;e<9;e++)this.coefficients[e].multiplyScalar(t);return this}lerp(t,e){for(let i=0;i<9;i++)this.coefficients[i].lerp(t.coefficients[i],e);return this}equals(t){for(let e=0;e<9;e++)if(!this.coefficients[e].equals(t.coefficients[e]))return!1;return!0}copy(t){return this.set(t.coefficients)}clone(){return new this.constructor().copy(this)}fromArray(t,e=0){const i=this.coefficients;for(let r=0;r<9;r++)i[r].fromArray(t,e+r*3);return this}toArray(t=[],e=0){const i=this.coefficients;for(let r=0;r<9;r++)i[r].toArray(t,e+r*3);return t}static getBasisAt(t,e){const i=t.x,r=t.y,s=t.z;e[0]=.282095,e[1]=.488603*r,e[2]=.488603*s,e[3]=.488603*i,e[4]=1.092548*i*r,e[5]=1.092548*r*s,e[6]=.315392*(3*s*s-1),e[7]=1.092548*i*s,e[8]=.546274*(i*i-r*r)}}function ti(n,t){me.call(this,void 0,t),this.type="LightProbe",this.sh=n!==void 0?n:new B3}ti.prototype=Object.assign(Object.create(me.prototype),{constructor:ti,isLightProbe:!0,copy:function(n){return me.prototype.copy.call(this,n),this.sh.copy(n.sh),this},fromJSON:function(n){return this.intensity=n.intensity,this.sh.fromArray(n.sh),this},toJSON:function(n){const t=me.prototype.toJSON.call(this,n);return t.object.sh=this.sh.toArray(),t}});function Fg(n){ce.call(this,n),this.textures={}}Fg.prototype=Object.assign(Object.create(ce.prototype),{constructor:Fg,load:function(n,t,e,i){const r=this,s=new vi(r.manager);s.setPath(r.path),s.setRequestHeader(r.requestHeader),s.setWithCredentials(r.withCredentials),s.load(n,function(o){try{t(r.parse(JSON.parse(o)))}catch(a){i?i(a):console.error(a),r.manager.itemError(n)}},e,i)},parse:function(n){const t=this.textures;function e(r){return t[r]===void 0&&console.warn("THREE.MaterialLoader: Undefined texture",r),t[r]}const i=new w3[n.type];if(n.uuid!==void 0&&(i.uuid=n.uuid),n.name!==void 0&&(i.name=n.name),n.color!==void 0&&i.color!==void 0&&i.color.setHex(n.color),n.roughness!==void 0&&(i.roughness=n.roughness),n.metalness!==void 0&&(i.metalness=n.metalness),n.sheen!==void 0&&(i.sheen=new Ot().setHex(n.sheen)),n.emissive!==void 0&&i.emissive!==void 0&&i.emissive.setHex(n.emissive),n.specular!==void 0&&i.specular!==void 0&&i.specular.setHex(n.specular),n.shininess!==void 0&&(i.shininess=n.shininess),n.clearcoat!==void 0&&(i.clearcoat=n.clearcoat),n.clearcoatRoughness!==void 0&&(i.clearcoatRoughness=n.clearcoatRoughness),n.fog!==void 0&&(i.fog=n.fog),n.flatShading!==void 0&&(i.flatShading=n.flatShading),n.blending!==void 0&&(i.blending=n.blending),n.combine!==void 0&&(i.combine=n.combine),n.side!==void 0&&(i.side=n.side),n.opacity!==void 0&&(i.opacity=n.opacity),n.transparent!==void 0&&(i.transparent=n.transparent),n.alphaTest!==void 0&&(i.alphaTest=n.alphaTest),n.depthTest!==void 0&&(i.depthTest=n.depthTest),n.depthWrite!==void 0&&(i.depthWrite=n.depthWrite),n.colorWrite!==void 0&&(i.colorWrite=n.colorWrite),n.stencilWrite!==void 0&&(i.stencilWrite=n.stencilWrite),n.stencilWriteMask!==void 0&&(i.stencilWriteMask=n.stencilWriteMask),n.stencilFunc!==void 0&&(i.stencilFunc=n.stencilFunc),n.stencilRef!==void 0&&(i.stencilRef=n.stencilRef),n.stencilFuncMask!==void 0&&(i.stencilFuncMask=n.stencilFuncMask),n.stencilFail!==void 0&&(i.stencilFail=n.stencilFail),n.stencilZFail!==void 0&&(i.stencilZFail=n.stencilZFail),n.stencilZPass!==void 0&&(i.stencilZPass=n.stencilZPass),n.wireframe!==void 0&&(i.wireframe=n.wireframe),n.wireframeLinewidth!==void 0&&(i.wireframeLinewidth=n.wireframeLinewidth),n.wireframeLinecap!==void 0&&(i.wireframeLinecap=n.wireframeLinecap),n.wireframeLinejoin!==void 0&&(i.wireframeLinejoin=n.wireframeLinejoin),n.rotation!==void 0&&(i.rotation=n.rotation),n.linewidth!==1&&(i.linewidth=n.linewidth),n.dashSize!==void 0&&(i.dashSize=n.dashSize),n.gapSize!==void 0&&(i.gapSize=n.gapSize),n.scale!==void 0&&(i.scale=n.scale),n.polygonOffset!==void 0&&(i.polygonOffset=n.polygonOffset),n.polygonOffsetFactor!==void 0&&(i.polygonOffsetFactor=n.polygonOffsetFactor),n.polygonOffsetUnits!==void 0&&(i.polygonOffsetUnits=n.polygonOffsetUnits),n.skinning!==void 0&&(i.skinning=n.skinning),n.morphTargets!==void 0&&(i.morphTargets=n.morphTargets),n.morphNormals!==void 0&&(i.morphNormals=n.morphNormals),n.dithering!==void 0&&(i.dithering=n.dithering),n.vertexTangents!==void 0&&(i.vertexTangents=n.vertexTangents),n.visible!==void 0&&(i.visible=n.visible),n.toneMapped!==void 0&&(i.toneMapped=n.toneMapped),n.userData!==void 0&&(i.userData=n.userData),n.vertexColors!==void 0&&(typeof n.vertexColors=="number"?i.vertexColors=n.vertexColors>0:i.vertexColors=n.vertexColors),n.uniforms!==void 0)for(const r in n.uniforms){const s=n.uniforms[r];switch(i.uniforms[r]={},s.type){case"t":i.uniforms[r].value=e(s.value);break;case"c":i.uniforms[r].value=new Ot().setHex(s.value);break;case"v2":i.uniforms[r].value=new wt().fromArray(s.value);break;case"v3":i.uniforms[r].value=new H().fromArray(s.value);break;case"v4":i.uniforms[r].value=new ae().fromArray(s.value);break;case"m3":i.uniforms[r].value=new nn().fromArray(s.value);break;case"m4":i.uniforms[r].value=new Wt().fromArray(s.value);break;default:i.uniforms[r].value=s.value}}if(n.defines!==void 0&&(i.defines=n.defines),n.vertexShader!==void 0&&(i.vertexShader=n.vertexShader),n.fragmentShader!==void 0&&(i.fragmentShader=n.fragmentShader),n.extensions!==void 0)for(const r in n.extensions)i.extensions[r]=n.extensions[r];if(n.shading!==void 0&&(i.flatShading=n.shading===1),n.size!==void 0&&(i.size=n.size),n.sizeAttenuation!==void 0&&(i.sizeAttenuation=n.sizeAttenuation),n.map!==void 0&&(i.map=e(n.map)),n.matcap!==void 0&&(i.matcap=e(n.matcap)),n.alphaMap!==void 0&&(i.alphaMap=e(n.alphaMap)),n.bumpMap!==void 0&&(i.bumpMap=e(n.bumpMap)),n.bumpScale!==void 0&&(i.bumpScale=n.bumpScale),n.normalMap!==void 0&&(i.normalMap=e(n.normalMap)),n.normalMapType!==void 0&&(i.normalMapType=n.normalMapType),n.normalScale!==void 0){let r=n.normalScale;Array.isArray(r)===!1&&(r=[r,r]),i.normalScale=new wt().fromArray(r)}return n.displacementMap!==void 0&&(i.displacementMap=e(n.displacementMap)),n.displacementScale!==void 0&&(i.displacementScale=n.displacementScale),n.displacementBias!==void 0&&(i.displacementBias=n.displacementBias),n.roughnessMap!==void 0&&(i.roughnessMap=e(n.roughnessMap)),n.metalnessMap!==void 0&&(i.metalnessMap=e(n.metalnessMap)),n.emissiveMap!==void 0&&(i.emissiveMap=e(n.emissiveMap)),n.emissiveIntensity!==void 0&&(i.emissiveIntensity=n.emissiveIntensity),n.specularMap!==void 0&&(i.specularMap=e(n.specularMap)),n.envMap!==void 0&&(i.envMap=e(n.envMap)),n.envMapIntensity!==void 0&&(i.envMapIntensity=n.envMapIntensity),n.reflectivity!==void 0&&(i.reflectivity=n.reflectivity),n.refractionRatio!==void 0&&(i.refractionRatio=n.refractionRatio),n.lightMap!==void 0&&(i.lightMap=e(n.lightMap)),n.lightMapIntensity!==void 0&&(i.lightMapIntensity=n.lightMapIntensity),n.aoMap!==void 0&&(i.aoMap=e(n.aoMap)),n.aoMapIntensity!==void 0&&(i.aoMapIntensity=n.aoMapIntensity),n.gradientMap!==void 0&&(i.gradientMap=e(n.gradientMap)),n.clearcoatMap!==void 0&&(i.clearcoatMap=e(n.clearcoatMap)),n.clearcoatRoughnessMap!==void 0&&(i.clearcoatRoughnessMap=e(n.clearcoatRoughnessMap)),n.clearcoatNormalMap!==void 0&&(i.clearcoatNormalMap=e(n.clearcoatNormalMap)),n.clearcoatNormalScale!==void 0&&(i.clearcoatNormalScale=new wt().fromArray(n.clearcoatNormalScale)),n.transmission!==void 0&&(i.transmission=n.transmission),n.transmissionMap!==void 0&&(i.transmissionMap=e(n.transmissionMap)),i},setTextures:function(n){return this.textures=n,this}});const O3={decodeText:function(n){if(typeof TextDecoder!="undefined")return new TextDecoder().decode(n);let t="";for(let e=0,i=n.length;e<i;e++)t+=String.fromCharCode(n[e]);try{return decodeURIComponent(escape(t))}catch{return t}},extractUrlBase:function(n){const t=n.lastIndexOf("/");return t===-1?"./":n.substr(0,t+1)}};function uc(){le.call(this),this.type="InstancedBufferGeometry",this.instanceCount=1/0}uc.prototype=Object.assign(Object.create(le.prototype),{constructor:uc,isInstancedBufferGeometry:!0,copy:function(n){return le.prototype.copy.call(this,n),this.instanceCount=n.instanceCount,this},clone:function(){return new this.constructor().copy(this)},toJSON:function(){const n=le.prototype.toJSON.call(this);return n.instanceCount=this.instanceCount,n.isInstancedBufferGeometry=!0,n}});function Qu(n,t,e,i){typeof e=="number"&&(i=e,e=!1,console.error("THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.")),kt.call(this,n,t,e),this.meshPerAttribute=i||1}Qu.prototype=Object.assign(Object.create(kt.prototype),{constructor:Qu,isInstancedBufferAttribute:!0,copy:function(n){return kt.prototype.copy.call(this,n),this.meshPerAttribute=n.meshPerAttribute,this},toJSON:function(){const n=kt.prototype.toJSON.call(this);return n.meshPerAttribute=this.meshPerAttribute,n.isInstancedBufferAttribute=!0,n}});function Bg(n){ce.call(this,n)}Bg.prototype=Object.assign(Object.create(ce.prototype),{constructor:Bg,load:function(n,t,e,i){const r=this,s=new vi(r.manager);s.setPath(r.path),s.setRequestHeader(r.requestHeader),s.setWithCredentials(r.withCredentials),s.load(n,function(o){try{t(r.parse(JSON.parse(o)))}catch(a){i?i(a):console.error(a),r.manager.itemError(n)}},e,i)},parse:function(n){const t={},e={};function i(d,f){if(t[f]!==void 0)return t[f];const v=d.interleavedBuffers[f],x=r(d,v.buffer),m=new dc[v.type](x),p=new _n(m,v.stride);return p.uuid=v.uuid,t[f]=p,p}function r(d,f){if(e[f]!==void 0)return e[f];const v=d.arrayBuffers[f],x=new Uint32Array(v).buffer;return e[f]=x,x}const s=n.isInstancedBufferGeometry?new uc:new le,o=n.data.index;if(o!==void 0){const d=new dc[o.type](o.array);s.setIndex(new kt(d,1))}const a=n.data.attributes;for(const d in a){const f=a[d];let g;if(f.isInterleavedBufferAttribute){const v=i(n.data,f.data);g=new Sr(v,f.itemSize,f.offset,f.normalized)}else{const v=new dc[f.type](f.array),x=f.isInstancedBufferAttribute?Qu:kt;g=new x(v,f.itemSize,f.normalized)}f.name!==void 0&&(g.name=f.name),s.setAttribute(d,g)}const l=n.data.morphAttributes;if(l)for(const d in l){const f=l[d],g=[];for(let v=0,x=f.length;v<x;v++){const m=f[v];let p;if(m.isInterleavedBufferAttribute){const b=i(n.data,m.data);p=new Sr(b,m.itemSize,m.offset,m.normalized)}else{const b=new dc[m.type](m.array);p=new kt(b,m.itemSize,m.normalized)}m.name!==void 0&&(p.name=m.name),g.push(p)}s.morphAttributes[d]=g}n.data.morphTargetsRelative&&(s.morphTargetsRelative=!0);const h=n.data.groups||n.data.drawcalls||n.data.offsets;if(h!==void 0)for(let d=0,f=h.length;d!==f;++d){const g=h[d];s.addGroup(g.start,g.count,g.materialIndex)}const u=n.data.boundingSphere;if(u!==void 0){const d=new H;u.center!==void 0&&d.fromArray(u.center),s.boundingSphere=new $i(d,u.radius)}return n.name&&(s.name=n.name),n.userData&&(s.userData=n.userData),s}});const dc={Int8Array,Uint8Array,Uint8ClampedArray:typeof Uint8ClampedArray!="undefined"?Uint8ClampedArray:Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array};function Og(n){typeof createImageBitmap=="undefined"&&console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),typeof fetch=="undefined"&&console.warn("THREE.ImageBitmapLoader: fetch() not supported."),ce.call(this,n),this.options={premultiplyAlpha:"none"}}Og.prototype=Object.assign(Object.create(ce.prototype),{constructor:Og,isImageBitmapLoader:!0,setOptions:function(t){return this.options=t,this},load:function(n,t,e,i){n===void 0&&(n=""),this.path!==void 0&&(n=this.path+n),n=this.manager.resolveURL(n);const r=this,s=to.get(n);if(s!==void 0)return r.manager.itemStart(n),setTimeout(function(){t&&t(s),r.manager.itemEnd(n)},0),s;const o={};o.credentials=this.crossOrigin==="anonymous"?"same-origin":"include",fetch(n,o).then(function(a){return a.blob()}).then(function(a){return createImageBitmap(a,r.options)}).then(function(a){to.add(n,a),t&&t(a),r.manager.itemEnd(n)}).catch(function(a){i&&i(a),r.manager.itemError(n),r.manager.itemEnd(n)}),r.manager.itemStart(n)}});function zg(){this.type="ShapePath",this.color=new Ot,this.subPaths=[],this.currentPath=null}Object.assign(zg.prototype,{moveTo:function(n,t){return this.currentPath=new Kn,this.subPaths.push(this.currentPath),this.currentPath.moveTo(n,t),this},lineTo:function(n,t){return this.currentPath.lineTo(n,t),this},quadraticCurveTo:function(n,t,e,i){return this.currentPath.quadraticCurveTo(n,t,e,i),this},bezierCurveTo:function(n,t,e,i,r,s){return this.currentPath.bezierCurveTo(n,t,e,i,r,s),this},splineThru:function(n){return this.currentPath.splineThru(n),this},toShapes:function(n,t){function e(m){const p=[];for(let b=0,_=m.length;b<_;b++){const w=m[b],E=new eo;E.curves=w.curves,p.push(E)}return p}function i(m,p){const b=p.length;let _=!1;for(let w=b-1,E=0;E<b;w=E++){let S=p[w],R=p[E],W=R.x-S.x,B=R.y-S.y;if(Math.abs(B)>Number.EPSILON){if(B<0&&(S=p[E],W=-W,R=p[w],B=-B),m.y<S.y||m.y>R.y)continue;if(m.y===S.y){if(m.x===S.x)return!0}else{const T=B*(m.x-S.x)-W*(m.y-S.y);if(T===0)return!0;if(T<0)continue;_=!_}}else{if(m.y!==S.y)continue;if(R.x<=m.x&&m.x<=S.x||S.x<=m.x&&m.x<=R.x)return!0}}return _}const r=er.isClockWise,s=this.subPaths;if(s.length===0)return[];if(t===!0)return e(s);let o,a,l;const c=[];if(s.length===1)return a=s[0],l=new eo,l.curves=a.curves,c.push(l),c;let h=!r(s[0].getPoints());h=n?!h:h;const u=[],d=[];let f=[],g=0,v;d[g]=void 0,f[g]=[];for(let m=0,p=s.length;m<p;m++)a=s[m],v=a.getPoints(),o=r(v),o=n?!o:o,o?(!h&&d[g]&&g++,d[g]={s:new eo,p:v},d[g].s.curves=a.curves,h&&g++,f[g]=[]):f[g].push({h:a,p:v[0]});if(!d[0])return e(s);if(d.length>1){let m=!1;const p=[];for(let b=0,_=d.length;b<_;b++)u[b]=[];for(let b=0,_=d.length;b<_;b++){const w=f[b];for(let E=0;E<w.length;E++){const S=w[E];let R=!0;for(let W=0;W<d.length;W++)i(S.p,d[W].p)&&(b!==W&&p.push({froms:b,tos:W,hole:E}),R?(R=!1,u[W].push(S)):m=!0);R&&u[b].push(S)}}p.length>0&&(m||(f=u))}let x;for(let m=0,p=d.length;m<p;m++){l=d[m].s,c.push(l),x=f[m];for(let b=0,_=x.length;b<_;b++)l.holes.push(x[b].h)}return c}});function Ug(n){this.type="Font",this.data=n}Object.assign(Ug.prototype,{isFont:!0,generateShapes:function(n,t){t===void 0&&(t=100);const e=[],i=z3(n,t,this.data);for(let r=0,s=i.length;r<s;r++)Array.prototype.push.apply(e,i[r].toShapes());return e}});function z3(n,t,e){const i=Array.from?Array.from(n):String(n).split(""),r=t/e.resolution,s=(e.boundingBox.yMax-e.boundingBox.yMin+e.underlineThickness)*r,o=[];let a=0,l=0;for(let c=0;c<i.length;c++){const h=i[c];if(h===`
`)a=0,l-=s;else{const u=U3(h,r,a,l,e);a+=u.offsetX,o.push(u.path)}}return o}function U3(n,t,e,i,r){const s=r.glyphs[n]||r.glyphs["?"];if(!s){console.error('THREE.Font: character "'+n+'" does not exists in font family '+r.familyName+".");return}const o=new zg;let a,l,c,h,u,d,f,g;if(s.o){const v=s._cachedOutline||(s._cachedOutline=s.o.split(" "));for(let x=0,m=v.length;x<m;)switch(v[x++]){case"m":a=v[x++]*t+e,l=v[x++]*t+i,o.moveTo(a,l);break;case"l":a=v[x++]*t+e,l=v[x++]*t+i,o.lineTo(a,l);break;case"q":c=v[x++]*t+e,h=v[x++]*t+i,u=v[x++]*t+e,d=v[x++]*t+i,o.quadraticCurveTo(u,d,c,h);break;case"b":c=v[x++]*t+e,h=v[x++]*t+i,u=v[x++]*t+e,d=v[x++]*t+i,f=v[x++]*t+e,g=v[x++]*t+i,o.bezierCurveTo(u,d,f,g,c,h);break}}return{offsetX:s.ha*t,path:o}}function Hg(n){ce.call(this,n)}Hg.prototype=Object.assign(Object.create(ce.prototype),{constructor:Hg,load:function(n,t,e,i){const r=this,s=new vi(this.manager);s.setPath(this.path),s.setRequestHeader(this.requestHeader),s.setWithCredentials(r.withCredentials),s.load(n,function(o){let a;try{a=JSON.parse(o)}catch{console.warn("THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead."),a=JSON.parse(o.substring(65,o.length-2))}const l=r.parse(a);t&&t(l)},e,i)},parse:function(n){return new Ug(n)}});let fc;const H3={getContext:function(){return fc===void 0&&(fc=new(window.AudioContext||window.webkitAudioContext)),fc},setContext:function(n){fc=n}};function Ku(n){ce.call(this,n)}Ku.prototype=Object.assign(Object.create(ce.prototype),{constructor:Ku,load:function(n,t,e,i){const r=this,s=new vi(r.manager);s.setResponseType("arraybuffer"),s.setPath(r.path),s.setRequestHeader(r.requestHeader),s.setWithCredentials(r.withCredentials),s.load(n,function(o){try{const a=o.slice(0);H3.getContext().decodeAudioData(a,function(c){t(c)})}catch(a){i?i(a):console.error(a),r.manager.itemError(n)}},e,i)}});function Gg(n,t,e){ti.call(this,void 0,e);const i=new Ot().set(n),r=new Ot().set(t),s=new H(i.r,i.g,i.b),o=new H(r.r,r.g,r.b),a=Math.sqrt(Math.PI),l=a*Math.sqrt(.75);this.sh.coefficients[0].copy(s).add(o).multiplyScalar(a),this.sh.coefficients[1].copy(s).sub(o).multiplyScalar(l)}Gg.prototype=Object.assign(Object.create(ti.prototype),{constructor:Gg,isHemisphereLightProbe:!0,copy:function(n){return ti.prototype.copy.call(this,n),this},toJSON:function(n){return ti.prototype.toJSON.call(this,n)}});function kg(n,t){ti.call(this,void 0,t);const e=new Ot().set(n);this.sh.coefficients[0].set(e.r,e.g,e.b).multiplyScalar(2*Math.sqrt(Math.PI))}kg.prototype=Object.assign(Object.create(ti.prototype),{constructor:kg,isAmbientLightProbe:!0,copy:function(n){return ti.prototype.copy.call(this,n),this},toJSON:function(n){return ti.prototype.toJSON.call(this,n)}});const Vg=new Wt,Wg=new Wt;function G3(){this.type="StereoCamera",this.aspect=1,this.eyeSep=.064,this.cameraL=new Be,this.cameraL.layers.enable(1),this.cameraL.matrixAutoUpdate=!1,this.cameraR=new Be,this.cameraR.layers.enable(2),this.cameraR.matrixAutoUpdate=!1,this._cache={focus:null,fov:null,aspect:null,near:null,far:null,zoom:null,eyeSep:null}}Object.assign(G3.prototype,{update:function(n){const t=this._cache;if(t.focus!==n.focus||t.fov!==n.fov||t.aspect!==n.aspect*this.aspect||t.near!==n.near||t.far!==n.far||t.zoom!==n.zoom||t.eyeSep!==this.eyeSep){t.focus=n.focus,t.fov=n.fov,t.aspect=n.aspect*this.aspect,t.near=n.near,t.far=n.far,t.zoom=n.zoom,t.eyeSep=this.eyeSep;const i=n.projectionMatrix.clone(),r=t.eyeSep/2,s=r*t.near/t.focus,o=t.near*Math.tan(Vt.DEG2RAD*t.fov*.5)/t.zoom;let a,l;Wg.elements[12]=-r,Vg.elements[12]=r,a=-o*t.aspect+s,l=o*t.aspect+s,i.elements[0]=2*t.near/(l-a),i.elements[8]=(l+a)/(l-a),this.cameraL.projectionMatrix.copy(i),a=-o*t.aspect-s,l=o*t.aspect-s,i.elements[0]=2*t.near/(l-a),i.elements[8]=(l+a)/(l-a),this.cameraR.projectionMatrix.copy(i)}this.cameraL.matrixWorld.copy(n.matrixWorld).multiply(Wg),this.cameraR.matrixWorld.copy(n.matrixWorld).multiply(Vg)}});class k3 extends Ut{constructor(t){super();this.type="Audio",this.listener=t,this.context=t.context,this.gain=this.context.createGain(),this.gain.connect(t.getInput()),this.autoplay=!1,this.buffer=null,this.detune=0,this.loop=!1,this.loopStart=0,this.loopEnd=0,this.offset=0,this.duration=void 0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.source=null,this.sourceType="empty",this._startedAt=0,this._progress=0,this._connected=!1,this.filters=[]}getOutput(){return this.gain}setNodeSource(t){return this.hasPlaybackControl=!1,this.sourceType="audioNode",this.source=t,this.connect(),this}setMediaElementSource(t){return this.hasPlaybackControl=!1,this.sourceType="mediaNode",this.source=this.context.createMediaElementSource(t),this.connect(),this}setMediaStreamSource(t){return this.hasPlaybackControl=!1,this.sourceType="mediaStreamNode",this.source=this.context.createMediaStreamSource(t),this.connect(),this}setBuffer(t){return this.buffer=t,this.sourceType="buffer",this.autoplay&&this.play(),this}play(t){if(t===void 0&&(t=0),this.isPlaying===!0){console.warn("THREE.Audio: Audio is already playing.");return}if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}this._startedAt=this.context.currentTime+t;const e=this.context.createBufferSource();return e.buffer=this.buffer,e.loop=this.loop,e.loopStart=this.loopStart,e.loopEnd=this.loopEnd,e.onended=this.onEnded.bind(this),e.start(this._startedAt,this._progress+this.offset,this.duration),this.isPlaying=!0,this.source=e,this.setDetune(this.detune),this.setPlaybackRate(this.playbackRate),this.connect()}pause(){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.isPlaying===!0&&(this._progress+=Math.max(this.context.currentTime-this._startedAt,0)*this.playbackRate,this.loop===!0&&(this._progress=this._progress%(this.duration||this.buffer.duration)),this.source.stop(),this.source.onended=null,this.isPlaying=!1),this}stop(){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this._progress=0,this.source.stop(),this.source.onended=null,this.isPlaying=!1,this}connect(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(let t=1,e=this.filters.length;t<e;t++)this.filters[t-1].connect(this.filters[t]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this._connected=!0,this}disconnect(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(let t=1,e=this.filters.length;t<e;t++)this.filters[t-1].disconnect(this.filters[t]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this._connected=!1,this}getFilters(){return this.filters}setFilters(t){return t||(t=[]),this._connected===!0?(this.disconnect(),this.filters=t.slice(),this.connect()):this.filters=t.slice(),this}setDetune(t){if(this.detune=t,this.source.detune!==void 0)return this.isPlaying===!0&&this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,.01),this}getDetune(){return this.detune}getFilter(){return this.getFilters()[0]}setFilter(t){return this.setFilters(t?[t]:[])}setPlaybackRate(t){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.playbackRate=t,this.isPlaying===!0&&this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,.01),this}getPlaybackRate(){return this.playbackRate}onEnded(){this.isPlaying=!1}getLoop(){return this.hasPlaybackControl===!1?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.loop}setLoop(t){if(this.hasPlaybackControl===!1){console.warn("THREE.Audio: this Audio has no playback control.");return}return this.loop=t,this.isPlaying===!0&&(this.source.loop=this.loop),this}setLoopStart(t){return this.loopStart=t,this}setLoopEnd(t){return this.loopEnd=t,this}getVolume(){return this.gain.gain.value}setVolume(t){return this.gain.gain.setTargetAtTime(t,this.context.currentTime,.01),this}}function $g(n,t,e){this.binding=n,this.valueSize=e;let i,r,s;switch(t){case"quaternion":i=this._slerp,r=this._slerpAdditive,s=this._setAdditiveIdentityQuaternion,this.buffer=new Float64Array(e*6),this._workIndex=5;break;case"string":case"bool":i=this._select,r=this._select,s=this._setAdditiveIdentityOther,this.buffer=new Array(e*5);break;default:i=this._lerp,r=this._lerpAdditive,s=this._setAdditiveIdentityNumeric,this.buffer=new Float64Array(e*5)}this._mixBufferRegion=i,this._mixBufferRegionAdditive=r,this._setIdentity=s,this._origIndex=3,this._addIndex=4,this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,this.useCount=0,this.referenceCount=0}Object.assign($g.prototype,{accumulate:function(n,t){const e=this.buffer,i=this.valueSize,r=n*i+i;let s=this.cumulativeWeight;if(s===0){for(let o=0;o!==i;++o)e[r+o]=e[o];s=t}else{s+=t;const o=t/s;this._mixBufferRegion(e,r,0,o,i)}this.cumulativeWeight=s},accumulateAdditive:function(n){const t=this.buffer,e=this.valueSize,i=e*this._addIndex;this.cumulativeWeightAdditive===0&&this._setIdentity(),this._mixBufferRegionAdditive(t,i,0,n,e),this.cumulativeWeightAdditive+=n},apply:function(n){const t=this.valueSize,e=this.buffer,i=n*t+t,r=this.cumulativeWeight,s=this.cumulativeWeightAdditive,o=this.binding;if(this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,r<1){const a=t*this._origIndex;this._mixBufferRegion(e,i,a,1-r,t)}s>0&&this._mixBufferRegionAdditive(e,i,this._addIndex*t,1,t);for(let a=t,l=t+t;a!==l;++a)if(e[a]!==e[a+t]){o.setValue(e,i);break}},saveOriginalState:function(){const n=this.binding,t=this.buffer,e=this.valueSize,i=e*this._origIndex;n.getValue(t,i);for(let r=e,s=i;r!==s;++r)t[r]=t[i+r%e];this._setIdentity(),this.cumulativeWeight=0,this.cumulativeWeightAdditive=0},restoreOriginalState:function(){const n=this.valueSize*3;this.binding.setValue(this.buffer,n)},_setAdditiveIdentityNumeric:function(){const n=this._addIndex*this.valueSize,t=n+this.valueSize;for(let e=n;e<t;e++)this.buffer[e]=0},_setAdditiveIdentityQuaternion:function(){this._setAdditiveIdentityNumeric(),this.buffer[this._addIndex*this.valueSize+3]=1},_setAdditiveIdentityOther:function(){const n=this._origIndex*this.valueSize,t=this._addIndex*this.valueSize;for(let e=0;e<this.valueSize;e++)this.buffer[t+e]=this.buffer[n+e]},_select:function(n,t,e,i,r){if(i>=.5)for(let s=0;s!==r;++s)n[t+s]=n[e+s]},_slerp:function(n,t,e,i){hn.slerpFlat(n,t,n,t,n,e,i)},_slerpAdditive:function(n,t,e,i,r){const s=this._workIndex*r;hn.multiplyQuaternionsFlat(n,s,n,t,n,e),hn.slerpFlat(n,t,n,t,n,s,i)},_lerp:function(n,t,e,i,r){const s=1-i;for(let o=0;o!==r;++o){const a=t+o;n[a]=n[a]*s+n[e+o]*i}},_lerpAdditive:function(n,t,e,i,r){for(let s=0;s!==r;++s){const o=t+s;n[o]=n[o]+n[e+s]*i}}});const td="\\[\\]\\.:\\/",V3=new RegExp("["+td+"]","g"),ed="[^"+td+"]",W3="[^"+td.replace("\\.","")+"]",$3=/((?:WC+[\/:])*)/.source.replace("WC",ed),q3=/(WCOD+)?/.source.replace("WCOD",W3),j3=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",ed),X3=/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",ed),Y3=new RegExp("^"+$3+q3+j3+X3+"$"),Z3=["material","materials","bones"];function qg(n,t,e){const i=e||Qe.parseTrackName(t);this._targetGroup=n,this._bindings=n.subscribe_(t,i)}Object.assign(qg.prototype,{getValue:function(n,t){this.bind();const e=this._targetGroup.nCachedObjects_,i=this._bindings[e];i!==void 0&&i.getValue(n,t)},setValue:function(n,t){const e=this._bindings;for(let i=this._targetGroup.nCachedObjects_,r=e.length;i!==r;++i)e[i].setValue(n,t)},bind:function(){const n=this._bindings;for(let t=this._targetGroup.nCachedObjects_,e=n.length;t!==e;++t)n[t].bind()},unbind:function(){const n=this._bindings;for(let t=this._targetGroup.nCachedObjects_,e=n.length;t!==e;++t)n[t].unbind()}});function Qe(n,t,e){this.path=t,this.parsedPath=e||Qe.parseTrackName(t),this.node=Qe.findNode(n,this.parsedPath.nodeName)||n,this.rootNode=n}Object.assign(Qe,{Composite:qg,create:function(n,t,e){return n&&n.isAnimationObjectGroup?new Qe.Composite(n,t,e):new Qe(n,t,e)},sanitizeNodeName:function(n){return n.replace(/\s/g,"_").replace(V3,"")},parseTrackName:function(n){const t=Y3.exec(n);if(!t)throw new Error("PropertyBinding: Cannot parse trackName: "+n);const e={nodeName:t[2],objectName:t[3],objectIndex:t[4],propertyName:t[5],propertyIndex:t[6]},i=e.nodeName&&e.nodeName.lastIndexOf(".");if(i!==void 0&&i!==-1){const r=e.nodeName.substring(i+1);Z3.indexOf(r)!==-1&&(e.nodeName=e.nodeName.substring(0,i),e.objectName=r)}if(e.propertyName===null||e.propertyName.length===0)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+n);return e},findNode:function(n,t){if(!t||t===""||t==="."||t===-1||t===n.name||t===n.uuid)return n;if(n.skeleton){const e=n.skeleton.getBoneByName(t);if(e!==void 0)return e}if(n.children){const e=function(r){for(let s=0;s<r.length;s++){const o=r[s];if(o.name===t||o.uuid===t)return o;const a=e(o.children);if(a)return a}return null},i=e(n.children);if(i)return i}return null}});Object.assign(Qe.prototype,{_getValue_unavailable:function(){},_setValue_unavailable:function(){},BindingType:{Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},Versioning:{None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},GetterByBindingType:[function(t,e){t[e]=this.node[this.propertyName]},function(t,e){const i=this.resolvedProperty;for(let r=0,s=i.length;r!==s;++r)t[e++]=i[r]},function(t,e){t[e]=this.resolvedProperty[this.propertyIndex]},function(t,e){this.resolvedProperty.toArray(t,e)}],SetterByBindingTypeAndVersioning:[[function(t,e){this.targetObject[this.propertyName]=t[e]},function(t,e){this.targetObject[this.propertyName]=t[e],this.targetObject.needsUpdate=!0},function(t,e){this.targetObject[this.propertyName]=t[e],this.targetObject.matrixWorldNeedsUpdate=!0}],[function(t,e){const i=this.resolvedProperty;for(let r=0,s=i.length;r!==s;++r)i[r]=t[e++]},function(t,e){const i=this.resolvedProperty;for(let r=0,s=i.length;r!==s;++r)i[r]=t[e++];this.targetObject.needsUpdate=!0},function(t,e){const i=this.resolvedProperty;for(let r=0,s=i.length;r!==s;++r)i[r]=t[e++];this.targetObject.matrixWorldNeedsUpdate=!0}],[function(t,e){this.resolvedProperty[this.propertyIndex]=t[e]},function(t,e){this.resolvedProperty[this.propertyIndex]=t[e],this.targetObject.needsUpdate=!0},function(t,e){this.resolvedProperty[this.propertyIndex]=t[e],this.targetObject.matrixWorldNeedsUpdate=!0}],[function(t,e){this.resolvedProperty.fromArray(t,e)},function(t,e){this.resolvedProperty.fromArray(t,e),this.targetObject.needsUpdate=!0},function(t,e){this.resolvedProperty.fromArray(t,e),this.targetObject.matrixWorldNeedsUpdate=!0}]],getValue:function(t,e){this.bind(),this.getValue(t,e)},setValue:function(t,e){this.bind(),this.setValue(t,e)},bind:function(){let n=this.node;const t=this.parsedPath,e=t.objectName,i=t.propertyName;let r=t.propertyIndex;if(n||(n=Qe.findNode(this.rootNode,t.nodeName)||this.rootNode,this.node=n),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!n){console.error("THREE.PropertyBinding: Trying to update node for track: "+this.path+" but it wasn't found.");return}if(e){let l=t.objectIndex;switch(e){case"materials":if(!n.material){console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);return}if(!n.material.materials){console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);return}n=n.material.materials;break;case"bones":if(!n.skeleton){console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);return}n=n.skeleton.bones;for(let c=0;c<n.length;c++)if(n[c].name===l){l=c;break}break;default:if(n[e]===void 0){console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);return}n=n[e]}if(l!==void 0){if(n[l]===void 0){console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,n);return}n=n[l]}}const s=n[i];if(s===void 0){const l=t.nodeName;console.error("THREE.PropertyBinding: Trying to update property for track: "+l+"."+i+" but it wasn't found.",n);return}let o=this.Versioning.None;this.targetObject=n,n.needsUpdate!==void 0?o=this.Versioning.NeedsUpdate:n.matrixWorldNeedsUpdate!==void 0&&(o=this.Versioning.MatrixWorldNeedsUpdate);let a=this.BindingType.Direct;if(r!==void 0){if(i==="morphTargetInfluences"){if(!n.geometry){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);return}if(n.geometry.isBufferGeometry){if(!n.geometry.morphAttributes){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);return}n.morphTargetDictionary[r]!==void 0&&(r=n.morphTargetDictionary[r])}else{console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.",this);return}}a=this.BindingType.ArrayElement,this.resolvedProperty=s,this.propertyIndex=r}else s.fromArray!==void 0&&s.toArray!==void 0?(a=this.BindingType.HasFromToArray,this.resolvedProperty=s):Array.isArray(s)?(a=this.BindingType.EntireArray,this.resolvedProperty=s):this.propertyName=i;this.getValue=this.GetterByBindingType[a],this.setValue=this.SetterByBindingTypeAndVersioning[a][o]},unbind:function(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}});Object.assign(Qe.prototype,{_getValue_unbound:Qe.prototype.getValue,_setValue_unbound:Qe.prototype.setValue});function J3(){this.uuid=Vt.generateUUID(),this._objects=Array.prototype.slice.call(arguments),this.nCachedObjects_=0;const n={};this._indicesByUUID=n;for(let e=0,i=arguments.length;e!==i;++e)n[arguments[e].uuid]=e;this._paths=[],this._parsedPaths=[],this._bindings=[],this._bindingsIndicesByPath={};const t=this;this.stats={objects:{get total(){return t._objects.length},get inUse(){return this.total-t.nCachedObjects_}},get bindingsPerObject(){return t._bindings.length}}}Object.assign(J3.prototype,{isAnimationObjectGroup:!0,add:function(){const n=this._objects,t=this._indicesByUUID,e=this._paths,i=this._parsedPaths,r=this._bindings,s=r.length;let o,a=n.length,l=this.nCachedObjects_;for(let c=0,h=arguments.length;c!==h;++c){const u=arguments[c],d=u.uuid;let f=t[d];if(f===void 0){f=a++,t[d]=f,n.push(u);for(let g=0,v=s;g!==v;++g)r[g].push(new Qe(u,e[g],i[g]))}else if(f<l){o=n[f];const g=--l,v=n[g];t[v.uuid]=f,n[f]=v,t[d]=g,n[g]=u;for(let x=0,m=s;x!==m;++x){const p=r[x],b=p[g];let _=p[f];p[f]=b,_===void 0&&(_=new Qe(u,e[x],i[x])),p[g]=_}}else n[f]!==o&&console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.")}this.nCachedObjects_=l},remove:function(){const n=this._objects,t=this._indicesByUUID,e=this._bindings,i=e.length;let r=this.nCachedObjects_;for(let s=0,o=arguments.length;s!==o;++s){const a=arguments[s],l=a.uuid,c=t[l];if(c!==void 0&&c>=r){const h=r++,u=n[h];t[u.uuid]=c,n[c]=u,t[l]=h,n[h]=a;for(let d=0,f=i;d!==f;++d){const g=e[d],v=g[h],x=g[c];g[c]=v,g[h]=x}}}this.nCachedObjects_=r},uncache:function(){const n=this._objects,t=this._indicesByUUID,e=this._bindings,i=e.length;let r=this.nCachedObjects_,s=n.length;for(let o=0,a=arguments.length;o!==a;++o){const l=arguments[o],c=l.uuid,h=t[c];if(h!==void 0)if(delete t[c],h<r){const u=--r,d=n[u],f=--s,g=n[f];t[d.uuid]=h,n[h]=d,t[g.uuid]=u,n[u]=g,n.pop();for(let v=0,x=i;v!==x;++v){const m=e[v],p=m[u],b=m[f];m[h]=p,m[u]=b,m.pop()}}else{const u=--s,d=n[u];u>0&&(t[d.uuid]=h),n[h]=d,n.pop();for(let f=0,g=i;f!==g;++f){const v=e[f];v[h]=v[u],v.pop()}}}this.nCachedObjects_=r},subscribe_:function(n,t){const e=this._bindingsIndicesByPath;let i=e[n];const r=this._bindings;if(i!==void 0)return r[i];const s=this._paths,o=this._parsedPaths,a=this._objects,l=a.length,c=this.nCachedObjects_,h=new Array(l);i=r.length,e[n]=i,s.push(n),o.push(t),r.push(h);for(let u=c,d=a.length;u!==d;++u){const f=a[u];h[u]=new Qe(f,n,t)}return h},unsubscribe_:function(n){const t=this._bindingsIndicesByPath,e=t[n];if(e!==void 0){const i=this._paths,r=this._parsedPaths,s=this._bindings,o=s.length-1,a=s[o],l=n[o];t[l]=e,s[e]=a,s.pop(),r[e]=r[o],r.pop(),i[e]=i[o],i.pop()}}});class Q3{constructor(t,e,i,r){this._mixer=t,this._clip=e,this._localRoot=i||null,this.blendMode=r||e.blendMode;const s=e.tracks,o=s.length,a=new Array(o),l={endingStart:ys,endingEnd:ys};for(let c=0;c!==o;++c){const h=s[c].createInterpolant(null);a[c]=h,h.settings=l}this._interpolantSettings=l,this._interpolants=a,this._propertyBindings=new Array(o),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=M1,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0}play(){return this._mixer._activateAction(this),this}stop(){return this._mixer._deactivateAction(this),this.reset()}reset(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()}isRunning(){return this.enabled&&!this.paused&&this.timeScale!==0&&this._startTime===null&&this._mixer._isActiveAction(this)}isScheduled(){return this._mixer._isActiveAction(this)}startAt(t){return this._startTime=t,this}setLoop(t,e){return this.loop=t,this.repetitions=e,this}setEffectiveWeight(t){return this.weight=t,this._effectiveWeight=this.enabled?t:0,this.stopFading()}getEffectiveWeight(){return this._effectiveWeight}fadeIn(t){return this._scheduleFading(t,0,1)}fadeOut(t){return this._scheduleFading(t,1,0)}crossFadeFrom(t,e,i){if(t.fadeOut(e),this.fadeIn(e),i){const r=this._clip.duration,s=t._clip.duration,o=s/r,a=r/s;t.warp(1,o,e),this.warp(a,1,e)}return this}crossFadeTo(t,e,i){return t.crossFadeFrom(this,e,i)}stopFading(){const t=this._weightInterpolant;return t!==null&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(t)),this}setEffectiveTimeScale(t){return this.timeScale=t,this._effectiveTimeScale=this.paused?0:t,this.stopWarping()}getEffectiveTimeScale(){return this._effectiveTimeScale}setDuration(t){return this.timeScale=this._clip.duration/t,this.stopWarping()}syncWith(t){return this.time=t.time,this.timeScale=t.timeScale,this.stopWarping()}halt(t){return this.warp(this._effectiveTimeScale,0,t)}warp(t,e,i){const r=this._mixer,s=r.time,o=this.timeScale;let a=this._timeScaleInterpolant;a===null&&(a=r._lendControlInterpolant(),this._timeScaleInterpolant=a);const l=a.parameterPositions,c=a.sampleValues;return l[0]=s,l[1]=s+i,c[0]=t/o,c[1]=e/o,this}stopWarping(){const t=this._timeScaleInterpolant;return t!==null&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(t)),this}getMixer(){return this._mixer}getClip(){return this._clip}getRoot(){return this._localRoot||this._mixer._root}_update(t,e,i,r){if(!this.enabled){this._updateWeight(t);return}const s=this._startTime;if(s!==null){const l=(t-s)*i;if(l<0||i===0)return;this._startTime=null,e=i*l}e*=this._updateTimeScale(t);const o=this._updateTime(e),a=this._updateWeight(t);if(a>0){const l=this._interpolants,c=this._propertyBindings;switch(this.blendMode){case um:for(let h=0,u=l.length;h!==u;++h)l[h].evaluate(o),c[h].accumulateAdditive(a);break;case Yh:default:for(let h=0,u=l.length;h!==u;++h)l[h].evaluate(o),c[h].accumulate(r,a)}}}_updateWeight(t){let e=0;if(this.enabled){e=this.weight;const i=this._weightInterpolant;if(i!==null){const r=i.evaluate(t)[0];e*=r,t>i.parameterPositions[1]&&(this.stopFading(),r===0&&(this.enabled=!1))}}return this._effectiveWeight=e,e}_updateTimeScale(t){let e=0;if(!this.paused){e=this.timeScale;const i=this._timeScaleInterpolant;i!==null&&(e*=i.evaluate(t)[0],t>i.parameterPositions[1]&&(this.stopWarping(),e===0?this.paused=!0:this.timeScale=e))}return this._effectiveTimeScale=e,e}_updateTime(t){const e=this._clip.duration,i=this.loop;let r=this.time+t,s=this._loopCount;const o=i===w1;if(t===0)return s===-1?r:o&&(s&1)==1?e-r:r;if(i===b1){s===-1&&(this._loopCount=0,this._setEndings(!0,!0,!1));t:{if(r>=e)r=e;else if(r<0)r=0;else{this.time=r;break t}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this.time=r,this._mixer.dispatchEvent({type:"finished",action:this,direction:t<0?-1:1})}}else{if(s===-1&&(t>=0?(s=0,this._setEndings(!0,this.repetitions===0,o)):this._setEndings(this.repetitions===0,!0,o)),r>=e||r<0){const a=Math.floor(r/e);r-=e*a,s+=Math.abs(a);const l=this.repetitions-s;if(l<=0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,r=t>0?e:0,this.time=r,this._mixer.dispatchEvent({type:"finished",action:this,direction:t>0?1:-1});else{if(l===1){const c=t<0;this._setEndings(c,!c,o)}else this._setEndings(!1,!1,o);this._loopCount=s,this.time=r,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:a})}}else this.time=r;if(o&&(s&1)==1)return e-r}return r}_setEndings(t,e,i){const r=this._interpolantSettings;i?(r.endingStart=_s,r.endingEnd=_s):(t?r.endingStart=this.zeroSlopeAtStart?_s:ys:r.endingStart=wl,e?r.endingEnd=this.zeroSlopeAtEnd?_s:ys:r.endingEnd=wl)}_scheduleFading(t,e,i){const r=this._mixer,s=r.time;let o=this._weightInterpolant;o===null&&(o=r._lendControlInterpolant(),this._weightInterpolant=o);const a=o.parameterPositions,l=o.sampleValues;return a[0]=s,l[0]=e,a[1]=s+t,l[1]=i,this}}function jg(n){this._root=n,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1}jg.prototype=Object.assign(Object.create(ci.prototype),{constructor:jg,_bindAction:function(n,t){const e=n._localRoot||this._root,i=n._clip.tracks,r=i.length,s=n._propertyBindings,o=n._interpolants,a=e.uuid,l=this._bindingsByRootAndName;let c=l[a];c===void 0&&(c={},l[a]=c);for(let h=0;h!==r;++h){const u=i[h],d=u.name;let f=c[d];if(f!==void 0)s[h]=f;else{if(f=s[h],f!==void 0){f._cacheIndex===null&&(++f.referenceCount,this._addInactiveBinding(f,a,d));continue}const g=t&&t._propertyBindings[h].binding.parsedPath;f=new $g(Qe.create(e,d,g),u.ValueTypeName,u.getValueSize()),++f.referenceCount,this._addInactiveBinding(f,a,d),s[h]=f}o[h].resultBuffer=f.buffer}},_activateAction:function(n){if(!this._isActiveAction(n)){if(n._cacheIndex===null){const e=(n._localRoot||this._root).uuid,i=n._clip.uuid,r=this._actionsByClip[i];this._bindAction(n,r&&r.knownActions[0]),this._addInactiveAction(n,i,e)}const t=n._propertyBindings;for(let e=0,i=t.length;e!==i;++e){const r=t[e];r.useCount++==0&&(this._lendBinding(r),r.saveOriginalState())}this._lendAction(n)}},_deactivateAction:function(n){if(this._isActiveAction(n)){const t=n._propertyBindings;for(let e=0,i=t.length;e!==i;++e){const r=t[e];--r.useCount==0&&(r.restoreOriginalState(),this._takeBackBinding(r))}this._takeBackAction(n)}},_initMemoryManager:function(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;const n=this;this.stats={actions:{get total(){return n._actions.length},get inUse(){return n._nActiveActions}},bindings:{get total(){return n._bindings.length},get inUse(){return n._nActiveBindings}},controlInterpolants:{get total(){return n._controlInterpolants.length},get inUse(){return n._nActiveControlInterpolants}}}},_isActiveAction:function(n){const t=n._cacheIndex;return t!==null&&t<this._nActiveActions},_addInactiveAction:function(n,t,e){const i=this._actions,r=this._actionsByClip;let s=r[t];if(s===void 0)s={knownActions:[n],actionByRoot:{}},n._byClipCacheIndex=0,r[t]=s;else{const o=s.knownActions;n._byClipCacheIndex=o.length,o.push(n)}n._cacheIndex=i.length,i.push(n),s.actionByRoot[e]=n},_removeInactiveAction:function(n){const t=this._actions,e=t[t.length-1],i=n._cacheIndex;e._cacheIndex=i,t[i]=e,t.pop(),n._cacheIndex=null;const r=n._clip.uuid,s=this._actionsByClip,o=s[r],a=o.knownActions,l=a[a.length-1],c=n._byClipCacheIndex;l._byClipCacheIndex=c,a[c]=l,a.pop(),n._byClipCacheIndex=null;const h=o.actionByRoot,u=(n._localRoot||this._root).uuid;delete h[u],a.length===0&&delete s[r],this._removeInactiveBindingsForAction(n)},_removeInactiveBindingsForAction:function(n){const t=n._propertyBindings;for(let e=0,i=t.length;e!==i;++e){const r=t[e];--r.referenceCount==0&&this._removeInactiveBinding(r)}},_lendAction:function(n){const t=this._actions,e=n._cacheIndex,i=this._nActiveActions++,r=t[i];n._cacheIndex=i,t[i]=n,r._cacheIndex=e,t[e]=r},_takeBackAction:function(n){const t=this._actions,e=n._cacheIndex,i=--this._nActiveActions,r=t[i];n._cacheIndex=i,t[i]=n,r._cacheIndex=e,t[e]=r},_addInactiveBinding:function(n,t,e){const i=this._bindingsByRootAndName,r=this._bindings;let s=i[t];s===void 0&&(s={},i[t]=s),s[e]=n,n._cacheIndex=r.length,r.push(n)},_removeInactiveBinding:function(n){const t=this._bindings,e=n.binding,i=e.rootNode.uuid,r=e.path,s=this._bindingsByRootAndName,o=s[i],a=t[t.length-1],l=n._cacheIndex;a._cacheIndex=l,t[l]=a,t.pop(),delete o[r],Object.keys(o).length===0&&delete s[i]},_lendBinding:function(n){const t=this._bindings,e=n._cacheIndex,i=this._nActiveBindings++,r=t[i];n._cacheIndex=i,t[i]=n,r._cacheIndex=e,t[e]=r},_takeBackBinding:function(n){const t=this._bindings,e=n._cacheIndex,i=--this._nActiveBindings,r=t[i];n._cacheIndex=i,t[i]=n,r._cacheIndex=e,t[e]=r},_lendControlInterpolant:function(){const n=this._controlInterpolants,t=this._nActiveControlInterpolants++;let e=n[t];return e===void 0&&(e=new ac(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer),e.__cacheIndex=t,n[t]=e),e},_takeBackControlInterpolant:function(n){const t=this._controlInterpolants,e=n.__cacheIndex,i=--this._nActiveControlInterpolants,r=t[i];n.__cacheIndex=i,t[i]=n,r.__cacheIndex=e,t[e]=r},_controlInterpolantsResultBuffer:new Float32Array(1),clipAction:function(n,t,e){const i=t||this._root,r=i.uuid;let s=typeof n=="string"?Xn.findByName(i,n):n;const o=s!==null?s.uuid:n,a=this._actionsByClip[o];let l=null;if(e===void 0&&(s!==null?e=s.blendMode:e=Yh),a!==void 0){const h=a.actionByRoot[r];if(h!==void 0&&h.blendMode===e)return h;l=a.knownActions[0],s===null&&(s=l._clip)}if(s===null)return null;const c=new Q3(this,s,t,e);return this._bindAction(c,l),this._addInactiveAction(c,o,r),c},existingAction:function(n,t){const e=t||this._root,i=e.uuid,r=typeof n=="string"?Xn.findByName(e,n):n,s=r?r.uuid:n,o=this._actionsByClip[s];return o!==void 0&&o.actionByRoot[i]||null},stopAllAction:function(){const n=this._actions,t=this._nActiveActions;for(let e=t-1;e>=0;--e)n[e].stop();return this},update:function(n){n*=this.timeScale;const t=this._actions,e=this._nActiveActions,i=this.time+=n,r=Math.sign(n),s=this._accuIndex^=1;for(let l=0;l!==e;++l)t[l]._update(i,n,r,s);const o=this._bindings,a=this._nActiveBindings;for(let l=0;l!==a;++l)o[l].apply(s);return this},setTime:function(n){this.time=0;for(let t=0;t<this._actions.length;t++)this._actions[t].time=0;return this.update(n)},getRoot:function(){return this._root},uncacheClip:function(n){const t=this._actions,e=n.uuid,i=this._actionsByClip,r=i[e];if(r!==void 0){const s=r.knownActions;for(let o=0,a=s.length;o!==a;++o){const l=s[o];this._deactivateAction(l);const c=l._cacheIndex,h=t[t.length-1];l._cacheIndex=null,l._byClipCacheIndex=null,h._cacheIndex=c,t[c]=h,t.pop(),this._removeInactiveBindingsForAction(l)}delete i[e]}},uncacheRoot:function(n){const t=n.uuid,e=this._actionsByClip;for(const s in e){const o=e[s].actionByRoot,a=o[t];a!==void 0&&(this._deactivateAction(a),this._removeInactiveAction(a))}const i=this._bindingsByRootAndName,r=i[t];if(r!==void 0)for(const s in r){const o=r[s];o.restoreOriginalState(),this._removeInactiveBinding(o)}},uncacheAction:function(n,t){const e=this.existingAction(n,t);e!==null&&(this._deactivateAction(e),this._removeInactiveAction(e))}});class nd{constructor(t){typeof t=="string"&&(console.warn("THREE.Uniform: Type parameter is no longer needed."),t=arguments[1]),this.value=t}clone(){return new nd(this.value.clone===void 0?this.value:this.value.clone())}}function Xg(n,t,e){_n.call(this,n,t),this.meshPerAttribute=e||1}Xg.prototype=Object.assign(Object.create(_n.prototype),{constructor:Xg,isInstancedInterleavedBuffer:!0,copy:function(n){return _n.prototype.copy.call(this,n),this.meshPerAttribute=n.meshPerAttribute,this},clone:function(n){const t=_n.prototype.clone.call(this,n);return t.meshPerAttribute=this.meshPerAttribute,t},toJSON:function(n){const t=_n.prototype.toJSON.call(this,n);return t.isInstancedInterleavedBuffer=!0,t.meshPerAttribute=this.meshPerAttribute,t}});function Yg(n,t,e,i,r){this.buffer=n,this.type=t,this.itemSize=e,this.elementSize=i,this.count=r,this.version=0}Object.defineProperty(Yg.prototype,"needsUpdate",{set:function(n){n===!0&&this.version++}});Object.assign(Yg.prototype,{isGLBufferAttribute:!0,setBuffer:function(n){return this.buffer=n,this},setType:function(n,t){return this.type=n,this.elementSize=t,this},setItemSize:function(n){return this.itemSize=n,this},setCount:function(n){return this.count=n,this}});function id(n,t,e,i){this.ray=new jo(n,t),this.near=e||0,this.far=i||1/0,this.camera=null,this.layers=new xm,this.params={Mesh:{},Line:{threshold:1},LOD:{},Points:{threshold:1},Sprite:{}},Object.defineProperties(this.params,{PointCloud:{get:function(){return console.warn("THREE.Raycaster: params.PointCloud has been renamed to params.Points."),this.Points}}})}function Zg(n,t){return n.distance-t.distance}function rd(n,t,e,i){if(n.layers.test(t.layers)&&n.raycast(t,e),i===!0){const r=n.children;for(let s=0,o=r.length;s<o;s++)rd(r[s],t,e,!0)}}Object.assign(id.prototype,{set:function(n,t){this.ray.set(n,t)},setFromCamera:function(n,t){t&&t.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(t.matrixWorld),this.ray.direction.set(n.x,n.y,.5).unproject(t).sub(this.ray.origin).normalize(),this.camera=t):t&&t.isOrthographicCamera?(this.ray.origin.set(n.x,n.y,(t.near+t.far)/(t.near-t.far)).unproject(t),this.ray.direction.set(0,0,-1).transformDirection(t.matrixWorld),this.camera=t):console.error("THREE.Raycaster: Unsupported camera type.")},intersectObject:function(n,t,e){const i=e||[];return rd(n,this,i,t),i.sort(Zg),i},intersectObjects:function(n,t,e){const i=e||[];if(Array.isArray(n)===!1)return console.warn("THREE.Raycaster.intersectObjects: objects is not an Array."),i;for(let r=0,s=n.length;r<s;r++)rd(n[r],this,i,t);return i.sort(Zg),i}});const Jg=new wt;class K3{constructor(t,e){Object.defineProperty(this,"isBox2",{value:!0}),this.min=t!==void 0?t:new wt(1/0,1/0),this.max=e!==void 0?e:new wt(-1/0,-1/0)}set(t,e){return this.min.copy(t),this.max.copy(e),this}setFromPoints(t){this.makeEmpty();for(let e=0,i=t.length;e<i;e++)this.expandByPoint(t[e]);return this}setFromCenterAndSize(t,e){const i=Jg.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(i),this.max.copy(t).add(i),this}clone(){return new this.constructor().copy(this)}copy(t){return this.min.copy(t.min),this.max.copy(t.max),this}makeEmpty(){return this.min.x=this.min.y=1/0,this.max.x=this.max.y=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y}getCenter(t){return t===void 0&&(console.warn("THREE.Box2: .getCenter() target is now required"),t=new wt),this.isEmpty()?t.set(0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(t){return t===void 0&&(console.warn("THREE.Box2: .getSize() target is now required"),t=new wt),this.isEmpty()?t.set(0,0):t.subVectors(this.max,this.min)}expandByPoint(t){return this.min.min(t),this.max.max(t),this}expandByVector(t){return this.min.sub(t),this.max.add(t),this}expandByScalar(t){return this.min.addScalar(-t),this.max.addScalar(t),this}containsPoint(t){return!(t.x<this.min.x||t.x>this.max.x||t.y<this.min.y||t.y>this.max.y)}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y}getParameter(t,e){return e===void 0&&(console.warn("THREE.Box2: .getParameter() target is now required"),e=new wt),e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y))}intersectsBox(t){return!(t.max.x<this.min.x||t.min.x>this.max.x||t.max.y<this.min.y||t.min.y>this.max.y)}clampPoint(t,e){return e===void 0&&(console.warn("THREE.Box2: .clampPoint() target is now required"),e=new wt),e.copy(t).clamp(this.min,this.max)}distanceToPoint(t){return Jg.copy(t).clamp(this.min,this.max).sub(t).length()}intersect(t){return this.min.max(t.min),this.max.min(t.max),this}union(t){return this.min.min(t.min),this.max.max(t.max),this}translate(t){return this.min.add(t),this.max.add(t),this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}function pc(n){Ut.call(this),this.material=n,this.render=function(){},this.hasPositions=!1,this.hasNormals=!1,this.hasColors=!1,this.hasUvs=!1,this.positionArray=null,this.normalArray=null,this.colorArray=null,this.uvArray=null,this.count=0}pc.prototype=Object.create(Ut.prototype);pc.prototype.constructor=pc;pc.prototype.isImmediateRenderObject=!0;const ir=new H,mc=new Wt,sd=new Wt;class tC extends Jl{constructor(t){const e=Qg(t),i=new le,r=[],s=[],o=new Ot(0,0,1),a=new Ot(0,1,0);for(let c=0;c<e.length;c++){const h=e[c];h.parent&&h.parent.isBone&&(r.push(0,0,0),r.push(0,0,0),s.push(o.r,o.g,o.b),s.push(a.r,a.g,a.b))}i.setAttribute("position",new ee(r,3)),i.setAttribute("color",new ee(s,3));const l=new bn({vertexColors:!0,depthTest:!1,depthWrite:!1,toneMapped:!1,transparent:!0});super(i,l);this.type="SkeletonHelper",this.isSkeletonHelper=!0,this.root=t,this.bones=e,this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1}updateMatrixWorld(t){const e=this.bones,i=this.geometry,r=i.getAttribute("position");sd.getInverse(this.root.matrixWorld);for(let s=0,o=0;s<e.length;s++){const a=e[s];a.parent&&a.parent.isBone&&(mc.multiplyMatrices(sd,a.matrixWorld),ir.setFromMatrixPosition(mc),r.setXYZ(o,ir.x,ir.y,ir.z),mc.multiplyMatrices(sd,a.parent.matrixWorld),ir.setFromMatrixPosition(mc),r.setXYZ(o+1,ir.x,ir.y,ir.z),o+=2)}i.getAttribute("position").needsUpdate=!0,super.updateMatrixWorld(t)}}function Qg(n){const t=[];n&&n.isBone&&t.push(n);for(let e=0;e<n.children.length;e++)t.push.apply(t,Qg(n.children[e]));return t}class eC extends Jl{constructor(t,e,i,r){t=t||10,e=e||10,i=new Ot(i!==void 0?i:4473924),r=new Ot(r!==void 0?r:8947848);const s=e/2,o=t/e,a=t/2,l=[],c=[];for(let d=0,f=0,g=-a;d<=e;d++,g+=o){l.push(-a,0,g,a,0,g),l.push(g,0,-a,g,0,a);const v=d===s?i:r;v.toArray(c,f),f+=3,v.toArray(c,f),f+=3,v.toArray(c,f),f+=3,v.toArray(c,f),f+=3}const h=new le;h.setAttribute("position",new ee(l,3)),h.setAttribute("color",new ee(c,3));const u=new bn({vertexColors:!0,toneMapped:!1});super(h,u);this.type="GridHelper"}}zt.create=function(n,t){return console.log("THREE.Curve.create() has been deprecated"),n.prototype=Object.create(zt.prototype),n.prototype.constructor=n,n.prototype.getPoint=t,n};Object.assign(nr.prototype,{createPointsGeometry:function(n){console.warn("THREE.CurvePath: .createPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");const t=this.getPoints(n);return this.createGeometry(t)},createSpacedPointsGeometry:function(n){console.warn("THREE.CurvePath: .createSpacedPointsGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");const t=this.getSpacedPoints(n);return this.createGeometry(t)},createGeometry:function(n){console.warn("THREE.CurvePath: .createGeometry() has been removed. Use new THREE.Geometry().setFromPoints( points ) instead.");const t=new Fn;for(let e=0,i=n.length;e<i;e++){const r=n[e];t.vertices.push(new H(r.x,r.y,r.z||0))}return t}});Object.assign(Kn.prototype,{fromPoints:function(n){return console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints()."),this.setFromPoints(n)}});function Kg(n){console.warn("THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead."),On.call(this,n),this.type="catmullrom"}Kg.prototype=Object.create(On.prototype);Object.assign(Kg.prototype,{initFromArray:function(){console.error("THREE.Spline: .initFromArray() has been removed.")},getControlPointsArray:function(){console.error("THREE.Spline: .getControlPointsArray() has been removed.")},reparametrizeByArcLength:function(){console.error("THREE.Spline: .reparametrizeByArcLength() has been removed.")}});eC.prototype.setColors=function(){console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.")};tC.prototype.update=function(){console.error("THREE.SkeletonHelper: update() no longer needs to be called.")};Object.assign(ce.prototype,{extractUrlBase:function(n){return console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead."),O3.extractUrlBase(n)}});ce.Handlers={add:function(){console.error("THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.")},get:function(){console.error("THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.")}};Object.assign(K3.prototype,{center:function(n){return console.warn("THREE.Box2: .center() has been renamed to .getCenter()."),this.getCenter(n)},empty:function(){return console.warn("THREE.Box2: .empty() has been renamed to .isEmpty()."),this.isEmpty()},isIntersectionBox:function(n){return console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(n)},size:function(n){return console.warn("THREE.Box2: .size() has been renamed to .getSize()."),this.getSize(n)}});Object.assign(ki.prototype,{center:function(n){return console.warn("THREE.Box3: .center() has been renamed to .getCenter()."),this.getCenter(n)},empty:function(){return console.warn("THREE.Box3: .empty() has been renamed to .isEmpty()."),this.isEmpty()},isIntersectionBox:function(n){return console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(n)},isIntersectionSphere:function(n){return console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(n)},size:function(n){return console.warn("THREE.Box3: .size() has been renamed to .getSize()."),this.getSize(n)}});Object.assign($i.prototype,{empty:function(){return console.warn("THREE.Sphere: .empty() has been renamed to .isEmpty()."),this.isEmpty()}});Hl.prototype.setFromMatrix=function(n){return console.warn("THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix()."),this.setFromProjectionMatrix(n)};Object.assign(Vt,{random16:function(){return console.warn("THREE.Math: .random16() has been deprecated. Use Math.random() instead."),Math.random()},nearestPowerOfTwo:function(n){return console.warn("THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo()."),Vt.floorPowerOfTwo(n)},nextPowerOfTwo:function(n){return console.warn("THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo()."),Vt.ceilPowerOfTwo(n)}});Object.assign(nn.prototype,{flattenToArrayOffset:function(n,t){return console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(n,t)},multiplyVector3:function(n){return console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead."),n.applyMatrix3(this)},multiplyVector3Array:function(){console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.")},applyToBufferAttribute:function(n){return console.warn("THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead."),n.applyMatrix3(this)},applyToVector3Array:function(){console.error("THREE.Matrix3: .applyToVector3Array() has been removed.")}});Object.assign(Wt.prototype,{extractPosition:function(n){return console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition()."),this.copyPosition(n)},flattenToArrayOffset:function(n,t){return console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(n,t)},getPosition:function(){return console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead."),new H().setFromMatrixColumn(this,3)},setRotationFromQuaternion:function(n){return console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion()."),this.makeRotationFromQuaternion(n)},multiplyToArray:function(){console.warn("THREE.Matrix4: .multiplyToArray() has been removed.")},multiplyVector3:function(n){return console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead."),n.applyMatrix4(this)},multiplyVector4:function(n){return console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead."),n.applyMatrix4(this)},multiplyVector3Array:function(){console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.")},rotateAxis:function(n){console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead."),n.transformDirection(this)},crossVector:function(n){return console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead."),n.applyMatrix4(this)},translate:function(){console.error("THREE.Matrix4: .translate() has been removed.")},rotateX:function(){console.error("THREE.Matrix4: .rotateX() has been removed.")},rotateY:function(){console.error("THREE.Matrix4: .rotateY() has been removed.")},rotateZ:function(){console.error("THREE.Matrix4: .rotateZ() has been removed.")},rotateByAxis:function(){console.error("THREE.Matrix4: .rotateByAxis() has been removed.")},applyToBufferAttribute:function(n){return console.warn("THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead."),n.applyMatrix4(this)},applyToVector3Array:function(){console.error("THREE.Matrix4: .applyToVector3Array() has been removed.")},makeFrustum:function(n,t,e,i,r,s){return console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead."),this.makePerspective(n,t,i,e,r,s)}});fi.prototype.isIntersectionLine=function(n){return console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine()."),this.intersectsLine(n)};hn.prototype.multiplyVector3=function(n){return console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead."),n.applyQuaternion(this)};Object.assign(jo.prototype,{isIntersectionBox:function(n){return console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(n)},isIntersectionPlane:function(n){return console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane()."),this.intersectsPlane(n)},isIntersectionSphere:function(n){return console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(n)}});Object.assign(We.prototype,{area:function(){return console.warn("THREE.Triangle: .area() has been renamed to .getArea()."),this.getArea()},barycoordFromPoint:function(n,t){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),this.getBarycoord(n,t)},midpoint:function(n){return console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint()."),this.getMidpoint(n)},normal:function(n){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),this.getNormal(n)},plane:function(n){return console.warn("THREE.Triangle: .plane() has been renamed to .getPlane()."),this.getPlane(n)}});Object.assign(We,{barycoordFromPoint:function(n,t,e,i,r){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),We.getBarycoord(n,t,e,i,r)},normal:function(n,t,e,i){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),We.getNormal(n,t,e,i)}});Object.assign(eo.prototype,{extractAllPoints:function(n){return console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead."),this.extractPoints(n)},extrude:function(n){return console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead."),new v3(this,n)},makeGeometry:function(n){return console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead."),new b3(this,n)}});Object.assign(wt.prototype,{fromAttribute:function(n,t,e){return console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(n,t,e)},distanceToManhattan:function(n){return console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(n)},lengthManhattan:function(){return console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()}});Object.assign(H.prototype,{setEulerFromRotationMatrix:function(){console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.")},setEulerFromQuaternion:function(){console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.")},getPositionFromMatrix:function(n){return console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition()."),this.setFromMatrixPosition(n)},getScaleFromMatrix:function(n){return console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale()."),this.setFromMatrixScale(n)},getColumnFromMatrix:function(n,t){return console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn()."),this.setFromMatrixColumn(t,n)},applyProjection:function(n){return console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead."),this.applyMatrix4(n)},fromAttribute:function(n,t,e){return console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(n,t,e)},distanceToManhattan:function(n){return console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(n)},lengthManhattan:function(){return console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()}});Object.assign(ae.prototype,{fromAttribute:function(n,t,e){return console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(n,t,e)},lengthManhattan:function(){return console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()}});Object.assign(Fn.prototype,{computeTangents:function(){console.error("THREE.Geometry: .computeTangents() has been removed.")},computeLineDistances:function(){console.error("THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.")},applyMatrix:function(n){return console.warn("THREE.Geometry: .applyMatrix() has been renamed to .applyMatrix4()."),this.applyMatrix4(n)}});Object.assign(Ut.prototype,{getChildByName:function(n){return console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName()."),this.getObjectByName(n)},renderDepth:function(){console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.")},translate:function(n,t){return console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead."),this.translateOnAxis(t,n)},getWorldRotation:function(){console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.")},applyMatrix:function(n){return console.warn("THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4()."),this.applyMatrix4(n)}});Object.defineProperties(Ut.prototype,{eulerOrder:{get:function(){return console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order},set:function(n){console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order=n}},useQuaternion:{get:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")},set:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")}}});Object.assign($e.prototype,{setDrawMode:function(){console.error("THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.")}});Object.defineProperties($e.prototype,{drawMode:{get:function(){return console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode."),S1},set:function(){console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.")}}});Object.defineProperties(Au.prototype,{objects:{get:function(){return console.warn("THREE.LOD: .objects has been renamed to .levels."),this.levels}}});Object.defineProperty(Cu.prototype,"useVertexTexture",{get:function(){console.warn("THREE.Skeleton: useVertexTexture has been removed.")},set:function(){console.warn("THREE.Skeleton: useVertexTexture has been removed.")}});Lu.prototype.initBones=function(){console.error("THREE.SkinnedMesh: initBones() has been removed.")};Object.defineProperty(zt.prototype,"__arcLengthDivisions",{get:function(){return console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions."),this.arcLengthDivisions},set:function(n){console.warn("THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions."),this.arcLengthDivisions=n}});Be.prototype.setLens=function(n,t){console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup."),t!==void 0&&(this.filmGauge=t),this.setFocalLength(n)};Object.defineProperties(me.prototype,{onlyShadow:{set:function(){console.warn("THREE.Light: .onlyShadow has been removed.")}},shadowCameraFov:{set:function(n){console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov."),this.shadow.camera.fov=n}},shadowCameraLeft:{set:function(n){console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left."),this.shadow.camera.left=n}},shadowCameraRight:{set:function(n){console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right."),this.shadow.camera.right=n}},shadowCameraTop:{set:function(n){console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top."),this.shadow.camera.top=n}},shadowCameraBottom:{set:function(n){console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom."),this.shadow.camera.bottom=n}},shadowCameraNear:{set:function(n){console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near."),this.shadow.camera.near=n}},shadowCameraFar:{set:function(n){console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far."),this.shadow.camera.far=n}},shadowCameraVisible:{set:function(){console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.")}},shadowBias:{set:function(n){console.warn("THREE.Light: .shadowBias is now .shadow.bias."),this.shadow.bias=n}},shadowDarkness:{set:function(){console.warn("THREE.Light: .shadowDarkness has been removed.")}},shadowMapWidth:{set:function(n){console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width."),this.shadow.mapSize.width=n}},shadowMapHeight:{set:function(n){console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height."),this.shadow.mapSize.height=n}}});Object.defineProperties(kt.prototype,{length:{get:function(){return console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead."),this.array.length}},dynamic:{get:function(){return console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."),this.usage===Wo},set:function(){console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."),this.setUsage(Wo)}}});Object.assign(kt.prototype,{setDynamic:function(n){return console.warn("THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead."),this.setUsage(n===!0?Wo:Sl),this},copyIndicesArray:function(){console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.")},setArray:function(){console.error("THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")}});Object.assign(le.prototype,{addIndex:function(n){console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex()."),this.setIndex(n)},addAttribute:function(n,t){return console.warn("THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute()."),!(t&&t.isBufferAttribute)&&!(t&&t.isInterleavedBufferAttribute)?(console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."),this.setAttribute(n,new kt(arguments[1],arguments[2]))):n==="index"?(console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."),this.setIndex(t),this):this.setAttribute(n,t)},addDrawCall:function(n,t,e){e!==void 0&&console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset."),console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup()."),this.addGroup(n,t)},clearDrawCalls:function(){console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups()."),this.clearGroups()},computeTangents:function(){console.warn("THREE.BufferGeometry: .computeTangents() has been removed.")},computeOffsets:function(){console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.")},removeAttribute:function(n){return console.warn("THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute()."),this.deleteAttribute(n)},applyMatrix:function(n){return console.warn("THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4()."),this.applyMatrix4(n)}});Object.defineProperties(le.prototype,{drawcalls:{get:function(){return console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups."),this.groups}},offsets:{get:function(){return console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups."),this.groups}}});Object.defineProperties(uc.prototype,{maxInstancedCount:{get:function(){return console.warn("THREE.InstancedBufferGeometry: .maxInstancedCount has been renamed to .instanceCount."),this.instanceCount},set:function(n){console.warn("THREE.InstancedBufferGeometry: .maxInstancedCount has been renamed to .instanceCount."),this.instanceCount=n}}});Object.defineProperties(id.prototype,{linePrecision:{get:function(){return console.warn("THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead."),this.params.Line.threshold},set:function(n){console.warn("THREE.Raycaster: .linePrecision has been deprecated. Use .params.Line.threshold instead."),this.params.Line.threshold=n}}});Object.defineProperties(_n.prototype,{dynamic:{get:function(){return console.warn("THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead."),this.usage===Wo},set:function(n){console.warn("THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead."),this.setUsage(n)}}});Object.assign(_n.prototype,{setDynamic:function(n){return console.warn("THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead."),this.setUsage(n===!0?Wo:Sl),this},setArray:function(){console.error("THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")}});Object.assign(Sg.prototype,{getArrays:function(){console.error("THREE.ExtrudeBufferGeometry: .getArrays() has been removed.")},addShapeList:function(){console.error("THREE.ExtrudeBufferGeometry: .addShapeList() has been removed.")},addShape:function(){console.error("THREE.ExtrudeBufferGeometry: .addShape() has been removed.")}});Object.assign(YL.prototype,{dispose:function(){console.error("THREE.Scene: .dispose() has been removed.")}});Object.defineProperties(nd.prototype,{dynamic:{set:function(){console.warn("THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.")}},onUpdate:{value:function(){return console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead."),this}}});Object.defineProperties(Gt.prototype,{wrapAround:{get:function(){console.warn("THREE.Material: .wrapAround has been removed.")},set:function(){console.warn("THREE.Material: .wrapAround has been removed.")}},overdraw:{get:function(){console.warn("THREE.Material: .overdraw has been removed.")},set:function(){console.warn("THREE.Material: .overdraw has been removed.")}},wrapRGB:{get:function(){return console.warn("THREE.Material: .wrapRGB has been removed."),new Ot}},shading:{get:function(){console.error("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead.")},set:function(n){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=n===kp}},stencilMask:{get:function(){return console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead."),this.stencilFuncMask},set:function(n){console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead."),this.stencilFuncMask=n}}});Object.defineProperties(Lr.prototype,{metal:{get:function(){return console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead."),!1},set:function(){console.warn("THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead")}}});Object.defineProperties(Ar.prototype,{transparency:{get:function(){return console.warn("THREE.MeshPhysicalMaterial: .transparency has been renamed to .transmission."),this.transmission},set:function(n){console.warn("THREE.MeshPhysicalMaterial: .transparency has been renamed to .transmission."),this.transmission=n}}});Object.defineProperties(rn.prototype,{derivatives:{get:function(){return console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives},set:function(n){console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives=n}}});Object.assign(Gl.prototype,{clearTarget:function(n,t,e,i){console.warn("THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead."),this.setRenderTarget(n),this.clear(t,e,i)},animate:function(n){console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop()."),this.setAnimationLoop(n)},getCurrentRenderTarget:function(){return console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget()."),this.getRenderTarget()},getMaxAnisotropy:function(){return console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy()."),this.capabilities.getMaxAnisotropy()},getPrecision:function(){return console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision."),this.capabilities.precision},resetGLState:function(){return console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset()."),this.state.reset()},supportsFloatTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' )."),this.extensions.get("OES_texture_float")},supportsHalfFloatTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' )."),this.extensions.get("OES_texture_half_float")},supportsStandardDerivatives:function(){return console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' )."),this.extensions.get("OES_standard_derivatives")},supportsCompressedTextureS3TC:function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' )."),this.extensions.get("WEBGL_compressed_texture_s3tc")},supportsCompressedTexturePVRTC:function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' )."),this.extensions.get("WEBGL_compressed_texture_pvrtc")},supportsBlendMinMax:function(){return console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' )."),this.extensions.get("EXT_blend_minmax")},supportsVertexTextures:function(){return console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures."),this.capabilities.vertexTextures},supportsInstancedArrays:function(){return console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' )."),this.extensions.get("ANGLE_instanced_arrays")},enableScissorTest:function(n){console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest()."),this.setScissorTest(n)},initMaterial:function(){console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.")},addPrePlugin:function(){console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.")},addPostPlugin:function(){console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.")},updateShadowMap:function(){console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.")},setFaceCulling:function(){console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.")},allocTextureUnit:function(){console.warn("THREE.WebGLRenderer: .allocTextureUnit() has been removed.")},setTexture:function(){console.warn("THREE.WebGLRenderer: .setTexture() has been removed.")},setTexture2D:function(){console.warn("THREE.WebGLRenderer: .setTexture2D() has been removed.")},setTextureCube:function(){console.warn("THREE.WebGLRenderer: .setTextureCube() has been removed.")},getActiveMipMapLevel:function(){return console.warn("THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel()."),this.getActiveMipmapLevel()}});Object.defineProperties(Gl.prototype,{shadowMapEnabled:{get:function(){return this.shadowMap.enabled},set:function(n){console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled."),this.shadowMap.enabled=n}},shadowMapType:{get:function(){return this.shadowMap.type},set:function(n){console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type."),this.shadowMap.type=n}},shadowMapCullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")}},context:{get:function(){return console.warn("THREE.WebGLRenderer: .context has been removed. Use .getContext() instead."),this.getContext()}},vr:{get:function(){return console.warn("THREE.WebGLRenderer: .vr has been renamed to .xr"),this.xr}},gammaInput:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead."),!1},set:function(){console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.")}},gammaOutput:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."),!1},set:function(n){console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."),this.outputEncoding=n===!0?dm:Vo}},toneMappingWhitePoint:{get:function(){return console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed."),1},set:function(){console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.")}}});Object.defineProperties(Qm.prototype,{cullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")}},renderReverseSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")}},renderSingleSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")}}});Object.defineProperties(Pn.prototype,{wrapS:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS},set:function(n){console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS=n}},wrapT:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT},set:function(n){console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT=n}},magFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter},set:function(n){console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter=n}},minFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter},set:function(n){console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter=n}},anisotropy:{get:function(){return console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy},set:function(n){console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy=n}},offset:{get:function(){return console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset},set:function(n){console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset=n}},repeat:{get:function(){return console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat},set:function(n){console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat=n}},format:{get:function(){return console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format},set:function(n){console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format=n}},type:{get:function(){return console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type},set:function(n){console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type=n}},generateMipmaps:{get:function(){return console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps},set:function(n){console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps=n}}});Object.defineProperties(k3.prototype,{load:{value:function(n){console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");const t=this;return new Ku().load(n,function(i){t.setBuffer(i)}),this}},startTime:{set:function(){console.warn("THREE.Audio: .startTime is now .play( delay ).")}}});Os.prototype.updateCubeMap=function(n,t){return console.warn("THREE.CubeCamera: .updateCubeMap() is now .update()."),this.update(n,t)};Os.prototype.clear=function(n,t,e,i){return console.warn("THREE.CubeCamera: .clear() is now .renderTarget.clear()."),this.renderTarget.clear(n,t,e,i)};mr.crossOrigin=void 0;mr.loadTexture=function(n,t,e,i){console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");const r=new Vu;r.setCrossOrigin(this.crossOrigin);const s=r.load(n,e,void 0,i);return t&&(s.mapping=t),s};mr.loadTextureCube=function(n,t,e,i){console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");const r=new ku;r.setCrossOrigin(this.crossOrigin);const s=r.load(n,e,void 0,i);return t&&(s.mapping=t),s};mr.loadCompressedTexture=function(){console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.")};mr.loadCompressedTextureCube=function(){console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.")};typeof __THREE_DEVTOOLS__!="undefined"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:Kw}}));function od(n,t){if(!(n instanceof t))throw new TypeError("Cannot call a class as a function")}function tv(n,t){for(var e=0;e<t.length;e++){var i=t[e];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(n,i.key,i)}}function nC(n,t,e){return t&&tv(n.prototype,t),e&&tv(n,e),n}var ev=function n(t,e){od(this,n),this.target=t,this.name=e,this.intersected=!1,this.distance=0},bi=function(){function n(t){var e=arguments.length>1&&arguments[1]!==void 0?arguments[1]:null;od(this,n),this.cancelBubble=!1,this.type=t,this.originalEvent=e}return nC(n,[{key:"stopPropagation",value:function(){this.cancelBubble=!0}}]),n}(),sC=function n(t,e,i){var r=this;od(this,n),this.dispose=function(){domElement.removeEventListener("click",r.onMouseClick),r.supportsPointerEvents?(domElement.ownerDocument.removeEventListener("pointermove",r.onDocumentMouseMove),domElement.removeEventListener("pointerdown",r.onMouseDown),domElement.removeEventListener("pointerup",r.onMouseUp)):(domElement.ownerDocument.removeEventListener("mousemove",r.onDocumentMouseMove),domElement.removeEventListener("mousedown",r.onMouseDown),domElement.removeEventListener("mouseup",r.onMouseUp),domElement.removeEventListener("touchstart",r.onTouchStart),domElement.removeEventListener("touchmove",r.onTouchMove),domElement.removeEventListener("touchend",r.onTouchEnd))},this.add=function(s){var o=arguments.length>1&&arguments[1]!==void 0?arguments[1]:[];if(s)if(o.length>0)o.forEach(function(l){var c=s.getObjectByName(l);if(c){var h=new ev(c,l);r.interactiveObjects.push(h)}});else{var a=new ev(s,s.name);r.interactiveObjects.push(a)}},this.remove=function(s){var o=arguments.length>1&&arguments[1]!==void 0?arguments[1]:[];if(s)if(o.length>0){var a=[];r.interactiveObjects.forEach(function(c){o.includes(c.name)||a.push(c)}),r.interactiveObjects=a}else{var l=[];r.interactiveObjects.forEach(function(c){c.name!==s.name&&l.push(c)}),r.interactiveObjects=l}},this.update=function(){r.raycaster.setFromCamera(r.mouse,r.camera),r.interactiveObjects.forEach(function(a){a.target&&r.checkIntersection(a)}),r.interactiveObjects.sort(function(a,l){return a.distance-l.distance});var s=new bi("mouseout");r.interactiveObjects.forEach(function(a){!a.intersected&&a.wasIntersected&&r.dispatch(a,s)});var o=new bi("mouseover");r.interactiveObjects.forEach(function(a){a.intersected&&!a.wasIntersected&&r.dispatch(a,o)})},this.checkIntersection=function(s){var o=r.raycaster.intersectObjects([s.target],!0);if(s.wasIntersected=s.intersected,o.length>0){var a=o[0].distance;o.forEach(function(l){l.distance<a&&(a=l.distance)}),s.intersected=!0,s.distance=a}else s.intersected=!1},this.onDocumentMouseMove=function(s){r.mapPositionToPoint(r.mouse,s.clientX,s.clientY);var o=new bi("mousemove",s);r.interactiveObjects.forEach(function(a){r.dispatch(a,o)})},this.onTouchMove=function(s){r.mapPositionToPoint(r.mouse,s.touches[0].clientX,s.touches[0].clientY);var o=new bi(r.treatTouchEventsAsMouseEvents?"mousemove":"touchmove",s);r.interactiveObjects.forEach(function(a){r.dispatch(a,o)})},this.onMouseClick=function(s){r.update();var o=new bi("click",s);r.interactiveObjects.forEach(function(a){a.intersected&&r.dispatch(a,o)})},this.onMouseDown=function(s){r.mapPositionToPoint(r.mouse,s.clientX,s.clientY),r.update();var o=new bi("mousedown",s);r.interactiveObjects.forEach(function(a){a.intersected&&r.dispatch(a,o)})},this.onTouchStart=function(s){r.mapPositionToPoint(r.mouse,s.touches[0].clientX,s.touches[0].clientY),r.update();var o=new bi(r.treatTouchEventsAsMouseEvents?"mousedown":"touchstart",s);r.interactiveObjects.forEach(function(a){a.intersected&&r.dispatch(a,o)})},this.onMouseUp=function(s){var o=new bi("mouseup",s);r.interactiveObjects.forEach(function(a){r.dispatch(a,o)})},this.onTouchEnd=function(s){r.mapPositionToPoint(r.mouse,s.touches[0].clientX,s.touches[0].clientY),r.update();var o=new bi(r.treatTouchEventsAsMouseEvents?"mouseup":"touchend",s);r.interactiveObjects.forEach(function(a){r.dispatch(a,o)})},this.dispatch=function(s,o){s.target&&!o.cancelBubble&&(o.coords=r.mouse,o.distance=s.distance,o.intersected=s.intersected,s.target.dispatchEvent(o))},this.mapPositionToPoint=function(s,o,a){var l;r.renderer.domElement.parentElement?l=r.renderer.domElement.getBoundingClientRect():l={x:0,y:0,left:0,top:0,width:0,height:0},s.x=(o-l.left)/l.width*2-1,s.y=-((a-l.top)/l.height)*2+1},this.renderer=t,this.camera=e,this.domElement=i,this.mouse=new wt(-1,1),this.supportsPointerEvents=!!window.PointerEvent,this.interactiveObjects=[],this.raycaster=new id,i.addEventListener("click",this.onMouseClick),this.supportsPointerEvents?(i.ownerDocument.addEventListener("pointermove",this.onDocumentMouseMove),i.addEventListener("pointerdown",this.onMouseDown),i.addEventListener("pointerup",this.onMouseUp)):(i.ownerDocument.addEventListener("mousemove",this.onDocumentMouseMove),i.addEventListener("mousedown",this.onMouseDown),i.addEventListener("mouseup",this.onMouseUp),i.addEventListener("touchstart",this.onTouchStart,{passive:!0}),i.addEventListener("touchmove",this.onTouchMove,{passive:!0}),i.addEventListener("touchend",this.onTouchEnd,{passive:!0})),this.treatTouchEventsAsMouseEvents=!0};class oC extends ai{constructor(t){super(t)}load(t,e,i,r){const s=this,o=new Tp(this.manager);o.setPath(this.path),o.setResponseType("arraybuffer"),o.setRequestHeader(this.requestHeader),o.setWithCredentials(this.withCredentials),o.load(t,function(a){try{e(s.parse(a))}catch(l){r?r(l):console.error(l),s.manager.itemError(t)}},i,r)}parse(t){function e(c){const h=new DataView(c),u=32/8*3+32/8*3*3+16/8,d=h.getUint32(80,!0);if(80+32/8+d*u===h.byteLength)return!0;const g=[115,111,108,105,100];for(let v=0;v<5;v++)if(i(g,h,v))return!1;return!0}function i(c,h,u){for(let d=0,f=c.length;d<f;d++)if(c[d]!==h.getUint8(u+d,!1))return!1;return!0}function r(c){const h=new DataView(c),u=h.getUint32(80,!0);let d,f,g,v=!1,x,m,p,b,_;for(let B=0;B<80-10;B++)h.getUint32(B,!1)==1129270351&&h.getUint8(B+4)==82&&h.getUint8(B+5)==61&&(v=!0,x=new Float32Array(u*3*3),m=h.getUint8(B+6)/255,p=h.getUint8(B+7)/255,b=h.getUint8(B+8)/255,_=h.getUint8(B+9)/255);const w=84,E=12*4+2,S=new re,R=new Float32Array(u*3*3),W=new Float32Array(u*3*3);for(let B=0;B<u;B++){const T=w+B*E,k=h.getFloat32(T,!0),I=h.getFloat32(T+4,!0),N=h.getFloat32(T+8,!0);if(v){const C=h.getUint16(T+48,!0);(C&32768)==0?(d=(C&31)/31,f=(C>>5&31)/31,g=(C>>10&31)/31):(d=m,f=p,g=b)}for(let C=1;C<=3;C++){const L=T+C*12,F=B*3*3+(C-1)*3;R[F]=h.getFloat32(L,!0),R[F+1]=h.getFloat32(L+4,!0),R[F+2]=h.getFloat32(L+8,!0),W[F]=k,W[F+1]=I,W[F+2]=N,v&&(x[F]=d,x[F+1]=f,x[F+2]=g)}}return S.setAttribute("position",new Me(R,3)),S.setAttribute("normal",new Me(W,3)),v&&(S.setAttribute("color",new Me(x,3)),S.hasColors=!0,S.alpha=_),S}function s(c){const h=new re,u=/solid([\s\S]*?)endsolid/g,d=/facet([\s\S]*?)endfacet/g;let f=0;const g=/[\s]+([+-]?(?:\d*)(?:\.\d*)?(?:[eE][+-]?\d+)?)/.source,v=new RegExp("vertex"+g+g+g,"g"),x=new RegExp("normal"+g+g+g,"g"),m=[],p=[],b=new O;let _,w=0,E=0,S=0;for(;(_=u.exec(c))!==null;){E=S;const R=_[0];for(;(_=d.exec(R))!==null;){let T=0,k=0;const I=_[0];for(;(_=x.exec(I))!==null;)b.x=parseFloat(_[1]),b.y=parseFloat(_[2]),b.z=parseFloat(_[3]),k++;for(;(_=v.exec(I))!==null;)m.push(parseFloat(_[1]),parseFloat(_[2]),parseFloat(_[3])),p.push(b.x,b.y,b.z),T++,S++;k!==1&&console.error("THREE.STLLoader: Something isn't right with the normal of face number "+f),T!==3&&console.error("THREE.STLLoader: Something isn't right with the vertices of face number "+f),f++}const W=E,B=S-E;h.addGroup(W,B,w),w++}return h.setAttribute("position",new ue(m,3)),h.setAttribute("normal",new ue(p,3)),h}function o(c){return typeof c!="string"?Bp.decodeText(new Uint8Array(c)):c}function a(c){if(typeof c=="string"){const h=new Uint8Array(c.length);for(let u=0;u<c.length;u++)h[u]=c.charCodeAt(u)&255;return h.buffer||h}else return c}const l=a(t);return e(l)?r(l):s(o(t))}}var gc=function(){var n=0,t=document.createElement("div");t.style.cssText="position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000",t.addEventListener("click",function(h){h.preventDefault(),i(++n%t.children.length)},!1);function e(h){return t.appendChild(h.dom),h}function i(h){for(var u=0;u<t.children.length;u++)t.children[u].style.display=u===h?"block":"none";n=h}var r=(performance||Date).now(),s=r,o=0,a=e(new gc.Panel("FPS","#0ff","#002")),l=e(new gc.Panel("MS","#0f0","#020"));if(self.performance&&self.performance.memory)var c=e(new gc.Panel("MB","#f08","#201"));return i(0),{REVISION:16,dom:t,addPanel:e,showPanel:i,begin:function(){r=(performance||Date).now()},end:function(){o++;var h=(performance||Date).now();if(l.update(h-r,200),h>=s+1e3&&(a.update(o*1e3/(h-s),100),s=h,o=0,c)){var u=performance.memory;c.update(u.usedJSHeapSize/1048576,u.jsHeapSizeLimit/1048576)}return h},update:function(){r=this.end()},domElement:t,setMode:i}};gc.Panel=function(n,t,e){var i=1/0,r=0,s=Math.round,o=s(window.devicePixelRatio||1),a=80*o,l=48*o,c=3*o,h=2*o,u=3*o,d=15*o,f=74*o,g=30*o,v=document.createElement("canvas");v.width=a,v.height=l,v.style.cssText="width:80px;height:48px";var x=v.getContext("2d");return x.font="bold "+9*o+"px Helvetica,Arial,sans-serif",x.textBaseline="top",x.fillStyle=e,x.fillRect(0,0,a,l),x.fillStyle=t,x.fillText(n,c,h),x.fillRect(u,d,f,g),x.fillStyle=e,x.globalAlpha=.9,x.fillRect(u,d,f,g),{dom:v,update:function(m,p){i=Math.min(i,m),r=Math.max(r,m),x.fillStyle=e,x.globalAlpha=1,x.fillRect(0,0,a,d),x.fillStyle=t,x.fillText(s(m)+" "+n+" ("+s(i)+"-"+s(r)+")",c,h),x.drawImage(v,u+o,d,f-o,g,u,d,f-o,g),x.fillRect(u+f-o,d,o,g),x.fillStyle=e,x.globalAlpha=.9,x.fillRect(u+f-o,d,o,s((1-m/p)*g))}}};export{lp as D,Jw as G,sC as I,Mp as M,rC as O,en as P,kf as S,ww as T,se as W,bp as a,tn as b,Xc as c,dw as d,oC as e,gc as f,Tw as g,rh as h,Ir as i,bo as j};
